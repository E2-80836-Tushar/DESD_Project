
ultrasonicsensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d8c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004f1c  08004f1c  00014f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f84  08004f84  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004f84  08004f84  00014f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f8c  08004f8c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f8c  08004f8c  00014f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f90  08004f90  00014f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004f94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000250  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002b8  200002b8  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000cb35  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001e22  00000000  00000000  0002cc10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c80  00000000  00000000  0002ea38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000009b5  00000000  00000000  0002f6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021f7a  00000000  00000000  0003006d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000e735  00000000  00000000  00051fe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cc604  00000000  00000000  0006071c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003c34  00000000  00000000  0012cd20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  00130954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004f04 	.word	0x08004f04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004f04 	.word	0x08004f04

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a60:	f000 b970 	b.w	8000d44 <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9e08      	ldr	r6, [sp, #32]
 8000a82:	460d      	mov	r5, r1
 8000a84:	4604      	mov	r4, r0
 8000a86:	460f      	mov	r7, r1
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d14a      	bne.n	8000b22 <__udivmoddi4+0xa6>
 8000a8c:	428a      	cmp	r2, r1
 8000a8e:	4694      	mov	ip, r2
 8000a90:	d965      	bls.n	8000b5e <__udivmoddi4+0xe2>
 8000a92:	fab2 f382 	clz	r3, r2
 8000a96:	b143      	cbz	r3, 8000aaa <__udivmoddi4+0x2e>
 8000a98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a9c:	f1c3 0220 	rsb	r2, r3, #32
 8000aa0:	409f      	lsls	r7, r3
 8000aa2:	fa20 f202 	lsr.w	r2, r0, r2
 8000aa6:	4317      	orrs	r7, r2
 8000aa8:	409c      	lsls	r4, r3
 8000aaa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000aae:	fa1f f58c 	uxth.w	r5, ip
 8000ab2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ab6:	0c22      	lsrs	r2, r4, #16
 8000ab8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000abc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ac0:	fb01 f005 	mul.w	r0, r1, r5
 8000ac4:	4290      	cmp	r0, r2
 8000ac6:	d90a      	bls.n	8000ade <__udivmoddi4+0x62>
 8000ac8:	eb1c 0202 	adds.w	r2, ip, r2
 8000acc:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000ad0:	f080 811c 	bcs.w	8000d0c <__udivmoddi4+0x290>
 8000ad4:	4290      	cmp	r0, r2
 8000ad6:	f240 8119 	bls.w	8000d0c <__udivmoddi4+0x290>
 8000ada:	3902      	subs	r1, #2
 8000adc:	4462      	add	r2, ip
 8000ade:	1a12      	subs	r2, r2, r0
 8000ae0:	b2a4      	uxth	r4, r4
 8000ae2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ae6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000aee:	fb00 f505 	mul.w	r5, r0, r5
 8000af2:	42a5      	cmp	r5, r4
 8000af4:	d90a      	bls.n	8000b0c <__udivmoddi4+0x90>
 8000af6:	eb1c 0404 	adds.w	r4, ip, r4
 8000afa:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000afe:	f080 8107 	bcs.w	8000d10 <__udivmoddi4+0x294>
 8000b02:	42a5      	cmp	r5, r4
 8000b04:	f240 8104 	bls.w	8000d10 <__udivmoddi4+0x294>
 8000b08:	4464      	add	r4, ip
 8000b0a:	3802      	subs	r0, #2
 8000b0c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b10:	1b64      	subs	r4, r4, r5
 8000b12:	2100      	movs	r1, #0
 8000b14:	b11e      	cbz	r6, 8000b1e <__udivmoddi4+0xa2>
 8000b16:	40dc      	lsrs	r4, r3
 8000b18:	2300      	movs	r3, #0
 8000b1a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b22:	428b      	cmp	r3, r1
 8000b24:	d908      	bls.n	8000b38 <__udivmoddi4+0xbc>
 8000b26:	2e00      	cmp	r6, #0
 8000b28:	f000 80ed 	beq.w	8000d06 <__udivmoddi4+0x28a>
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b32:	4608      	mov	r0, r1
 8000b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b38:	fab3 f183 	clz	r1, r3
 8000b3c:	2900      	cmp	r1, #0
 8000b3e:	d149      	bne.n	8000bd4 <__udivmoddi4+0x158>
 8000b40:	42ab      	cmp	r3, r5
 8000b42:	d302      	bcc.n	8000b4a <__udivmoddi4+0xce>
 8000b44:	4282      	cmp	r2, r0
 8000b46:	f200 80f8 	bhi.w	8000d3a <__udivmoddi4+0x2be>
 8000b4a:	1a84      	subs	r4, r0, r2
 8000b4c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b50:	2001      	movs	r0, #1
 8000b52:	4617      	mov	r7, r2
 8000b54:	2e00      	cmp	r6, #0
 8000b56:	d0e2      	beq.n	8000b1e <__udivmoddi4+0xa2>
 8000b58:	e9c6 4700 	strd	r4, r7, [r6]
 8000b5c:	e7df      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000b5e:	b902      	cbnz	r2, 8000b62 <__udivmoddi4+0xe6>
 8000b60:	deff      	udf	#255	; 0xff
 8000b62:	fab2 f382 	clz	r3, r2
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f040 8090 	bne.w	8000c8c <__udivmoddi4+0x210>
 8000b6c:	1a8a      	subs	r2, r1, r2
 8000b6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b72:	fa1f fe8c 	uxth.w	lr, ip
 8000b76:	2101      	movs	r1, #1
 8000b78:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b7c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b80:	0c22      	lsrs	r2, r4, #16
 8000b82:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b86:	fb0e f005 	mul.w	r0, lr, r5
 8000b8a:	4290      	cmp	r0, r2
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0x124>
 8000b8e:	eb1c 0202 	adds.w	r2, ip, r2
 8000b92:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x122>
 8000b98:	4290      	cmp	r0, r2
 8000b9a:	f200 80cb 	bhi.w	8000d34 <__udivmoddi4+0x2b8>
 8000b9e:	4645      	mov	r5, r8
 8000ba0:	1a12      	subs	r2, r2, r0
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ba8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bb4:	45a6      	cmp	lr, r4
 8000bb6:	d908      	bls.n	8000bca <__udivmoddi4+0x14e>
 8000bb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bbc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000bc0:	d202      	bcs.n	8000bc8 <__udivmoddi4+0x14c>
 8000bc2:	45a6      	cmp	lr, r4
 8000bc4:	f200 80bb 	bhi.w	8000d3e <__udivmoddi4+0x2c2>
 8000bc8:	4610      	mov	r0, r2
 8000bca:	eba4 040e 	sub.w	r4, r4, lr
 8000bce:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bd2:	e79f      	b.n	8000b14 <__udivmoddi4+0x98>
 8000bd4:	f1c1 0720 	rsb	r7, r1, #32
 8000bd8:	408b      	lsls	r3, r1
 8000bda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bde:	ea4c 0c03 	orr.w	ip, ip, r3
 8000be2:	fa05 f401 	lsl.w	r4, r5, r1
 8000be6:	fa20 f307 	lsr.w	r3, r0, r7
 8000bea:	40fd      	lsrs	r5, r7
 8000bec:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bf0:	4323      	orrs	r3, r4
 8000bf2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bf6:	fa1f fe8c 	uxth.w	lr, ip
 8000bfa:	fb09 5518 	mls	r5, r9, r8, r5
 8000bfe:	0c1c      	lsrs	r4, r3, #16
 8000c00:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c04:	fb08 f50e 	mul.w	r5, r8, lr
 8000c08:	42a5      	cmp	r5, r4
 8000c0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c0e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c12:	d90b      	bls.n	8000c2c <__udivmoddi4+0x1b0>
 8000c14:	eb1c 0404 	adds.w	r4, ip, r4
 8000c18:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c1c:	f080 8088 	bcs.w	8000d30 <__udivmoddi4+0x2b4>
 8000c20:	42a5      	cmp	r5, r4
 8000c22:	f240 8085 	bls.w	8000d30 <__udivmoddi4+0x2b4>
 8000c26:	f1a8 0802 	sub.w	r8, r8, #2
 8000c2a:	4464      	add	r4, ip
 8000c2c:	1b64      	subs	r4, r4, r5
 8000c2e:	b29d      	uxth	r5, r3
 8000c30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c34:	fb09 4413 	mls	r4, r9, r3, r4
 8000c38:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c3c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c40:	45a6      	cmp	lr, r4
 8000c42:	d908      	bls.n	8000c56 <__udivmoddi4+0x1da>
 8000c44:	eb1c 0404 	adds.w	r4, ip, r4
 8000c48:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000c4c:	d26c      	bcs.n	8000d28 <__udivmoddi4+0x2ac>
 8000c4e:	45a6      	cmp	lr, r4
 8000c50:	d96a      	bls.n	8000d28 <__udivmoddi4+0x2ac>
 8000c52:	3b02      	subs	r3, #2
 8000c54:	4464      	add	r4, ip
 8000c56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c5e:	eba4 040e 	sub.w	r4, r4, lr
 8000c62:	42ac      	cmp	r4, r5
 8000c64:	46c8      	mov	r8, r9
 8000c66:	46ae      	mov	lr, r5
 8000c68:	d356      	bcc.n	8000d18 <__udivmoddi4+0x29c>
 8000c6a:	d053      	beq.n	8000d14 <__udivmoddi4+0x298>
 8000c6c:	b156      	cbz	r6, 8000c84 <__udivmoddi4+0x208>
 8000c6e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c72:	eb64 040e 	sbc.w	r4, r4, lr
 8000c76:	fa04 f707 	lsl.w	r7, r4, r7
 8000c7a:	40ca      	lsrs	r2, r1
 8000c7c:	40cc      	lsrs	r4, r1
 8000c7e:	4317      	orrs	r7, r2
 8000c80:	e9c6 7400 	strd	r7, r4, [r6]
 8000c84:	4618      	mov	r0, r3
 8000c86:	2100      	movs	r1, #0
 8000c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8c:	f1c3 0120 	rsb	r1, r3, #32
 8000c90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c94:	fa20 f201 	lsr.w	r2, r0, r1
 8000c98:	fa25 f101 	lsr.w	r1, r5, r1
 8000c9c:	409d      	lsls	r5, r3
 8000c9e:	432a      	orrs	r2, r5
 8000ca0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca4:	fa1f fe8c 	uxth.w	lr, ip
 8000ca8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cac:	fb07 1510 	mls	r5, r7, r0, r1
 8000cb0:	0c11      	lsrs	r1, r2, #16
 8000cb2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cb6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cba:	428d      	cmp	r5, r1
 8000cbc:	fa04 f403 	lsl.w	r4, r4, r3
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x258>
 8000cc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000cca:	d22f      	bcs.n	8000d2c <__udivmoddi4+0x2b0>
 8000ccc:	428d      	cmp	r5, r1
 8000cce:	d92d      	bls.n	8000d2c <__udivmoddi4+0x2b0>
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	4461      	add	r1, ip
 8000cd4:	1b49      	subs	r1, r1, r5
 8000cd6:	b292      	uxth	r2, r2
 8000cd8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cdc:	fb07 1115 	mls	r1, r7, r5, r1
 8000ce0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ce4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ce8:	4291      	cmp	r1, r2
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x282>
 8000cec:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cf4:	d216      	bcs.n	8000d24 <__udivmoddi4+0x2a8>
 8000cf6:	4291      	cmp	r1, r2
 8000cf8:	d914      	bls.n	8000d24 <__udivmoddi4+0x2a8>
 8000cfa:	3d02      	subs	r5, #2
 8000cfc:	4462      	add	r2, ip
 8000cfe:	1a52      	subs	r2, r2, r1
 8000d00:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d04:	e738      	b.n	8000b78 <__udivmoddi4+0xfc>
 8000d06:	4631      	mov	r1, r6
 8000d08:	4630      	mov	r0, r6
 8000d0a:	e708      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000d0c:	4639      	mov	r1, r7
 8000d0e:	e6e6      	b.n	8000ade <__udivmoddi4+0x62>
 8000d10:	4610      	mov	r0, r2
 8000d12:	e6fb      	b.n	8000b0c <__udivmoddi4+0x90>
 8000d14:	4548      	cmp	r0, r9
 8000d16:	d2a9      	bcs.n	8000c6c <__udivmoddi4+0x1f0>
 8000d18:	ebb9 0802 	subs.w	r8, r9, r2
 8000d1c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d20:	3b01      	subs	r3, #1
 8000d22:	e7a3      	b.n	8000c6c <__udivmoddi4+0x1f0>
 8000d24:	4645      	mov	r5, r8
 8000d26:	e7ea      	b.n	8000cfe <__udivmoddi4+0x282>
 8000d28:	462b      	mov	r3, r5
 8000d2a:	e794      	b.n	8000c56 <__udivmoddi4+0x1da>
 8000d2c:	4640      	mov	r0, r8
 8000d2e:	e7d1      	b.n	8000cd4 <__udivmoddi4+0x258>
 8000d30:	46d0      	mov	r8, sl
 8000d32:	e77b      	b.n	8000c2c <__udivmoddi4+0x1b0>
 8000d34:	3d02      	subs	r5, #2
 8000d36:	4462      	add	r2, ip
 8000d38:	e732      	b.n	8000ba0 <__udivmoddi4+0x124>
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e70a      	b.n	8000b54 <__udivmoddi4+0xd8>
 8000d3e:	4464      	add	r4, ip
 8000d40:	3802      	subs	r0, #2
 8000d42:	e742      	b.n	8000bca <__udivmoddi4+0x14e>

08000d44 <__aeabi_idiv0>:
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	4b17      	ldr	r3, [pc, #92]	; (8000db0 <MX_GPIO_Init+0x68>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a16      	ldr	r2, [pc, #88]	; (8000db0 <MX_GPIO_Init+0x68>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <MX_GPIO_Init+0x68>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60bb      	str	r3, [r7, #8]
 8000d6e:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <MX_GPIO_Init+0x68>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a0f      	ldr	r2, [pc, #60]	; (8000db0 <MX_GPIO_Init+0x68>)
 8000d74:	f043 0304 	orr.w	r3, r3, #4
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b0d      	ldr	r3, [pc, #52]	; (8000db0 <MX_GPIO_Init+0x68>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0304 	and.w	r3, r3, #4
 8000d82:	60bb      	str	r3, [r7, #8]
 8000d84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	607b      	str	r3, [r7, #4]
 8000d8a:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <MX_GPIO_Init+0x68>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	4a08      	ldr	r2, [pc, #32]	; (8000db0 <MX_GPIO_Init+0x68>)
 8000d90:	f043 0302 	orr.w	r3, r3, #2
 8000d94:	6313      	str	r3, [r2, #48]	; 0x30
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <MX_GPIO_Init+0x68>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	f003 0302 	and.w	r3, r3, #2
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]

}
 8000da2:	bf00      	nop
 8000da4:	3714      	adds	r7, #20
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	40023800 	.word	0x40023800

08000db4 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch,FILE *f)
#endif


PUTCHAR_PROTOTYPE{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10);
 8000dbc:	1d39      	adds	r1, r7, #4
 8000dbe:	230a      	movs	r3, #10
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	4804      	ldr	r0, [pc, #16]	; (8000dd4 <__io_putchar+0x20>)
 8000dc4:	f002 fdf1 	bl	80039aa <HAL_UART_Transmit>
	return ch;
 8000dc8:	687b      	ldr	r3, [r7, #4]
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000124 	.word	0x20000124

08000dd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ddc:	f000 fbec 	bl	80015b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000de0:	f000 f86c 	bl	8000ebc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000de4:	f7ff ffb0 	bl	8000d48 <MX_GPIO_Init>
  MX_TIM8_Init();
 8000de8:	f000 f9e0 	bl	80011ac <MX_TIM8_Init>
  MX_TIM11_Init();
 8000dec:	f000 fa62 	bl	80012b4 <MX_TIM11_Init>
  MX_USART2_UART_Init();
 8000df0:	f000 fb46 	bl	8001480 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim11);
 8000df4:	482a      	ldr	r0, [pc, #168]	; (8000ea0 <main+0xc8>)
 8000df6:	f001 fbbb 	bl	8002570 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim11);
 8000dfa:	4829      	ldr	r0, [pc, #164]	; (8000ea0 <main+0xc8>)
 8000dfc:	f001 fbb8 	bl	8002570 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8000e00:	2100      	movs	r1, #0
 8000e02:	4827      	ldr	r0, [pc, #156]	; (8000ea0 <main+0xc8>)
 8000e04:	f001 fc76 	bl	80026f4 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_1);
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4826      	ldr	r0, [pc, #152]	; (8000ea4 <main+0xcc>)
 8000e0c:	f001 fd94 	bl	8002938 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_2);
 8000e10:	2104      	movs	r1, #4
 8000e12:	4824      	ldr	r0, [pc, #144]	; (8000ea4 <main+0xcc>)
 8000e14:	f001 fd90 	bl	8002938 <HAL_TIM_IC_Start>
  TIM11->CCR1=3;
 8000e18:	4b23      	ldr	r3, [pc, #140]	; (8000ea8 <main+0xd0>)
 8000e1a:	2203      	movs	r2, #3
 8000e1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GetTick()-delay >= 1000){
 8000e1e:	f000 fc31 	bl	8001684 <HAL_GetTick>
 8000e22:	4602      	mov	r2, r0
 8000e24:	4b21      	ldr	r3, [pc, #132]	; (8000eac <main+0xd4>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e2e:	d3f6      	bcc.n	8000e1e <main+0x46>
		  delay = HAL_GetTick();
 8000e30:	f000 fc28 	bl	8001684 <HAL_GetTick>
 8000e34:	4603      	mov	r3, r0
 8000e36:	4a1d      	ldr	r2, [pc, #116]	; (8000eac <main+0xd4>)
 8000e38:	6013      	str	r3, [r2, #0]
		  //echo1 = HAL_TIM_ReadCapturedValue(&htim8, TIM_CHANNEL_1);
		  echo2 = HAL_TIM_ReadCapturedValue(&htim8, TIM_CHANNEL_2);
 8000e3a:	2104      	movs	r1, #4
 8000e3c:	4819      	ldr	r0, [pc, #100]	; (8000ea4 <main+0xcc>)
 8000e3e:	f001 fff7 	bl	8002e30 <HAL_TIM_ReadCapturedValue>
 8000e42:	4603      	mov	r3, r0
 8000e44:	4a1a      	ldr	r2, [pc, #104]	; (8000eb0 <main+0xd8>)
 8000e46:	6013      	str	r3, [r2, #0]
		  //dis1 = echo1 / 58.0f;
		  //dist2 = echo2 / 58.0f;
		  dist2 = ((echo2 * 0.0340)/2);
 8000e48:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <main+0xd8>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fb51 	bl	80004f4 <__aeabi_ui2d>
 8000e52:	a311      	add	r3, pc, #68	; (adr r3, 8000e98 <main+0xc0>)
 8000e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e58:	f7ff fbc6 	bl	80005e8 <__aeabi_dmul>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	460b      	mov	r3, r1
 8000e60:	4610      	mov	r0, r2
 8000e62:	4619      	mov	r1, r3
 8000e64:	f04f 0200 	mov.w	r2, #0
 8000e68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e6c:	f7ff fce6 	bl	800083c <__aeabi_ddiv>
 8000e70:	4602      	mov	r2, r0
 8000e72:	460b      	mov	r3, r1
 8000e74:	4610      	mov	r0, r2
 8000e76:	4619      	mov	r1, r3
 8000e78:	f7ff fdc8 	bl	8000a0c <__aeabi_d2uiz>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	4a0d      	ldr	r2, [pc, #52]	; (8000eb4 <main+0xdc>)
 8000e80:	6013      	str	r3, [r2, #0]
		  printf("echo2 : %lu , Dis2 : %d\r\n",echo2,dist2);
 8000e82:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <main+0xd8>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a0b      	ldr	r2, [pc, #44]	; (8000eb4 <main+0xdc>)
 8000e88:	6812      	ldr	r2, [r2, #0]
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	480a      	ldr	r0, [pc, #40]	; (8000eb8 <main+0xe0>)
 8000e8e:	f003 f9c3 	bl	8004218 <iprintf>
	  if(HAL_GetTick()-delay >= 1000){
 8000e92:	e7c4      	b.n	8000e1e <main+0x46>
 8000e94:	f3af 8000 	nop.w
 8000e98:	b020c49c 	.word	0xb020c49c
 8000e9c:	3fa16872 	.word	0x3fa16872
 8000ea0:	200000dc 	.word	0x200000dc
 8000ea4:	20000094 	.word	0x20000094
 8000ea8:	40014800 	.word	0x40014800
 8000eac:	20000088 	.word	0x20000088
 8000eb0:	20000084 	.word	0x20000084
 8000eb4:	2000008c 	.word	0x2000008c
 8000eb8:	08004f1c 	.word	0x08004f1c

08000ebc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b094      	sub	sp, #80	; 0x50
 8000ec0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ec2:	f107 0320 	add.w	r3, r7, #32
 8000ec6:	2230      	movs	r2, #48	; 0x30
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f003 f9f9 	bl	80042c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed0:	f107 030c 	add.w	r3, r7, #12
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	4b28      	ldr	r3, [pc, #160]	; (8000f88 <SystemClock_Config+0xcc>)
 8000ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee8:	4a27      	ldr	r2, [pc, #156]	; (8000f88 <SystemClock_Config+0xcc>)
 8000eea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eee:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef0:	4b25      	ldr	r3, [pc, #148]	; (8000f88 <SystemClock_Config+0xcc>)
 8000ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000efc:	2300      	movs	r3, #0
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	4b22      	ldr	r3, [pc, #136]	; (8000f8c <SystemClock_Config+0xd0>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a21      	ldr	r2, [pc, #132]	; (8000f8c <SystemClock_Config+0xd0>)
 8000f06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f0a:	6013      	str	r3, [r2, #0]
 8000f0c:	4b1f      	ldr	r3, [pc, #124]	; (8000f8c <SystemClock_Config+0xd0>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f14:	607b      	str	r3, [r7, #4]
 8000f16:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f20:	2310      	movs	r3, #16
 8000f22:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f24:	2302      	movs	r3, #2
 8000f26:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f2c:	2308      	movs	r3, #8
 8000f2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000f30:	23a0      	movs	r3, #160	; 0xa0
 8000f32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f34:	2302      	movs	r3, #2
 8000f36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f38:	2307      	movs	r3, #7
 8000f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f3c:	f107 0320 	add.w	r3, r7, #32
 8000f40:	4618      	mov	r0, r3
 8000f42:	f000 fe2d 	bl	8001ba0 <HAL_RCC_OscConfig>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f4c:	f000 f820 	bl	8000f90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f50:	230f      	movs	r3, #15
 8000f52:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f54:	2302      	movs	r3, #2
 8000f56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f5c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000f62:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f66:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f68:	f107 030c 	add.w	r3, r7, #12
 8000f6c:	2105      	movs	r1, #5
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f001 f88e 	bl	8002090 <HAL_RCC_ClockConfig>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f7a:	f000 f809 	bl	8000f90 <Error_Handler>
  }
}
 8000f7e:	bf00      	nop
 8000f80:	3750      	adds	r7, #80	; 0x50
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40007000 	.word	0x40007000

08000f90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f94:	b672      	cpsid	i
}
 8000f96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <Error_Handler+0x8>
	...

08000f9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <HAL_MspInit+0x4c>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000faa:	4a0f      	ldr	r2, [pc, #60]	; (8000fe8 <HAL_MspInit+0x4c>)
 8000fac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fb2:	4b0d      	ldr	r3, [pc, #52]	; (8000fe8 <HAL_MspInit+0x4c>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	603b      	str	r3, [r7, #0]
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <HAL_MspInit+0x4c>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	4a08      	ldr	r2, [pc, #32]	; (8000fe8 <HAL_MspInit+0x4c>)
 8000fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <HAL_MspInit+0x4c>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd6:	603b      	str	r3, [r7, #0]
 8000fd8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fda:	2007      	movs	r0, #7
 8000fdc:	f000 fc10 	bl	8001800 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40023800 	.word	0x40023800

08000fec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <NMI_Handler+0x4>

08000ff2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff6:	e7fe      	b.n	8000ff6 <HardFault_Handler+0x4>

08000ff8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ffc:	e7fe      	b.n	8000ffc <MemManage_Handler+0x4>

08000ffe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001002:	e7fe      	b.n	8001002 <BusFault_Handler+0x4>

08001004 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001008:	e7fe      	b.n	8001008 <UsageFault_Handler+0x4>

0800100a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001038:	f000 fb10 	bl	800165c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}

08001040 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
 8001050:	e00a      	b.n	8001068 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001052:	f3af 8000 	nop.w
 8001056:	4601      	mov	r1, r0
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	1c5a      	adds	r2, r3, #1
 800105c:	60ba      	str	r2, [r7, #8]
 800105e:	b2ca      	uxtb	r2, r1
 8001060:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	3301      	adds	r3, #1
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	697a      	ldr	r2, [r7, #20]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	429a      	cmp	r2, r3
 800106e:	dbf0      	blt.n	8001052 <_read+0x12>
  }

  return len;
 8001070:	687b      	ldr	r3, [r7, #4]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3718      	adds	r7, #24
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b086      	sub	sp, #24
 800107e:	af00      	add	r7, sp, #0
 8001080:	60f8      	str	r0, [r7, #12]
 8001082:	60b9      	str	r1, [r7, #8]
 8001084:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
 800108a:	e009      	b.n	80010a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	1c5a      	adds	r2, r3, #1
 8001090:	60ba      	str	r2, [r7, #8]
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fe8d 	bl	8000db4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	3301      	adds	r3, #1
 800109e:	617b      	str	r3, [r7, #20]
 80010a0:	697a      	ldr	r2, [r7, #20]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	dbf1      	blt.n	800108c <_write+0x12>
  }
  return len;
 80010a8:	687b      	ldr	r3, [r7, #4]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3718      	adds	r7, #24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <_close>:

int _close(int file)
{
 80010b2:	b480      	push	{r7}
 80010b4:	b083      	sub	sp, #12
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80010be:	4618      	mov	r0, r3
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010ca:	b480      	push	{r7}
 80010cc:	b083      	sub	sp, #12
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
 80010d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010da:	605a      	str	r2, [r3, #4]
  return 0;}
 80010dc:	2300      	movs	r3, #0
 80010de:	4618      	mov	r0, r3
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <_isatty>:

int _isatty(int file)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b083      	sub	sp, #12
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010f2:	2301      	movs	r3, #1
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3714      	adds	r7, #20
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
	...

0800111c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001124:	4a14      	ldr	r2, [pc, #80]	; (8001178 <_sbrk+0x5c>)
 8001126:	4b15      	ldr	r3, [pc, #84]	; (800117c <_sbrk+0x60>)
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001130:	4b13      	ldr	r3, [pc, #76]	; (8001180 <_sbrk+0x64>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d102      	bne.n	800113e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001138:	4b11      	ldr	r3, [pc, #68]	; (8001180 <_sbrk+0x64>)
 800113a:	4a12      	ldr	r2, [pc, #72]	; (8001184 <_sbrk+0x68>)
 800113c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800113e:	4b10      	ldr	r3, [pc, #64]	; (8001180 <_sbrk+0x64>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4413      	add	r3, r2
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	429a      	cmp	r2, r3
 800114a:	d207      	bcs.n	800115c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800114c:	f003 f908 	bl	8004360 <__errno>
 8001150:	4603      	mov	r3, r0
 8001152:	220c      	movs	r2, #12
 8001154:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001156:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800115a:	e009      	b.n	8001170 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800115c:	4b08      	ldr	r3, [pc, #32]	; (8001180 <_sbrk+0x64>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001162:	4b07      	ldr	r3, [pc, #28]	; (8001180 <_sbrk+0x64>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4413      	add	r3, r2
 800116a:	4a05      	ldr	r2, [pc, #20]	; (8001180 <_sbrk+0x64>)
 800116c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800116e:	68fb      	ldr	r3, [r7, #12]
}
 8001170:	4618      	mov	r0, r3
 8001172:	3718      	adds	r7, #24
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20020000 	.word	0x20020000
 800117c:	00000400 	.word	0x00000400
 8001180:	20000090 	.word	0x20000090
 8001184:	200002b8 	.word	0x200002b8

08001188 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <SystemInit+0x20>)
 800118e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001192:	4a05      	ldr	r2, [pc, #20]	; (80011a8 <SystemInit+0x20>)
 8001194:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001198:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <MX_TIM8_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim11;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08c      	sub	sp, #48	; 0x30
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80011b2:	f107 031c 	add.w	r3, r7, #28
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
 80011c0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c2:	f107 0314 	add.w	r3, r7, #20
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80011d8:	4b34      	ldr	r3, [pc, #208]	; (80012ac <MX_TIM8_Init+0x100>)
 80011da:	4a35      	ldr	r2, [pc, #212]	; (80012b0 <MX_TIM8_Init+0x104>)
 80011dc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 79;
 80011de:	4b33      	ldr	r3, [pc, #204]	; (80012ac <MX_TIM8_Init+0x100>)
 80011e0:	224f      	movs	r2, #79	; 0x4f
 80011e2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e4:	4b31      	ldr	r3, [pc, #196]	; (80012ac <MX_TIM8_Init+0x100>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80011ea:	4b30      	ldr	r3, [pc, #192]	; (80012ac <MX_TIM8_Init+0x100>)
 80011ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011f0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f2:	4b2e      	ldr	r3, [pc, #184]	; (80012ac <MX_TIM8_Init+0x100>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80011f8:	4b2c      	ldr	r3, [pc, #176]	; (80012ac <MX_TIM8_Init+0x100>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011fe:	4b2b      	ldr	r3, [pc, #172]	; (80012ac <MX_TIM8_Init+0x100>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001204:	4829      	ldr	r0, [pc, #164]	; (80012ac <MX_TIM8_Init+0x100>)
 8001206:	f001 f963 	bl	80024d0 <HAL_TIM_Base_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM8_Init+0x68>
  {
    Error_Handler();
 8001210:	f7ff febe 	bl	8000f90 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8001214:	4825      	ldr	r0, [pc, #148]	; (80012ac <MX_TIM8_Init+0x100>)
 8001216:	f001 fb35 	bl	8002884 <HAL_TIM_IC_Init>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8001220:	f7ff feb6 	bl	8000f90 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001224:	2304      	movs	r3, #4
 8001226:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8001228:	2360      	movs	r3, #96	; 0x60
 800122a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800122c:	230a      	movs	r3, #10
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8001234:	f107 031c 	add.w	r3, r7, #28
 8001238:	4619      	mov	r1, r3
 800123a:	481c      	ldr	r0, [pc, #112]	; (80012ac <MX_TIM8_Init+0x100>)
 800123c:	f001 fdb6 	bl	8002dac <HAL_TIM_SlaveConfigSynchro>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8001246:	f7ff fea3 	bl	8000f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800124e:	2300      	movs	r3, #0
 8001250:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	4619      	mov	r1, r3
 8001258:	4814      	ldr	r0, [pc, #80]	; (80012ac <MX_TIM8_Init+0x100>)
 800125a:	f002 fadd 	bl	8003818 <HAL_TIMEx_MasterConfigSynchronization>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_TIM8_Init+0xbc>
  {
    Error_Handler();
 8001264:	f7ff fe94 	bl	8000f90 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001268:	230a      	movs	r3, #10
 800126a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800126c:	2301      	movs	r3, #1
 800126e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001270:	2300      	movs	r3, #0
 8001272:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	2200      	movs	r2, #0
 800127c:	4619      	mov	r1, r3
 800127e:	480b      	ldr	r0, [pc, #44]	; (80012ac <MX_TIM8_Init+0x100>)
 8001280:	f001 fc36 	bl	8002af0 <HAL_TIM_IC_ConfigChannel>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM8_Init+0xe2>
  {
    Error_Handler();
 800128a:	f7ff fe81 	bl	8000f90 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	2204      	movs	r2, #4
 8001292:	4619      	mov	r1, r3
 8001294:	4805      	ldr	r0, [pc, #20]	; (80012ac <MX_TIM8_Init+0x100>)
 8001296:	f001 fc2b 	bl	8002af0 <HAL_TIM_IC_ConfigChannel>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80012a0:	f7ff fe76 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80012a4:	bf00      	nop
 80012a6:	3730      	adds	r7, #48	; 0x30
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000094 	.word	0x20000094
 80012b0:	40010400 	.word	0x40010400

080012b4 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b088      	sub	sp, #32
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
 80012c8:	615a      	str	r2, [r3, #20]
 80012ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80012cc:	4b1e      	ldr	r3, [pc, #120]	; (8001348 <MX_TIM11_Init+0x94>)
 80012ce:	4a1f      	ldr	r2, [pc, #124]	; (800134c <MX_TIM11_Init+0x98>)
 80012d0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 199;
 80012d2:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <MX_TIM11_Init+0x94>)
 80012d4:	22c7      	movs	r2, #199	; 0xc7
 80012d6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d8:	4b1b      	ldr	r3, [pc, #108]	; (8001348 <MX_TIM11_Init+0x94>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 39999;
 80012de:	4b1a      	ldr	r3, [pc, #104]	; (8001348 <MX_TIM11_Init+0x94>)
 80012e0:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80012e4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e6:	4b18      	ldr	r3, [pc, #96]	; (8001348 <MX_TIM11_Init+0x94>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ec:	4b16      	ldr	r3, [pc, #88]	; (8001348 <MX_TIM11_Init+0x94>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80012f2:	4815      	ldr	r0, [pc, #84]	; (8001348 <MX_TIM11_Init+0x94>)
 80012f4:	f001 f8ec 	bl	80024d0 <HAL_TIM_Base_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80012fe:	f7ff fe47 	bl	8000f90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8001302:	4811      	ldr	r0, [pc, #68]	; (8001348 <MX_TIM11_Init+0x94>)
 8001304:	f001 f99c 	bl	8002640 <HAL_TIM_PWM_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800130e:	f7ff fe3f 	bl	8000f90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001312:	2360      	movs	r3, #96	; 0x60
 8001314:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	2200      	movs	r2, #0
 8001326:	4619      	mov	r1, r3
 8001328:	4807      	ldr	r0, [pc, #28]	; (8001348 <MX_TIM11_Init+0x94>)
 800132a:	f001 fc7d 	bl	8002c28 <HAL_TIM_PWM_ConfigChannel>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8001334:	f7ff fe2c 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001338:	4803      	ldr	r0, [pc, #12]	; (8001348 <MX_TIM11_Init+0x94>)
 800133a:	f000 f867 	bl	800140c <HAL_TIM_MspPostInit>

}
 800133e:	bf00      	nop
 8001340:	3720      	adds	r7, #32
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200000dc 	.word	0x200000dc
 800134c:	40014800 	.word	0x40014800

08001350 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08a      	sub	sp, #40	; 0x28
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM8)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a23      	ldr	r2, [pc, #140]	; (80013fc <HAL_TIM_Base_MspInit+0xac>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d12c      	bne.n	80013cc <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	4b22      	ldr	r3, [pc, #136]	; (8001400 <HAL_TIM_Base_MspInit+0xb0>)
 8001378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137a:	4a21      	ldr	r2, [pc, #132]	; (8001400 <HAL_TIM_Base_MspInit+0xb0>)
 800137c:	f043 0302 	orr.w	r3, r3, #2
 8001380:	6453      	str	r3, [r2, #68]	; 0x44
 8001382:	4b1f      	ldr	r3, [pc, #124]	; (8001400 <HAL_TIM_Base_MspInit+0xb0>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	613b      	str	r3, [r7, #16]
 800138c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	4b1b      	ldr	r3, [pc, #108]	; (8001400 <HAL_TIM_Base_MspInit+0xb0>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	4a1a      	ldr	r2, [pc, #104]	; (8001400 <HAL_TIM_Base_MspInit+0xb0>)
 8001398:	f043 0304 	orr.w	r3, r3, #4
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
 800139e:	4b18      	ldr	r3, [pc, #96]	; (8001400 <HAL_TIM_Base_MspInit+0xb0>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	f003 0304 	and.w	r3, r3, #4
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013aa:	23c0      	movs	r3, #192	; 0xc0
 80013ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ae:	2302      	movs	r3, #2
 80013b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2300      	movs	r3, #0
 80013b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80013ba:	2303      	movs	r3, #3
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013be:	f107 0314 	add.w	r3, r7, #20
 80013c2:	4619      	mov	r1, r3
 80013c4:	480f      	ldr	r0, [pc, #60]	; (8001404 <HAL_TIM_Base_MspInit+0xb4>)
 80013c6:	f000 fa4f 	bl	8001868 <HAL_GPIO_Init>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80013ca:	e012      	b.n	80013f2 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM11)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a0d      	ldr	r2, [pc, #52]	; (8001408 <HAL_TIM_Base_MspInit+0xb8>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d10d      	bne.n	80013f2 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	4b09      	ldr	r3, [pc, #36]	; (8001400 <HAL_TIM_Base_MspInit+0xb0>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013de:	4a08      	ldr	r2, [pc, #32]	; (8001400 <HAL_TIM_Base_MspInit+0xb0>)
 80013e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013e4:	6453      	str	r3, [r2, #68]	; 0x44
 80013e6:	4b06      	ldr	r3, [pc, #24]	; (8001400 <HAL_TIM_Base_MspInit+0xb0>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013ee:	60bb      	str	r3, [r7, #8]
 80013f0:	68bb      	ldr	r3, [r7, #8]
}
 80013f2:	bf00      	nop
 80013f4:	3728      	adds	r7, #40	; 0x28
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40010400 	.word	0x40010400
 8001400:	40023800 	.word	0x40023800
 8001404:	40020800 	.word	0x40020800
 8001408:	40014800 	.word	0x40014800

0800140c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b088      	sub	sp, #32
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 030c 	add.w	r3, r7, #12
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM11)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a12      	ldr	r2, [pc, #72]	; (8001474 <HAL_TIM_MspPostInit+0x68>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d11e      	bne.n	800146c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM11_MspPostInit 0 */

  /* USER CODE END TIM11_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	4b11      	ldr	r3, [pc, #68]	; (8001478 <HAL_TIM_MspPostInit+0x6c>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a10      	ldr	r2, [pc, #64]	; (8001478 <HAL_TIM_MspPostInit+0x6c>)
 8001438:	f043 0302 	orr.w	r3, r3, #2
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <HAL_TIM_MspPostInit+0x6c>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	68bb      	ldr	r3, [r7, #8]
    /**TIM11 GPIO Configuration
    PB9     ------> TIM11_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800144a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800144e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001450:	2302      	movs	r3, #2
 8001452:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001458:	2300      	movs	r3, #0
 800145a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800145c:	2303      	movs	r3, #3
 800145e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001460:	f107 030c 	add.w	r3, r7, #12
 8001464:	4619      	mov	r1, r3
 8001466:	4805      	ldr	r0, [pc, #20]	; (800147c <HAL_TIM_MspPostInit+0x70>)
 8001468:	f000 f9fe 	bl	8001868 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 800146c:	bf00      	nop
 800146e:	3720      	adds	r7, #32
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40014800 	.word	0x40014800
 8001478:	40023800 	.word	0x40023800
 800147c:	40020400 	.word	0x40020400

08001480 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001484:	4b11      	ldr	r3, [pc, #68]	; (80014cc <MX_USART2_UART_Init+0x4c>)
 8001486:	4a12      	ldr	r2, [pc, #72]	; (80014d0 <MX_USART2_UART_Init+0x50>)
 8001488:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800148a:	4b10      	ldr	r3, [pc, #64]	; (80014cc <MX_USART2_UART_Init+0x4c>)
 800148c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001490:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <MX_USART2_UART_Init+0x4c>)
 8001494:	2200      	movs	r2, #0
 8001496:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001498:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <MX_USART2_UART_Init+0x4c>)
 800149a:	2200      	movs	r2, #0
 800149c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800149e:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <MX_USART2_UART_Init+0x4c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014a4:	4b09      	ldr	r3, [pc, #36]	; (80014cc <MX_USART2_UART_Init+0x4c>)
 80014a6:	220c      	movs	r2, #12
 80014a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014aa:	4b08      	ldr	r3, [pc, #32]	; (80014cc <MX_USART2_UART_Init+0x4c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <MX_USART2_UART_Init+0x4c>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014b6:	4805      	ldr	r0, [pc, #20]	; (80014cc <MX_USART2_UART_Init+0x4c>)
 80014b8:	f002 fa2a 	bl	8003910 <HAL_UART_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014c2:	f7ff fd65 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000124 	.word	0x20000124
 80014d0:	40004400 	.word	0x40004400

080014d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08a      	sub	sp, #40	; 0x28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a19      	ldr	r2, [pc, #100]	; (8001558 <HAL_UART_MspInit+0x84>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d12b      	bne.n	800154e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
 80014fa:	4b18      	ldr	r3, [pc, #96]	; (800155c <HAL_UART_MspInit+0x88>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	4a17      	ldr	r2, [pc, #92]	; (800155c <HAL_UART_MspInit+0x88>)
 8001500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001504:	6413      	str	r3, [r2, #64]	; 0x40
 8001506:	4b15      	ldr	r3, [pc, #84]	; (800155c <HAL_UART_MspInit+0x88>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b11      	ldr	r3, [pc, #68]	; (800155c <HAL_UART_MspInit+0x88>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a10      	ldr	r2, [pc, #64]	; (800155c <HAL_UART_MspInit+0x88>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <HAL_UART_MspInit+0x88>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800152e:	230c      	movs	r3, #12
 8001530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001532:	2302      	movs	r3, #2
 8001534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153a:	2303      	movs	r3, #3
 800153c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800153e:	2307      	movs	r3, #7
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001542:	f107 0314 	add.w	r3, r7, #20
 8001546:	4619      	mov	r1, r3
 8001548:	4805      	ldr	r0, [pc, #20]	; (8001560 <HAL_UART_MspInit+0x8c>)
 800154a:	f000 f98d 	bl	8001868 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800154e:	bf00      	nop
 8001550:	3728      	adds	r7, #40	; 0x28
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40004400 	.word	0x40004400
 800155c:	40023800 	.word	0x40023800
 8001560:	40020000 	.word	0x40020000

08001564 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001564:	f8df d034 	ldr.w	sp, [pc, #52]	; 800159c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001568:	480d      	ldr	r0, [pc, #52]	; (80015a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800156a:	490e      	ldr	r1, [pc, #56]	; (80015a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800156c:	4a0e      	ldr	r2, [pc, #56]	; (80015a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800156e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001570:	e002      	b.n	8001578 <LoopCopyDataInit>

08001572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001576:	3304      	adds	r3, #4

08001578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800157a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800157c:	d3f9      	bcc.n	8001572 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800157e:	4a0b      	ldr	r2, [pc, #44]	; (80015ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001580:	4c0b      	ldr	r4, [pc, #44]	; (80015b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001584:	e001      	b.n	800158a <LoopFillZerobss>

08001586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001588:	3204      	adds	r2, #4

0800158a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800158a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800158c:	d3fb      	bcc.n	8001586 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800158e:	f7ff fdfb 	bl	8001188 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001592:	f002 feeb 	bl	800436c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001596:	f7ff fc1f 	bl	8000dd8 <main>
  bx  lr    
 800159a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800159c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80015a8:	08004f94 	.word	0x08004f94
  ldr r2, =_sbss
 80015ac:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80015b0:	200002b8 	.word	0x200002b8

080015b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015b4:	e7fe      	b.n	80015b4 <ADC_IRQHandler>
	...

080015b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015bc:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <HAL_Init+0x40>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a0d      	ldr	r2, [pc, #52]	; (80015f8 <HAL_Init+0x40>)
 80015c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015c8:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <HAL_Init+0x40>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <HAL_Init+0x40>)
 80015ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015d4:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <HAL_Init+0x40>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a07      	ldr	r2, [pc, #28]	; (80015f8 <HAL_Init+0x40>)
 80015da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e0:	2003      	movs	r0, #3
 80015e2:	f000 f90d 	bl	8001800 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015e6:	2000      	movs	r0, #0
 80015e8:	f000 f808 	bl	80015fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015ec:	f7ff fcd6 	bl	8000f9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40023c00 	.word	0x40023c00

080015fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <HAL_InitTick+0x54>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <HAL_InitTick+0x58>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	4619      	mov	r1, r3
 800160e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001612:	fbb3 f3f1 	udiv	r3, r3, r1
 8001616:	fbb2 f3f3 	udiv	r3, r2, r3
 800161a:	4618      	mov	r0, r3
 800161c:	f000 f917 	bl	800184e <HAL_SYSTICK_Config>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e00e      	b.n	8001648 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b0f      	cmp	r3, #15
 800162e:	d80a      	bhi.n	8001646 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001630:	2200      	movs	r2, #0
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001638:	f000 f8ed 	bl	8001816 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800163c:	4a06      	ldr	r2, [pc, #24]	; (8001658 <HAL_InitTick+0x5c>)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001642:	2300      	movs	r3, #0
 8001644:	e000      	b.n	8001648 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
}
 8001648:	4618      	mov	r0, r3
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000000 	.word	0x20000000
 8001654:	20000008 	.word	0x20000008
 8001658:	20000004 	.word	0x20000004

0800165c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <HAL_IncTick+0x20>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	461a      	mov	r2, r3
 8001666:	4b06      	ldr	r3, [pc, #24]	; (8001680 <HAL_IncTick+0x24>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4413      	add	r3, r2
 800166c:	4a04      	ldr	r2, [pc, #16]	; (8001680 <HAL_IncTick+0x24>)
 800166e:	6013      	str	r3, [r2, #0]
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	20000008 	.word	0x20000008
 8001680:	20000168 	.word	0x20000168

08001684 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return uwTick;
 8001688:	4b03      	ldr	r3, [pc, #12]	; (8001698 <HAL_GetTick+0x14>)
 800168a:	681b      	ldr	r3, [r3, #0]
}
 800168c:	4618      	mov	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	20000168 	.word	0x20000168

0800169c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016ac:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <__NVIC_SetPriorityGrouping+0x44>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016b8:	4013      	ands	r3, r2
 80016ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ce:	4a04      	ldr	r2, [pc, #16]	; (80016e0 <__NVIC_SetPriorityGrouping+0x44>)
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	60d3      	str	r3, [r2, #12]
}
 80016d4:	bf00      	nop
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016e8:	4b04      	ldr	r3, [pc, #16]	; (80016fc <__NVIC_GetPriorityGrouping+0x18>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	0a1b      	lsrs	r3, r3, #8
 80016ee:	f003 0307 	and.w	r3, r3, #7
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	6039      	str	r1, [r7, #0]
 800170a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800170c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001710:	2b00      	cmp	r3, #0
 8001712:	db0a      	blt.n	800172a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	b2da      	uxtb	r2, r3
 8001718:	490c      	ldr	r1, [pc, #48]	; (800174c <__NVIC_SetPriority+0x4c>)
 800171a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171e:	0112      	lsls	r2, r2, #4
 8001720:	b2d2      	uxtb	r2, r2
 8001722:	440b      	add	r3, r1
 8001724:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001728:	e00a      	b.n	8001740 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	b2da      	uxtb	r2, r3
 800172e:	4908      	ldr	r1, [pc, #32]	; (8001750 <__NVIC_SetPriority+0x50>)
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	f003 030f 	and.w	r3, r3, #15
 8001736:	3b04      	subs	r3, #4
 8001738:	0112      	lsls	r2, r2, #4
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	440b      	add	r3, r1
 800173e:	761a      	strb	r2, [r3, #24]
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	e000e100 	.word	0xe000e100
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001754:	b480      	push	{r7}
 8001756:	b089      	sub	sp, #36	; 0x24
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	f1c3 0307 	rsb	r3, r3, #7
 800176e:	2b04      	cmp	r3, #4
 8001770:	bf28      	it	cs
 8001772:	2304      	movcs	r3, #4
 8001774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	3304      	adds	r3, #4
 800177a:	2b06      	cmp	r3, #6
 800177c:	d902      	bls.n	8001784 <NVIC_EncodePriority+0x30>
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	3b03      	subs	r3, #3
 8001782:	e000      	b.n	8001786 <NVIC_EncodePriority+0x32>
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001788:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43da      	mvns	r2, r3
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	401a      	ands	r2, r3
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800179c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	fa01 f303 	lsl.w	r3, r1, r3
 80017a6:	43d9      	mvns	r1, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ac:	4313      	orrs	r3, r2
         );
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3724      	adds	r7, #36	; 0x24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
	...

080017bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017cc:	d301      	bcc.n	80017d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ce:	2301      	movs	r3, #1
 80017d0:	e00f      	b.n	80017f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017d2:	4a0a      	ldr	r2, [pc, #40]	; (80017fc <SysTick_Config+0x40>)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017da:	210f      	movs	r1, #15
 80017dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017e0:	f7ff ff8e 	bl	8001700 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017e4:	4b05      	ldr	r3, [pc, #20]	; (80017fc <SysTick_Config+0x40>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ea:	4b04      	ldr	r3, [pc, #16]	; (80017fc <SysTick_Config+0x40>)
 80017ec:	2207      	movs	r2, #7
 80017ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	e000e010 	.word	0xe000e010

08001800 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f7ff ff47 	bl	800169c <__NVIC_SetPriorityGrouping>
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001816:	b580      	push	{r7, lr}
 8001818:	b086      	sub	sp, #24
 800181a:	af00      	add	r7, sp, #0
 800181c:	4603      	mov	r3, r0
 800181e:	60b9      	str	r1, [r7, #8]
 8001820:	607a      	str	r2, [r7, #4]
 8001822:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001828:	f7ff ff5c 	bl	80016e4 <__NVIC_GetPriorityGrouping>
 800182c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	68b9      	ldr	r1, [r7, #8]
 8001832:	6978      	ldr	r0, [r7, #20]
 8001834:	f7ff ff8e 	bl	8001754 <NVIC_EncodePriority>
 8001838:	4602      	mov	r2, r0
 800183a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800183e:	4611      	mov	r1, r2
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff ff5d 	bl	8001700 <__NVIC_SetPriority>
}
 8001846:	bf00      	nop
 8001848:	3718      	adds	r7, #24
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b082      	sub	sp, #8
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f7ff ffb0 	bl	80017bc <SysTick_Config>
 800185c:	4603      	mov	r3, r0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001868:	b480      	push	{r7}
 800186a:	b089      	sub	sp, #36	; 0x24
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001872:	2300      	movs	r3, #0
 8001874:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001876:	2300      	movs	r3, #0
 8001878:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800187a:	2300      	movs	r3, #0
 800187c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800187e:	2300      	movs	r3, #0
 8001880:	61fb      	str	r3, [r7, #28]
 8001882:	e16b      	b.n	8001b5c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001884:	2201      	movs	r2, #1
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	697a      	ldr	r2, [r7, #20]
 8001894:	4013      	ands	r3, r2
 8001896:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	429a      	cmp	r2, r3
 800189e:	f040 815a 	bne.w	8001b56 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f003 0303 	and.w	r3, r3, #3
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d005      	beq.n	80018ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d130      	bne.n	800191c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	2203      	movs	r2, #3
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4013      	ands	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	68da      	ldr	r2, [r3, #12]
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018f0:	2201      	movs	r2, #1
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4013      	ands	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	091b      	lsrs	r3, r3, #4
 8001906:	f003 0201 	and.w	r2, r3, #1
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4313      	orrs	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 0303 	and.w	r3, r3, #3
 8001924:	2b03      	cmp	r3, #3
 8001926:	d017      	beq.n	8001958 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	2203      	movs	r2, #3
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	43db      	mvns	r3, r3
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4013      	ands	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	689a      	ldr	r2, [r3, #8]
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	4313      	orrs	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 0303 	and.w	r3, r3, #3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d123      	bne.n	80019ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	08da      	lsrs	r2, r3, #3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	3208      	adds	r2, #8
 800196c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001970:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	f003 0307 	and.w	r3, r3, #7
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	220f      	movs	r2, #15
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4013      	ands	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	691a      	ldr	r2, [r3, #16]
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4313      	orrs	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	08da      	lsrs	r2, r3, #3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3208      	adds	r2, #8
 80019a6:	69b9      	ldr	r1, [r7, #24]
 80019a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	2203      	movs	r2, #3
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4013      	ands	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f003 0203 	and.w	r2, r3, #3
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f000 80b4 	beq.w	8001b56 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	4b60      	ldr	r3, [pc, #384]	; (8001b74 <HAL_GPIO_Init+0x30c>)
 80019f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f6:	4a5f      	ldr	r2, [pc, #380]	; (8001b74 <HAL_GPIO_Init+0x30c>)
 80019f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019fc:	6453      	str	r3, [r2, #68]	; 0x44
 80019fe:	4b5d      	ldr	r3, [pc, #372]	; (8001b74 <HAL_GPIO_Init+0x30c>)
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a0a:	4a5b      	ldr	r2, [pc, #364]	; (8001b78 <HAL_GPIO_Init+0x310>)
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	089b      	lsrs	r3, r3, #2
 8001a10:	3302      	adds	r3, #2
 8001a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f003 0303 	and.w	r3, r3, #3
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	220f      	movs	r2, #15
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43db      	mvns	r3, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a52      	ldr	r2, [pc, #328]	; (8001b7c <HAL_GPIO_Init+0x314>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d02b      	beq.n	8001a8e <HAL_GPIO_Init+0x226>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a51      	ldr	r2, [pc, #324]	; (8001b80 <HAL_GPIO_Init+0x318>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d025      	beq.n	8001a8a <HAL_GPIO_Init+0x222>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a50      	ldr	r2, [pc, #320]	; (8001b84 <HAL_GPIO_Init+0x31c>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d01f      	beq.n	8001a86 <HAL_GPIO_Init+0x21e>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a4f      	ldr	r2, [pc, #316]	; (8001b88 <HAL_GPIO_Init+0x320>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d019      	beq.n	8001a82 <HAL_GPIO_Init+0x21a>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a4e      	ldr	r2, [pc, #312]	; (8001b8c <HAL_GPIO_Init+0x324>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d013      	beq.n	8001a7e <HAL_GPIO_Init+0x216>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a4d      	ldr	r2, [pc, #308]	; (8001b90 <HAL_GPIO_Init+0x328>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d00d      	beq.n	8001a7a <HAL_GPIO_Init+0x212>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a4c      	ldr	r2, [pc, #304]	; (8001b94 <HAL_GPIO_Init+0x32c>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d007      	beq.n	8001a76 <HAL_GPIO_Init+0x20e>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a4b      	ldr	r2, [pc, #300]	; (8001b98 <HAL_GPIO_Init+0x330>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d101      	bne.n	8001a72 <HAL_GPIO_Init+0x20a>
 8001a6e:	2307      	movs	r3, #7
 8001a70:	e00e      	b.n	8001a90 <HAL_GPIO_Init+0x228>
 8001a72:	2308      	movs	r3, #8
 8001a74:	e00c      	b.n	8001a90 <HAL_GPIO_Init+0x228>
 8001a76:	2306      	movs	r3, #6
 8001a78:	e00a      	b.n	8001a90 <HAL_GPIO_Init+0x228>
 8001a7a:	2305      	movs	r3, #5
 8001a7c:	e008      	b.n	8001a90 <HAL_GPIO_Init+0x228>
 8001a7e:	2304      	movs	r3, #4
 8001a80:	e006      	b.n	8001a90 <HAL_GPIO_Init+0x228>
 8001a82:	2303      	movs	r3, #3
 8001a84:	e004      	b.n	8001a90 <HAL_GPIO_Init+0x228>
 8001a86:	2302      	movs	r3, #2
 8001a88:	e002      	b.n	8001a90 <HAL_GPIO_Init+0x228>
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e000      	b.n	8001a90 <HAL_GPIO_Init+0x228>
 8001a8e:	2300      	movs	r3, #0
 8001a90:	69fa      	ldr	r2, [r7, #28]
 8001a92:	f002 0203 	and.w	r2, r2, #3
 8001a96:	0092      	lsls	r2, r2, #2
 8001a98:	4093      	lsls	r3, r2
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001aa0:	4935      	ldr	r1, [pc, #212]	; (8001b78 <HAL_GPIO_Init+0x310>)
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	089b      	lsrs	r3, r3, #2
 8001aa6:	3302      	adds	r3, #2
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aae:	4b3b      	ldr	r3, [pc, #236]	; (8001b9c <HAL_GPIO_Init+0x334>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4013      	ands	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ad2:	4a32      	ldr	r2, [pc, #200]	; (8001b9c <HAL_GPIO_Init+0x334>)
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ad8:	4b30      	ldr	r3, [pc, #192]	; (8001b9c <HAL_GPIO_Init+0x334>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d003      	beq.n	8001afc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001afc:	4a27      	ldr	r2, [pc, #156]	; (8001b9c <HAL_GPIO_Init+0x334>)
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b02:	4b26      	ldr	r3, [pc, #152]	; (8001b9c <HAL_GPIO_Init+0x334>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b26:	4a1d      	ldr	r2, [pc, #116]	; (8001b9c <HAL_GPIO_Init+0x334>)
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b2c:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <HAL_GPIO_Init+0x334>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d003      	beq.n	8001b50 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b50:	4a12      	ldr	r2, [pc, #72]	; (8001b9c <HAL_GPIO_Init+0x334>)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	61fb      	str	r3, [r7, #28]
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	2b0f      	cmp	r3, #15
 8001b60:	f67f ae90 	bls.w	8001884 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b64:	bf00      	nop
 8001b66:	bf00      	nop
 8001b68:	3724      	adds	r7, #36	; 0x24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40013800 	.word	0x40013800
 8001b7c:	40020000 	.word	0x40020000
 8001b80:	40020400 	.word	0x40020400
 8001b84:	40020800 	.word	0x40020800
 8001b88:	40020c00 	.word	0x40020c00
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	40021400 	.word	0x40021400
 8001b94:	40021800 	.word	0x40021800
 8001b98:	40021c00 	.word	0x40021c00
 8001b9c:	40013c00 	.word	0x40013c00

08001ba0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e267      	b.n	8002082 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d075      	beq.n	8001caa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bbe:	4b88      	ldr	r3, [pc, #544]	; (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f003 030c 	and.w	r3, r3, #12
 8001bc6:	2b04      	cmp	r3, #4
 8001bc8:	d00c      	beq.n	8001be4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bca:	4b85      	ldr	r3, [pc, #532]	; (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bd2:	2b08      	cmp	r3, #8
 8001bd4:	d112      	bne.n	8001bfc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bd6:	4b82      	ldr	r3, [pc, #520]	; (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001be2:	d10b      	bne.n	8001bfc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be4:	4b7e      	ldr	r3, [pc, #504]	; (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d05b      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x108>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d157      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e242      	b.n	8002082 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c04:	d106      	bne.n	8001c14 <HAL_RCC_OscConfig+0x74>
 8001c06:	4b76      	ldr	r3, [pc, #472]	; (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a75      	ldr	r2, [pc, #468]	; (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	e01d      	b.n	8001c50 <HAL_RCC_OscConfig+0xb0>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c1c:	d10c      	bne.n	8001c38 <HAL_RCC_OscConfig+0x98>
 8001c1e:	4b70      	ldr	r3, [pc, #448]	; (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a6f      	ldr	r2, [pc, #444]	; (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c28:	6013      	str	r3, [r2, #0]
 8001c2a:	4b6d      	ldr	r3, [pc, #436]	; (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a6c      	ldr	r2, [pc, #432]	; (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c34:	6013      	str	r3, [r2, #0]
 8001c36:	e00b      	b.n	8001c50 <HAL_RCC_OscConfig+0xb0>
 8001c38:	4b69      	ldr	r3, [pc, #420]	; (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a68      	ldr	r2, [pc, #416]	; (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c42:	6013      	str	r3, [r2, #0]
 8001c44:	4b66      	ldr	r3, [pc, #408]	; (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a65      	ldr	r2, [pc, #404]	; (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001c4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d013      	beq.n	8001c80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c58:	f7ff fd14 	bl	8001684 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c60:	f7ff fd10 	bl	8001684 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b64      	cmp	r3, #100	; 0x64
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e207      	b.n	8002082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c72:	4b5b      	ldr	r3, [pc, #364]	; (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d0f0      	beq.n	8001c60 <HAL_RCC_OscConfig+0xc0>
 8001c7e:	e014      	b.n	8001caa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c80:	f7ff fd00 	bl	8001684 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c88:	f7ff fcfc 	bl	8001684 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b64      	cmp	r3, #100	; 0x64
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e1f3      	b.n	8002082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c9a:	4b51      	ldr	r3, [pc, #324]	; (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f0      	bne.n	8001c88 <HAL_RCC_OscConfig+0xe8>
 8001ca6:	e000      	b.n	8001caa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d063      	beq.n	8001d7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cb6:	4b4a      	ldr	r3, [pc, #296]	; (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f003 030c 	and.w	r3, r3, #12
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d00b      	beq.n	8001cda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cc2:	4b47      	ldr	r3, [pc, #284]	; (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cca:	2b08      	cmp	r3, #8
 8001ccc:	d11c      	bne.n	8001d08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cce:	4b44      	ldr	r3, [pc, #272]	; (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d116      	bne.n	8001d08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cda:	4b41      	ldr	r3, [pc, #260]	; (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d005      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x152>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d001      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e1c7      	b.n	8002082 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf2:	4b3b      	ldr	r3, [pc, #236]	; (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	4937      	ldr	r1, [pc, #220]	; (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d06:	e03a      	b.n	8001d7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d020      	beq.n	8001d52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d10:	4b34      	ldr	r3, [pc, #208]	; (8001de4 <HAL_RCC_OscConfig+0x244>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d16:	f7ff fcb5 	bl	8001684 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d1e:	f7ff fcb1 	bl	8001684 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e1a8      	b.n	8002082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d30:	4b2b      	ldr	r3, [pc, #172]	; (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0f0      	beq.n	8001d1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d3c:	4b28      	ldr	r3, [pc, #160]	; (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	4925      	ldr	r1, [pc, #148]	; (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	600b      	str	r3, [r1, #0]
 8001d50:	e015      	b.n	8001d7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d52:	4b24      	ldr	r3, [pc, #144]	; (8001de4 <HAL_RCC_OscConfig+0x244>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d58:	f7ff fc94 	bl	8001684 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d60:	f7ff fc90 	bl	8001684 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e187      	b.n	8002082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d72:	4b1b      	ldr	r3, [pc, #108]	; (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1f0      	bne.n	8001d60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0308 	and.w	r3, r3, #8
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d036      	beq.n	8001df8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d016      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d92:	4b15      	ldr	r3, [pc, #84]	; (8001de8 <HAL_RCC_OscConfig+0x248>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d98:	f7ff fc74 	bl	8001684 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001da0:	f7ff fc70 	bl	8001684 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e167      	b.n	8002082 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001db2:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0f0      	beq.n	8001da0 <HAL_RCC_OscConfig+0x200>
 8001dbe:	e01b      	b.n	8001df8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dc0:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <HAL_RCC_OscConfig+0x248>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc6:	f7ff fc5d 	bl	8001684 <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dcc:	e00e      	b.n	8001dec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dce:	f7ff fc59 	bl	8001684 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d907      	bls.n	8001dec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e150      	b.n	8002082 <HAL_RCC_OscConfig+0x4e2>
 8001de0:	40023800 	.word	0x40023800
 8001de4:	42470000 	.word	0x42470000
 8001de8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dec:	4b88      	ldr	r3, [pc, #544]	; (8002010 <HAL_RCC_OscConfig+0x470>)
 8001dee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1ea      	bne.n	8001dce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f000 8097 	beq.w	8001f34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e06:	2300      	movs	r3, #0
 8001e08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e0a:	4b81      	ldr	r3, [pc, #516]	; (8002010 <HAL_RCC_OscConfig+0x470>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d10f      	bne.n	8001e36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	4b7d      	ldr	r3, [pc, #500]	; (8002010 <HAL_RCC_OscConfig+0x470>)
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1e:	4a7c      	ldr	r2, [pc, #496]	; (8002010 <HAL_RCC_OscConfig+0x470>)
 8001e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e24:	6413      	str	r3, [r2, #64]	; 0x40
 8001e26:	4b7a      	ldr	r3, [pc, #488]	; (8002010 <HAL_RCC_OscConfig+0x470>)
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2e:	60bb      	str	r3, [r7, #8]
 8001e30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e32:	2301      	movs	r3, #1
 8001e34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e36:	4b77      	ldr	r3, [pc, #476]	; (8002014 <HAL_RCC_OscConfig+0x474>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d118      	bne.n	8001e74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e42:	4b74      	ldr	r3, [pc, #464]	; (8002014 <HAL_RCC_OscConfig+0x474>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a73      	ldr	r2, [pc, #460]	; (8002014 <HAL_RCC_OscConfig+0x474>)
 8001e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e4e:	f7ff fc19 	bl	8001684 <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e56:	f7ff fc15 	bl	8001684 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e10c      	b.n	8002082 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e68:	4b6a      	ldr	r3, [pc, #424]	; (8002014 <HAL_RCC_OscConfig+0x474>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0f0      	beq.n	8001e56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d106      	bne.n	8001e8a <HAL_RCC_OscConfig+0x2ea>
 8001e7c:	4b64      	ldr	r3, [pc, #400]	; (8002010 <HAL_RCC_OscConfig+0x470>)
 8001e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e80:	4a63      	ldr	r2, [pc, #396]	; (8002010 <HAL_RCC_OscConfig+0x470>)
 8001e82:	f043 0301 	orr.w	r3, r3, #1
 8001e86:	6713      	str	r3, [r2, #112]	; 0x70
 8001e88:	e01c      	b.n	8001ec4 <HAL_RCC_OscConfig+0x324>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	2b05      	cmp	r3, #5
 8001e90:	d10c      	bne.n	8001eac <HAL_RCC_OscConfig+0x30c>
 8001e92:	4b5f      	ldr	r3, [pc, #380]	; (8002010 <HAL_RCC_OscConfig+0x470>)
 8001e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e96:	4a5e      	ldr	r2, [pc, #376]	; (8002010 <HAL_RCC_OscConfig+0x470>)
 8001e98:	f043 0304 	orr.w	r3, r3, #4
 8001e9c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e9e:	4b5c      	ldr	r3, [pc, #368]	; (8002010 <HAL_RCC_OscConfig+0x470>)
 8001ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea2:	4a5b      	ldr	r2, [pc, #364]	; (8002010 <HAL_RCC_OscConfig+0x470>)
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	6713      	str	r3, [r2, #112]	; 0x70
 8001eaa:	e00b      	b.n	8001ec4 <HAL_RCC_OscConfig+0x324>
 8001eac:	4b58      	ldr	r3, [pc, #352]	; (8002010 <HAL_RCC_OscConfig+0x470>)
 8001eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb0:	4a57      	ldr	r2, [pc, #348]	; (8002010 <HAL_RCC_OscConfig+0x470>)
 8001eb2:	f023 0301 	bic.w	r3, r3, #1
 8001eb6:	6713      	str	r3, [r2, #112]	; 0x70
 8001eb8:	4b55      	ldr	r3, [pc, #340]	; (8002010 <HAL_RCC_OscConfig+0x470>)
 8001eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ebc:	4a54      	ldr	r2, [pc, #336]	; (8002010 <HAL_RCC_OscConfig+0x470>)
 8001ebe:	f023 0304 	bic.w	r3, r3, #4
 8001ec2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d015      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ecc:	f7ff fbda 	bl	8001684 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed2:	e00a      	b.n	8001eea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ed4:	f7ff fbd6 	bl	8001684 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e0cb      	b.n	8002082 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eea:	4b49      	ldr	r3, [pc, #292]	; (8002010 <HAL_RCC_OscConfig+0x470>)
 8001eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d0ee      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x334>
 8001ef6:	e014      	b.n	8001f22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef8:	f7ff fbc4 	bl	8001684 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001efe:	e00a      	b.n	8001f16 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f00:	f7ff fbc0 	bl	8001684 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e0b5      	b.n	8002082 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f16:	4b3e      	ldr	r3, [pc, #248]	; (8002010 <HAL_RCC_OscConfig+0x470>)
 8001f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1ee      	bne.n	8001f00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f22:	7dfb      	ldrb	r3, [r7, #23]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d105      	bne.n	8001f34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f28:	4b39      	ldr	r3, [pc, #228]	; (8002010 <HAL_RCC_OscConfig+0x470>)
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2c:	4a38      	ldr	r2, [pc, #224]	; (8002010 <HAL_RCC_OscConfig+0x470>)
 8001f2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f32:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 80a1 	beq.w	8002080 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f3e:	4b34      	ldr	r3, [pc, #208]	; (8002010 <HAL_RCC_OscConfig+0x470>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 030c 	and.w	r3, r3, #12
 8001f46:	2b08      	cmp	r3, #8
 8001f48:	d05c      	beq.n	8002004 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d141      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f52:	4b31      	ldr	r3, [pc, #196]	; (8002018 <HAL_RCC_OscConfig+0x478>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f58:	f7ff fb94 	bl	8001684 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f60:	f7ff fb90 	bl	8001684 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e087      	b.n	8002082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f72:	4b27      	ldr	r3, [pc, #156]	; (8002010 <HAL_RCC_OscConfig+0x470>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f0      	bne.n	8001f60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	69da      	ldr	r2, [r3, #28]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	431a      	orrs	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8c:	019b      	lsls	r3, r3, #6
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f94:	085b      	lsrs	r3, r3, #1
 8001f96:	3b01      	subs	r3, #1
 8001f98:	041b      	lsls	r3, r3, #16
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa0:	061b      	lsls	r3, r3, #24
 8001fa2:	491b      	ldr	r1, [pc, #108]	; (8002010 <HAL_RCC_OscConfig+0x470>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fa8:	4b1b      	ldr	r3, [pc, #108]	; (8002018 <HAL_RCC_OscConfig+0x478>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fae:	f7ff fb69 	bl	8001684 <HAL_GetTick>
 8001fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fb4:	e008      	b.n	8001fc8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fb6:	f7ff fb65 	bl	8001684 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e05c      	b.n	8002082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fc8:	4b11      	ldr	r3, [pc, #68]	; (8002010 <HAL_RCC_OscConfig+0x470>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d0f0      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x416>
 8001fd4:	e054      	b.n	8002080 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fd6:	4b10      	ldr	r3, [pc, #64]	; (8002018 <HAL_RCC_OscConfig+0x478>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fdc:	f7ff fb52 	bl	8001684 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fe4:	f7ff fb4e 	bl	8001684 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e045      	b.n	8002082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ff6:	4b06      	ldr	r3, [pc, #24]	; (8002010 <HAL_RCC_OscConfig+0x470>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f0      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x444>
 8002002:	e03d      	b.n	8002080 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d107      	bne.n	800201c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e038      	b.n	8002082 <HAL_RCC_OscConfig+0x4e2>
 8002010:	40023800 	.word	0x40023800
 8002014:	40007000 	.word	0x40007000
 8002018:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800201c:	4b1b      	ldr	r3, [pc, #108]	; (800208c <HAL_RCC_OscConfig+0x4ec>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d028      	beq.n	800207c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002034:	429a      	cmp	r2, r3
 8002036:	d121      	bne.n	800207c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002042:	429a      	cmp	r2, r3
 8002044:	d11a      	bne.n	800207c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800204c:	4013      	ands	r3, r2
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002052:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002054:	4293      	cmp	r3, r2
 8002056:	d111      	bne.n	800207c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002062:	085b      	lsrs	r3, r3, #1
 8002064:	3b01      	subs	r3, #1
 8002066:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002068:	429a      	cmp	r2, r3
 800206a:	d107      	bne.n	800207c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002076:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002078:	429a      	cmp	r2, r3
 800207a:	d001      	beq.n	8002080 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e000      	b.n	8002082 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40023800 	.word	0x40023800

08002090 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d101      	bne.n	80020a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e0cc      	b.n	800223e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020a4:	4b68      	ldr	r3, [pc, #416]	; (8002248 <HAL_RCC_ClockConfig+0x1b8>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0307 	and.w	r3, r3, #7
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d90c      	bls.n	80020cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020b2:	4b65      	ldr	r3, [pc, #404]	; (8002248 <HAL_RCC_ClockConfig+0x1b8>)
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ba:	4b63      	ldr	r3, [pc, #396]	; (8002248 <HAL_RCC_ClockConfig+0x1b8>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d001      	beq.n	80020cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e0b8      	b.n	800223e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d020      	beq.n	800211a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d005      	beq.n	80020f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020e4:	4b59      	ldr	r3, [pc, #356]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	4a58      	ldr	r2, [pc, #352]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 80020ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0308 	and.w	r3, r3, #8
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d005      	beq.n	8002108 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020fc:	4b53      	ldr	r3, [pc, #332]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	4a52      	ldr	r2, [pc, #328]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 8002102:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002106:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002108:	4b50      	ldr	r3, [pc, #320]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	494d      	ldr	r1, [pc, #308]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 8002116:	4313      	orrs	r3, r2
 8002118:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d044      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d107      	bne.n	800213e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800212e:	4b47      	ldr	r3, [pc, #284]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d119      	bne.n	800216e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e07f      	b.n	800223e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b02      	cmp	r3, #2
 8002144:	d003      	beq.n	800214e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800214a:	2b03      	cmp	r3, #3
 800214c:	d107      	bne.n	800215e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800214e:	4b3f      	ldr	r3, [pc, #252]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d109      	bne.n	800216e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e06f      	b.n	800223e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800215e:	4b3b      	ldr	r3, [pc, #236]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e067      	b.n	800223e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800216e:	4b37      	ldr	r3, [pc, #220]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f023 0203 	bic.w	r2, r3, #3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	4934      	ldr	r1, [pc, #208]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 800217c:	4313      	orrs	r3, r2
 800217e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002180:	f7ff fa80 	bl	8001684 <HAL_GetTick>
 8002184:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002186:	e00a      	b.n	800219e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002188:	f7ff fa7c 	bl	8001684 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	f241 3288 	movw	r2, #5000	; 0x1388
 8002196:	4293      	cmp	r3, r2
 8002198:	d901      	bls.n	800219e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e04f      	b.n	800223e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800219e:	4b2b      	ldr	r3, [pc, #172]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 020c 	and.w	r2, r3, #12
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d1eb      	bne.n	8002188 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021b0:	4b25      	ldr	r3, [pc, #148]	; (8002248 <HAL_RCC_ClockConfig+0x1b8>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0307 	and.w	r3, r3, #7
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d20c      	bcs.n	80021d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021be:	4b22      	ldr	r3, [pc, #136]	; (8002248 <HAL_RCC_ClockConfig+0x1b8>)
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	b2d2      	uxtb	r2, r2
 80021c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021c6:	4b20      	ldr	r3, [pc, #128]	; (8002248 <HAL_RCC_ClockConfig+0x1b8>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d001      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e032      	b.n	800223e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0304 	and.w	r3, r3, #4
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d008      	beq.n	80021f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021e4:	4b19      	ldr	r3, [pc, #100]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	4916      	ldr	r1, [pc, #88]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0308 	and.w	r3, r3, #8
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d009      	beq.n	8002216 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002202:	4b12      	ldr	r3, [pc, #72]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	490e      	ldr	r1, [pc, #56]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 8002212:	4313      	orrs	r3, r2
 8002214:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002216:	f000 f821 	bl	800225c <HAL_RCC_GetSysClockFreq>
 800221a:	4602      	mov	r2, r0
 800221c:	4b0b      	ldr	r3, [pc, #44]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	091b      	lsrs	r3, r3, #4
 8002222:	f003 030f 	and.w	r3, r3, #15
 8002226:	490a      	ldr	r1, [pc, #40]	; (8002250 <HAL_RCC_ClockConfig+0x1c0>)
 8002228:	5ccb      	ldrb	r3, [r1, r3]
 800222a:	fa22 f303 	lsr.w	r3, r2, r3
 800222e:	4a09      	ldr	r2, [pc, #36]	; (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 8002230:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002232:	4b09      	ldr	r3, [pc, #36]	; (8002258 <HAL_RCC_ClockConfig+0x1c8>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff f9e0 	bl	80015fc <HAL_InitTick>

  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40023c00 	.word	0x40023c00
 800224c:	40023800 	.word	0x40023800
 8002250:	08004f38 	.word	0x08004f38
 8002254:	20000000 	.word	0x20000000
 8002258:	20000004 	.word	0x20000004

0800225c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800225c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002260:	b094      	sub	sp, #80	; 0x50
 8002262:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002264:	2300      	movs	r3, #0
 8002266:	647b      	str	r3, [r7, #68]	; 0x44
 8002268:	2300      	movs	r3, #0
 800226a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800226c:	2300      	movs	r3, #0
 800226e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002270:	2300      	movs	r3, #0
 8002272:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002274:	4b79      	ldr	r3, [pc, #484]	; (800245c <HAL_RCC_GetSysClockFreq+0x200>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 030c 	and.w	r3, r3, #12
 800227c:	2b08      	cmp	r3, #8
 800227e:	d00d      	beq.n	800229c <HAL_RCC_GetSysClockFreq+0x40>
 8002280:	2b08      	cmp	r3, #8
 8002282:	f200 80e1 	bhi.w	8002448 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002286:	2b00      	cmp	r3, #0
 8002288:	d002      	beq.n	8002290 <HAL_RCC_GetSysClockFreq+0x34>
 800228a:	2b04      	cmp	r3, #4
 800228c:	d003      	beq.n	8002296 <HAL_RCC_GetSysClockFreq+0x3a>
 800228e:	e0db      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002290:	4b73      	ldr	r3, [pc, #460]	; (8002460 <HAL_RCC_GetSysClockFreq+0x204>)
 8002292:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002294:	e0db      	b.n	800244e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002296:	4b73      	ldr	r3, [pc, #460]	; (8002464 <HAL_RCC_GetSysClockFreq+0x208>)
 8002298:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800229a:	e0d8      	b.n	800244e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800229c:	4b6f      	ldr	r3, [pc, #444]	; (800245c <HAL_RCC_GetSysClockFreq+0x200>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022a4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022a6:	4b6d      	ldr	r3, [pc, #436]	; (800245c <HAL_RCC_GetSysClockFreq+0x200>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d063      	beq.n	800237a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022b2:	4b6a      	ldr	r3, [pc, #424]	; (800245c <HAL_RCC_GetSysClockFreq+0x200>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	099b      	lsrs	r3, r3, #6
 80022b8:	2200      	movs	r2, #0
 80022ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80022bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80022be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022c4:	633b      	str	r3, [r7, #48]	; 0x30
 80022c6:	2300      	movs	r3, #0
 80022c8:	637b      	str	r3, [r7, #52]	; 0x34
 80022ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80022ce:	4622      	mov	r2, r4
 80022d0:	462b      	mov	r3, r5
 80022d2:	f04f 0000 	mov.w	r0, #0
 80022d6:	f04f 0100 	mov.w	r1, #0
 80022da:	0159      	lsls	r1, r3, #5
 80022dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022e0:	0150      	lsls	r0, r2, #5
 80022e2:	4602      	mov	r2, r0
 80022e4:	460b      	mov	r3, r1
 80022e6:	4621      	mov	r1, r4
 80022e8:	1a51      	subs	r1, r2, r1
 80022ea:	6139      	str	r1, [r7, #16]
 80022ec:	4629      	mov	r1, r5
 80022ee:	eb63 0301 	sbc.w	r3, r3, r1
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	f04f 0200 	mov.w	r2, #0
 80022f8:	f04f 0300 	mov.w	r3, #0
 80022fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002300:	4659      	mov	r1, fp
 8002302:	018b      	lsls	r3, r1, #6
 8002304:	4651      	mov	r1, sl
 8002306:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800230a:	4651      	mov	r1, sl
 800230c:	018a      	lsls	r2, r1, #6
 800230e:	4651      	mov	r1, sl
 8002310:	ebb2 0801 	subs.w	r8, r2, r1
 8002314:	4659      	mov	r1, fp
 8002316:	eb63 0901 	sbc.w	r9, r3, r1
 800231a:	f04f 0200 	mov.w	r2, #0
 800231e:	f04f 0300 	mov.w	r3, #0
 8002322:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002326:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800232a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800232e:	4690      	mov	r8, r2
 8002330:	4699      	mov	r9, r3
 8002332:	4623      	mov	r3, r4
 8002334:	eb18 0303 	adds.w	r3, r8, r3
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	462b      	mov	r3, r5
 800233c:	eb49 0303 	adc.w	r3, r9, r3
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	f04f 0200 	mov.w	r2, #0
 8002346:	f04f 0300 	mov.w	r3, #0
 800234a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800234e:	4629      	mov	r1, r5
 8002350:	024b      	lsls	r3, r1, #9
 8002352:	4621      	mov	r1, r4
 8002354:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002358:	4621      	mov	r1, r4
 800235a:	024a      	lsls	r2, r1, #9
 800235c:	4610      	mov	r0, r2
 800235e:	4619      	mov	r1, r3
 8002360:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002362:	2200      	movs	r2, #0
 8002364:	62bb      	str	r3, [r7, #40]	; 0x28
 8002366:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002368:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800236c:	f7fe fb6e 	bl	8000a4c <__aeabi_uldivmod>
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	4613      	mov	r3, r2
 8002376:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002378:	e058      	b.n	800242c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800237a:	4b38      	ldr	r3, [pc, #224]	; (800245c <HAL_RCC_GetSysClockFreq+0x200>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	099b      	lsrs	r3, r3, #6
 8002380:	2200      	movs	r2, #0
 8002382:	4618      	mov	r0, r3
 8002384:	4611      	mov	r1, r2
 8002386:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800238a:	623b      	str	r3, [r7, #32]
 800238c:	2300      	movs	r3, #0
 800238e:	627b      	str	r3, [r7, #36]	; 0x24
 8002390:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002394:	4642      	mov	r2, r8
 8002396:	464b      	mov	r3, r9
 8002398:	f04f 0000 	mov.w	r0, #0
 800239c:	f04f 0100 	mov.w	r1, #0
 80023a0:	0159      	lsls	r1, r3, #5
 80023a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023a6:	0150      	lsls	r0, r2, #5
 80023a8:	4602      	mov	r2, r0
 80023aa:	460b      	mov	r3, r1
 80023ac:	4641      	mov	r1, r8
 80023ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80023b2:	4649      	mov	r1, r9
 80023b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80023b8:	f04f 0200 	mov.w	r2, #0
 80023bc:	f04f 0300 	mov.w	r3, #0
 80023c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80023c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80023c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80023cc:	ebb2 040a 	subs.w	r4, r2, sl
 80023d0:	eb63 050b 	sbc.w	r5, r3, fp
 80023d4:	f04f 0200 	mov.w	r2, #0
 80023d8:	f04f 0300 	mov.w	r3, #0
 80023dc:	00eb      	lsls	r3, r5, #3
 80023de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023e2:	00e2      	lsls	r2, r4, #3
 80023e4:	4614      	mov	r4, r2
 80023e6:	461d      	mov	r5, r3
 80023e8:	4643      	mov	r3, r8
 80023ea:	18e3      	adds	r3, r4, r3
 80023ec:	603b      	str	r3, [r7, #0]
 80023ee:	464b      	mov	r3, r9
 80023f0:	eb45 0303 	adc.w	r3, r5, r3
 80023f4:	607b      	str	r3, [r7, #4]
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	f04f 0300 	mov.w	r3, #0
 80023fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002402:	4629      	mov	r1, r5
 8002404:	028b      	lsls	r3, r1, #10
 8002406:	4621      	mov	r1, r4
 8002408:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800240c:	4621      	mov	r1, r4
 800240e:	028a      	lsls	r2, r1, #10
 8002410:	4610      	mov	r0, r2
 8002412:	4619      	mov	r1, r3
 8002414:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002416:	2200      	movs	r2, #0
 8002418:	61bb      	str	r3, [r7, #24]
 800241a:	61fa      	str	r2, [r7, #28]
 800241c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002420:	f7fe fb14 	bl	8000a4c <__aeabi_uldivmod>
 8002424:	4602      	mov	r2, r0
 8002426:	460b      	mov	r3, r1
 8002428:	4613      	mov	r3, r2
 800242a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800242c:	4b0b      	ldr	r3, [pc, #44]	; (800245c <HAL_RCC_GetSysClockFreq+0x200>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	0c1b      	lsrs	r3, r3, #16
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	3301      	adds	r3, #1
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800243c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800243e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002440:	fbb2 f3f3 	udiv	r3, r2, r3
 8002444:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002446:	e002      	b.n	800244e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002448:	4b05      	ldr	r3, [pc, #20]	; (8002460 <HAL_RCC_GetSysClockFreq+0x204>)
 800244a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800244c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800244e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002450:	4618      	mov	r0, r3
 8002452:	3750      	adds	r7, #80	; 0x50
 8002454:	46bd      	mov	sp, r7
 8002456:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800245a:	bf00      	nop
 800245c:	40023800 	.word	0x40023800
 8002460:	00f42400 	.word	0x00f42400
 8002464:	007a1200 	.word	0x007a1200

08002468 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800246c:	4b03      	ldr	r3, [pc, #12]	; (800247c <HAL_RCC_GetHCLKFreq+0x14>)
 800246e:	681b      	ldr	r3, [r3, #0]
}
 8002470:	4618      	mov	r0, r3
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	20000000 	.word	0x20000000

08002480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002484:	f7ff fff0 	bl	8002468 <HAL_RCC_GetHCLKFreq>
 8002488:	4602      	mov	r2, r0
 800248a:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	0a9b      	lsrs	r3, r3, #10
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	4903      	ldr	r1, [pc, #12]	; (80024a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002496:	5ccb      	ldrb	r3, [r1, r3]
 8002498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800249c:	4618      	mov	r0, r3
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40023800 	.word	0x40023800
 80024a4:	08004f48 	.word	0x08004f48

080024a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024ac:	f7ff ffdc 	bl	8002468 <HAL_RCC_GetHCLKFreq>
 80024b0:	4602      	mov	r2, r0
 80024b2:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	0b5b      	lsrs	r3, r3, #13
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	4903      	ldr	r1, [pc, #12]	; (80024cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80024be:	5ccb      	ldrb	r3, [r1, r3]
 80024c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40023800 	.word	0x40023800
 80024cc:	08004f48 	.word	0x08004f48

080024d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e041      	b.n	8002566 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d106      	bne.n	80024fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f7fe ff2a 	bl	8001350 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2202      	movs	r2, #2
 8002500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	3304      	adds	r3, #4
 800250c:	4619      	mov	r1, r3
 800250e:	4610      	mov	r0, r2
 8002510:	f000 fcd2 	bl	8002eb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
	...

08002570 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2b01      	cmp	r3, #1
 8002582:	d001      	beq.n	8002588 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e046      	b.n	8002616 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2202      	movs	r2, #2
 800258c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a23      	ldr	r2, [pc, #140]	; (8002624 <HAL_TIM_Base_Start+0xb4>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d022      	beq.n	80025e0 <HAL_TIM_Base_Start+0x70>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025a2:	d01d      	beq.n	80025e0 <HAL_TIM_Base_Start+0x70>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a1f      	ldr	r2, [pc, #124]	; (8002628 <HAL_TIM_Base_Start+0xb8>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d018      	beq.n	80025e0 <HAL_TIM_Base_Start+0x70>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a1e      	ldr	r2, [pc, #120]	; (800262c <HAL_TIM_Base_Start+0xbc>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d013      	beq.n	80025e0 <HAL_TIM_Base_Start+0x70>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a1c      	ldr	r2, [pc, #112]	; (8002630 <HAL_TIM_Base_Start+0xc0>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d00e      	beq.n	80025e0 <HAL_TIM_Base_Start+0x70>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a1b      	ldr	r2, [pc, #108]	; (8002634 <HAL_TIM_Base_Start+0xc4>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d009      	beq.n	80025e0 <HAL_TIM_Base_Start+0x70>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a19      	ldr	r2, [pc, #100]	; (8002638 <HAL_TIM_Base_Start+0xc8>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d004      	beq.n	80025e0 <HAL_TIM_Base_Start+0x70>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a18      	ldr	r2, [pc, #96]	; (800263c <HAL_TIM_Base_Start+0xcc>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d111      	bne.n	8002604 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2b06      	cmp	r3, #6
 80025f0:	d010      	beq.n	8002614 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f042 0201 	orr.w	r2, r2, #1
 8002600:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002602:	e007      	b.n	8002614 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f042 0201 	orr.w	r2, r2, #1
 8002612:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3714      	adds	r7, #20
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	40010000 	.word	0x40010000
 8002628:	40000400 	.word	0x40000400
 800262c:	40000800 	.word	0x40000800
 8002630:	40000c00 	.word	0x40000c00
 8002634:	40010400 	.word	0x40010400
 8002638:	40014000 	.word	0x40014000
 800263c:	40001800 	.word	0x40001800

08002640 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e041      	b.n	80026d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d106      	bne.n	800266c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f839 	bl	80026de <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2202      	movs	r2, #2
 8002670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3304      	adds	r3, #4
 800267c:	4619      	mov	r1, r3
 800267e:	4610      	mov	r0, r2
 8002680:	f000 fc1a 	bl	8002eb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80026de:	b480      	push	{r7}
 80026e0:	b083      	sub	sp, #12
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
	...

080026f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d109      	bne.n	8002718 <HAL_TIM_PWM_Start+0x24>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b01      	cmp	r3, #1
 800270e:	bf14      	ite	ne
 8002710:	2301      	movne	r3, #1
 8002712:	2300      	moveq	r3, #0
 8002714:	b2db      	uxtb	r3, r3
 8002716:	e022      	b.n	800275e <HAL_TIM_PWM_Start+0x6a>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	2b04      	cmp	r3, #4
 800271c:	d109      	bne.n	8002732 <HAL_TIM_PWM_Start+0x3e>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b01      	cmp	r3, #1
 8002728:	bf14      	ite	ne
 800272a:	2301      	movne	r3, #1
 800272c:	2300      	moveq	r3, #0
 800272e:	b2db      	uxtb	r3, r3
 8002730:	e015      	b.n	800275e <HAL_TIM_PWM_Start+0x6a>
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	2b08      	cmp	r3, #8
 8002736:	d109      	bne.n	800274c <HAL_TIM_PWM_Start+0x58>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2b01      	cmp	r3, #1
 8002742:	bf14      	ite	ne
 8002744:	2301      	movne	r3, #1
 8002746:	2300      	moveq	r3, #0
 8002748:	b2db      	uxtb	r3, r3
 800274a:	e008      	b.n	800275e <HAL_TIM_PWM_Start+0x6a>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002752:	b2db      	uxtb	r3, r3
 8002754:	2b01      	cmp	r3, #1
 8002756:	bf14      	ite	ne
 8002758:	2301      	movne	r3, #1
 800275a:	2300      	moveq	r3, #0
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e07c      	b.n	8002860 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d104      	bne.n	8002776 <HAL_TIM_PWM_Start+0x82>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2202      	movs	r2, #2
 8002770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002774:	e013      	b.n	800279e <HAL_TIM_PWM_Start+0xaa>
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	2b04      	cmp	r3, #4
 800277a:	d104      	bne.n	8002786 <HAL_TIM_PWM_Start+0x92>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2202      	movs	r2, #2
 8002780:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002784:	e00b      	b.n	800279e <HAL_TIM_PWM_Start+0xaa>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	2b08      	cmp	r3, #8
 800278a:	d104      	bne.n	8002796 <HAL_TIM_PWM_Start+0xa2>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2202      	movs	r2, #2
 8002790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002794:	e003      	b.n	800279e <HAL_TIM_PWM_Start+0xaa>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2202      	movs	r2, #2
 800279a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2201      	movs	r2, #1
 80027a4:	6839      	ldr	r1, [r7, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f001 f811 	bl	80037ce <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a2d      	ldr	r2, [pc, #180]	; (8002868 <HAL_TIM_PWM_Start+0x174>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d004      	beq.n	80027c0 <HAL_TIM_PWM_Start+0xcc>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a2c      	ldr	r2, [pc, #176]	; (800286c <HAL_TIM_PWM_Start+0x178>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d101      	bne.n	80027c4 <HAL_TIM_PWM_Start+0xd0>
 80027c0:	2301      	movs	r3, #1
 80027c2:	e000      	b.n	80027c6 <HAL_TIM_PWM_Start+0xd2>
 80027c4:	2300      	movs	r3, #0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d007      	beq.n	80027da <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a22      	ldr	r2, [pc, #136]	; (8002868 <HAL_TIM_PWM_Start+0x174>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d022      	beq.n	800282a <HAL_TIM_PWM_Start+0x136>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ec:	d01d      	beq.n	800282a <HAL_TIM_PWM_Start+0x136>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a1f      	ldr	r2, [pc, #124]	; (8002870 <HAL_TIM_PWM_Start+0x17c>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d018      	beq.n	800282a <HAL_TIM_PWM_Start+0x136>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a1d      	ldr	r2, [pc, #116]	; (8002874 <HAL_TIM_PWM_Start+0x180>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d013      	beq.n	800282a <HAL_TIM_PWM_Start+0x136>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a1c      	ldr	r2, [pc, #112]	; (8002878 <HAL_TIM_PWM_Start+0x184>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d00e      	beq.n	800282a <HAL_TIM_PWM_Start+0x136>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a16      	ldr	r2, [pc, #88]	; (800286c <HAL_TIM_PWM_Start+0x178>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d009      	beq.n	800282a <HAL_TIM_PWM_Start+0x136>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a18      	ldr	r2, [pc, #96]	; (800287c <HAL_TIM_PWM_Start+0x188>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d004      	beq.n	800282a <HAL_TIM_PWM_Start+0x136>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a16      	ldr	r2, [pc, #88]	; (8002880 <HAL_TIM_PWM_Start+0x18c>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d111      	bne.n	800284e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f003 0307 	and.w	r3, r3, #7
 8002834:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2b06      	cmp	r3, #6
 800283a:	d010      	beq.n	800285e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f042 0201 	orr.w	r2, r2, #1
 800284a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800284c:	e007      	b.n	800285e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f042 0201 	orr.w	r2, r2, #1
 800285c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40010000 	.word	0x40010000
 800286c:	40010400 	.word	0x40010400
 8002870:	40000400 	.word	0x40000400
 8002874:	40000800 	.word	0x40000800
 8002878:	40000c00 	.word	0x40000c00
 800287c:	40014000 	.word	0x40014000
 8002880:	40001800 	.word	0x40001800

08002884 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e041      	b.n	800291a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d106      	bne.n	80028b0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 f839 	bl	8002922 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2202      	movs	r2, #2
 80028b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3304      	adds	r3, #4
 80028c0:	4619      	mov	r1, r3
 80028c2:	4610      	mov	r0, r2
 80028c4:	f000 faf8 	bl	8002eb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002922:	b480      	push	{r7}
 8002924:	b083      	sub	sp, #12
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800292a:	bf00      	nop
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
	...

08002938 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d104      	bne.n	8002952 <HAL_TIM_IC_Start+0x1a>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800294e:	b2db      	uxtb	r3, r3
 8002950:	e013      	b.n	800297a <HAL_TIM_IC_Start+0x42>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	2b04      	cmp	r3, #4
 8002956:	d104      	bne.n	8002962 <HAL_TIM_IC_Start+0x2a>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800295e:	b2db      	uxtb	r3, r3
 8002960:	e00b      	b.n	800297a <HAL_TIM_IC_Start+0x42>
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	2b08      	cmp	r3, #8
 8002966:	d104      	bne.n	8002972 <HAL_TIM_IC_Start+0x3a>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800296e:	b2db      	uxtb	r3, r3
 8002970:	e003      	b.n	800297a <HAL_TIM_IC_Start+0x42>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002978:	b2db      	uxtb	r3, r3
 800297a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d104      	bne.n	800298c <HAL_TIM_IC_Start+0x54>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002988:	b2db      	uxtb	r3, r3
 800298a:	e013      	b.n	80029b4 <HAL_TIM_IC_Start+0x7c>
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	2b04      	cmp	r3, #4
 8002990:	d104      	bne.n	800299c <HAL_TIM_IC_Start+0x64>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002998:	b2db      	uxtb	r3, r3
 800299a:	e00b      	b.n	80029b4 <HAL_TIM_IC_Start+0x7c>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	2b08      	cmp	r3, #8
 80029a0:	d104      	bne.n	80029ac <HAL_TIM_IC_Start+0x74>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	e003      	b.n	80029b4 <HAL_TIM_IC_Start+0x7c>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80029b6:	7bfb      	ldrb	r3, [r7, #15]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d102      	bne.n	80029c2 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80029bc:	7bbb      	ldrb	r3, [r7, #14]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d001      	beq.n	80029c6 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e081      	b.n	8002aca <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d104      	bne.n	80029d6 <HAL_TIM_IC_Start+0x9e>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2202      	movs	r2, #2
 80029d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029d4:	e013      	b.n	80029fe <HAL_TIM_IC_Start+0xc6>
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	2b04      	cmp	r3, #4
 80029da:	d104      	bne.n	80029e6 <HAL_TIM_IC_Start+0xae>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2202      	movs	r2, #2
 80029e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029e4:	e00b      	b.n	80029fe <HAL_TIM_IC_Start+0xc6>
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	2b08      	cmp	r3, #8
 80029ea:	d104      	bne.n	80029f6 <HAL_TIM_IC_Start+0xbe>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2202      	movs	r2, #2
 80029f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029f4:	e003      	b.n	80029fe <HAL_TIM_IC_Start+0xc6>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2202      	movs	r2, #2
 80029fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d104      	bne.n	8002a0e <HAL_TIM_IC_Start+0xd6>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2202      	movs	r2, #2
 8002a08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a0c:	e013      	b.n	8002a36 <HAL_TIM_IC_Start+0xfe>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	2b04      	cmp	r3, #4
 8002a12:	d104      	bne.n	8002a1e <HAL_TIM_IC_Start+0xe6>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2202      	movs	r2, #2
 8002a18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a1c:	e00b      	b.n	8002a36 <HAL_TIM_IC_Start+0xfe>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b08      	cmp	r3, #8
 8002a22:	d104      	bne.n	8002a2e <HAL_TIM_IC_Start+0xf6>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2202      	movs	r2, #2
 8002a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a2c:	e003      	b.n	8002a36 <HAL_TIM_IC_Start+0xfe>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2202      	movs	r2, #2
 8002a32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	6839      	ldr	r1, [r7, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 fec5 	bl	80037ce <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a22      	ldr	r2, [pc, #136]	; (8002ad4 <HAL_TIM_IC_Start+0x19c>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d022      	beq.n	8002a94 <HAL_TIM_IC_Start+0x15c>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a56:	d01d      	beq.n	8002a94 <HAL_TIM_IC_Start+0x15c>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a1e      	ldr	r2, [pc, #120]	; (8002ad8 <HAL_TIM_IC_Start+0x1a0>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d018      	beq.n	8002a94 <HAL_TIM_IC_Start+0x15c>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a1d      	ldr	r2, [pc, #116]	; (8002adc <HAL_TIM_IC_Start+0x1a4>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d013      	beq.n	8002a94 <HAL_TIM_IC_Start+0x15c>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a1b      	ldr	r2, [pc, #108]	; (8002ae0 <HAL_TIM_IC_Start+0x1a8>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d00e      	beq.n	8002a94 <HAL_TIM_IC_Start+0x15c>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a1a      	ldr	r2, [pc, #104]	; (8002ae4 <HAL_TIM_IC_Start+0x1ac>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d009      	beq.n	8002a94 <HAL_TIM_IC_Start+0x15c>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a18      	ldr	r2, [pc, #96]	; (8002ae8 <HAL_TIM_IC_Start+0x1b0>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d004      	beq.n	8002a94 <HAL_TIM_IC_Start+0x15c>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a17      	ldr	r2, [pc, #92]	; (8002aec <HAL_TIM_IC_Start+0x1b4>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d111      	bne.n	8002ab8 <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 0307 	and.w	r3, r3, #7
 8002a9e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	2b06      	cmp	r3, #6
 8002aa4:	d010      	beq.n	8002ac8 <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f042 0201 	orr.w	r2, r2, #1
 8002ab4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ab6:	e007      	b.n	8002ac8 <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f042 0201 	orr.w	r2, r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40010000 	.word	0x40010000
 8002ad8:	40000400 	.word	0x40000400
 8002adc:	40000800 	.word	0x40000800
 8002ae0:	40000c00 	.word	0x40000c00
 8002ae4:	40010400 	.word	0x40010400
 8002ae8:	40014000 	.word	0x40014000
 8002aec:	40001800 	.word	0x40001800

08002af0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002afc:	2300      	movs	r3, #0
 8002afe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d101      	bne.n	8002b0e <HAL_TIM_IC_ConfigChannel+0x1e>
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	e088      	b.n	8002c20 <HAL_TIM_IC_ConfigChannel+0x130>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d11b      	bne.n	8002b54 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6818      	ldr	r0, [r3, #0]
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	6819      	ldr	r1, [r3, #0]
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	f000 fca6 	bl	800347c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	699a      	ldr	r2, [r3, #24]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 020c 	bic.w	r2, r2, #12
 8002b3e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6999      	ldr	r1, [r3, #24]
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	689a      	ldr	r2, [r3, #8]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	619a      	str	r2, [r3, #24]
 8002b52:	e060      	b.n	8002c16 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	d11c      	bne.n	8002b94 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6818      	ldr	r0, [r3, #0]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	6819      	ldr	r1, [r3, #0]
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f000 fd2a 	bl	80035c2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	699a      	ldr	r2, [r3, #24]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002b7c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6999      	ldr	r1, [r3, #24]
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	021a      	lsls	r2, r3, #8
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	619a      	str	r2, [r3, #24]
 8002b92:	e040      	b.n	8002c16 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b08      	cmp	r3, #8
 8002b98:	d11b      	bne.n	8002bd2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6818      	ldr	r0, [r3, #0]
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	6819      	ldr	r1, [r3, #0]
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	f000 fd77 	bl	800369c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	69da      	ldr	r2, [r3, #28]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 020c 	bic.w	r2, r2, #12
 8002bbc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	69d9      	ldr	r1, [r3, #28]
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	61da      	str	r2, [r3, #28]
 8002bd0:	e021      	b.n	8002c16 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b0c      	cmp	r3, #12
 8002bd6:	d11c      	bne.n	8002c12 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6818      	ldr	r0, [r3, #0]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	6819      	ldr	r1, [r3, #0]
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	685a      	ldr	r2, [r3, #4]
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	f000 fd94 	bl	8003714 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	69da      	ldr	r2, [r3, #28]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002bfa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	69d9      	ldr	r1, [r3, #28]
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	021a      	lsls	r2, r3, #8
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	61da      	str	r2, [r3, #28]
 8002c10:	e001      	b.n	8002c16 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3718      	adds	r7, #24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c34:	2300      	movs	r3, #0
 8002c36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d101      	bne.n	8002c46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002c42:	2302      	movs	r3, #2
 8002c44:	e0ae      	b.n	8002da4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2b0c      	cmp	r3, #12
 8002c52:	f200 809f 	bhi.w	8002d94 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002c56:	a201      	add	r2, pc, #4	; (adr r2, 8002c5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c5c:	08002c91 	.word	0x08002c91
 8002c60:	08002d95 	.word	0x08002d95
 8002c64:	08002d95 	.word	0x08002d95
 8002c68:	08002d95 	.word	0x08002d95
 8002c6c:	08002cd1 	.word	0x08002cd1
 8002c70:	08002d95 	.word	0x08002d95
 8002c74:	08002d95 	.word	0x08002d95
 8002c78:	08002d95 	.word	0x08002d95
 8002c7c:	08002d13 	.word	0x08002d13
 8002c80:	08002d95 	.word	0x08002d95
 8002c84:	08002d95 	.word	0x08002d95
 8002c88:	08002d95 	.word	0x08002d95
 8002c8c:	08002d53 	.word	0x08002d53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68b9      	ldr	r1, [r7, #8]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f000 f9ae 	bl	8002ff8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	699a      	ldr	r2, [r3, #24]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f042 0208 	orr.w	r2, r2, #8
 8002caa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	699a      	ldr	r2, [r3, #24]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 0204 	bic.w	r2, r2, #4
 8002cba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6999      	ldr	r1, [r3, #24]
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	691a      	ldr	r2, [r3, #16]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	619a      	str	r2, [r3, #24]
      break;
 8002cce:	e064      	b.n	8002d9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68b9      	ldr	r1, [r7, #8]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f000 f9fe 	bl	80030d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	699a      	ldr	r2, [r3, #24]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	699a      	ldr	r2, [r3, #24]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6999      	ldr	r1, [r3, #24]
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	021a      	lsls	r2, r3, #8
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	619a      	str	r2, [r3, #24]
      break;
 8002d10:	e043      	b.n	8002d9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68b9      	ldr	r1, [r7, #8]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f000 fa53 	bl	80031c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	69da      	ldr	r2, [r3, #28]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f042 0208 	orr.w	r2, r2, #8
 8002d2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	69da      	ldr	r2, [r3, #28]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 0204 	bic.w	r2, r2, #4
 8002d3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	69d9      	ldr	r1, [r3, #28]
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	691a      	ldr	r2, [r3, #16]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	61da      	str	r2, [r3, #28]
      break;
 8002d50:	e023      	b.n	8002d9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68b9      	ldr	r1, [r7, #8]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f000 faa7 	bl	80032ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	69da      	ldr	r2, [r3, #28]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	69da      	ldr	r2, [r3, #28]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	69d9      	ldr	r1, [r3, #28]
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	021a      	lsls	r2, r3, #8
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	61da      	str	r2, [r3, #28]
      break;
 8002d92:	e002      	b.n	8002d9a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	75fb      	strb	r3, [r7, #23]
      break;
 8002d98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3718      	adds	r7, #24
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d101      	bne.n	8002dc4 <HAL_TIM_SlaveConfigSynchro+0x18>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	e031      	b.n	8002e28 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002dd4:	6839      	ldr	r1, [r7, #0]
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 fabe 	bl	8003358 <TIM_SlaveTimer_SetConfig>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d009      	beq.n	8002df6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e018      	b.n	8002e28 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68da      	ldr	r2, [r3, #12]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e04:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68da      	ldr	r2, [r3, #12]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e14:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	2b0c      	cmp	r3, #12
 8002e42:	d831      	bhi.n	8002ea8 <HAL_TIM_ReadCapturedValue+0x78>
 8002e44:	a201      	add	r2, pc, #4	; (adr r2, 8002e4c <HAL_TIM_ReadCapturedValue+0x1c>)
 8002e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e4a:	bf00      	nop
 8002e4c:	08002e81 	.word	0x08002e81
 8002e50:	08002ea9 	.word	0x08002ea9
 8002e54:	08002ea9 	.word	0x08002ea9
 8002e58:	08002ea9 	.word	0x08002ea9
 8002e5c:	08002e8b 	.word	0x08002e8b
 8002e60:	08002ea9 	.word	0x08002ea9
 8002e64:	08002ea9 	.word	0x08002ea9
 8002e68:	08002ea9 	.word	0x08002ea9
 8002e6c:	08002e95 	.word	0x08002e95
 8002e70:	08002ea9 	.word	0x08002ea9
 8002e74:	08002ea9 	.word	0x08002ea9
 8002e78:	08002ea9 	.word	0x08002ea9
 8002e7c:	08002e9f 	.word	0x08002e9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e86:	60fb      	str	r3, [r7, #12]

      break;
 8002e88:	e00f      	b.n	8002eaa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e90:	60fb      	str	r3, [r7, #12]

      break;
 8002e92:	e00a      	b.n	8002eaa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e9a:	60fb      	str	r3, [r7, #12]

      break;
 8002e9c:	e005      	b.n	8002eaa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea4:	60fb      	str	r3, [r7, #12]

      break;
 8002ea6:	e000      	b.n	8002eaa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002ea8:	bf00      	nop
  }

  return tmpreg;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3714      	adds	r7, #20
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a40      	ldr	r2, [pc, #256]	; (8002fcc <TIM_Base_SetConfig+0x114>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d013      	beq.n	8002ef8 <TIM_Base_SetConfig+0x40>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ed6:	d00f      	beq.n	8002ef8 <TIM_Base_SetConfig+0x40>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a3d      	ldr	r2, [pc, #244]	; (8002fd0 <TIM_Base_SetConfig+0x118>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d00b      	beq.n	8002ef8 <TIM_Base_SetConfig+0x40>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a3c      	ldr	r2, [pc, #240]	; (8002fd4 <TIM_Base_SetConfig+0x11c>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d007      	beq.n	8002ef8 <TIM_Base_SetConfig+0x40>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a3b      	ldr	r2, [pc, #236]	; (8002fd8 <TIM_Base_SetConfig+0x120>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d003      	beq.n	8002ef8 <TIM_Base_SetConfig+0x40>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a3a      	ldr	r2, [pc, #232]	; (8002fdc <TIM_Base_SetConfig+0x124>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d108      	bne.n	8002f0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002efe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a2f      	ldr	r2, [pc, #188]	; (8002fcc <TIM_Base_SetConfig+0x114>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d02b      	beq.n	8002f6a <TIM_Base_SetConfig+0xb2>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f18:	d027      	beq.n	8002f6a <TIM_Base_SetConfig+0xb2>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a2c      	ldr	r2, [pc, #176]	; (8002fd0 <TIM_Base_SetConfig+0x118>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d023      	beq.n	8002f6a <TIM_Base_SetConfig+0xb2>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a2b      	ldr	r2, [pc, #172]	; (8002fd4 <TIM_Base_SetConfig+0x11c>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d01f      	beq.n	8002f6a <TIM_Base_SetConfig+0xb2>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a2a      	ldr	r2, [pc, #168]	; (8002fd8 <TIM_Base_SetConfig+0x120>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d01b      	beq.n	8002f6a <TIM_Base_SetConfig+0xb2>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a29      	ldr	r2, [pc, #164]	; (8002fdc <TIM_Base_SetConfig+0x124>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d017      	beq.n	8002f6a <TIM_Base_SetConfig+0xb2>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a28      	ldr	r2, [pc, #160]	; (8002fe0 <TIM_Base_SetConfig+0x128>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d013      	beq.n	8002f6a <TIM_Base_SetConfig+0xb2>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a27      	ldr	r2, [pc, #156]	; (8002fe4 <TIM_Base_SetConfig+0x12c>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d00f      	beq.n	8002f6a <TIM_Base_SetConfig+0xb2>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a26      	ldr	r2, [pc, #152]	; (8002fe8 <TIM_Base_SetConfig+0x130>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d00b      	beq.n	8002f6a <TIM_Base_SetConfig+0xb2>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a25      	ldr	r2, [pc, #148]	; (8002fec <TIM_Base_SetConfig+0x134>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d007      	beq.n	8002f6a <TIM_Base_SetConfig+0xb2>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a24      	ldr	r2, [pc, #144]	; (8002ff0 <TIM_Base_SetConfig+0x138>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d003      	beq.n	8002f6a <TIM_Base_SetConfig+0xb2>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a23      	ldr	r2, [pc, #140]	; (8002ff4 <TIM_Base_SetConfig+0x13c>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d108      	bne.n	8002f7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a0a      	ldr	r2, [pc, #40]	; (8002fcc <TIM_Base_SetConfig+0x114>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d003      	beq.n	8002fb0 <TIM_Base_SetConfig+0xf8>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a0c      	ldr	r2, [pc, #48]	; (8002fdc <TIM_Base_SetConfig+0x124>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d103      	bne.n	8002fb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	691a      	ldr	r2, [r3, #16]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	615a      	str	r2, [r3, #20]
}
 8002fbe:	bf00      	nop
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	40010000 	.word	0x40010000
 8002fd0:	40000400 	.word	0x40000400
 8002fd4:	40000800 	.word	0x40000800
 8002fd8:	40000c00 	.word	0x40000c00
 8002fdc:	40010400 	.word	0x40010400
 8002fe0:	40014000 	.word	0x40014000
 8002fe4:	40014400 	.word	0x40014400
 8002fe8:	40014800 	.word	0x40014800
 8002fec:	40001800 	.word	0x40001800
 8002ff0:	40001c00 	.word	0x40001c00
 8002ff4:	40002000 	.word	0x40002000

08002ff8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b087      	sub	sp, #28
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	f023 0201 	bic.w	r2, r3, #1
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f023 0303 	bic.w	r3, r3, #3
 800302e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	4313      	orrs	r3, r2
 8003038:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f023 0302 	bic.w	r3, r3, #2
 8003040:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	4313      	orrs	r3, r2
 800304a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a20      	ldr	r2, [pc, #128]	; (80030d0 <TIM_OC1_SetConfig+0xd8>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d003      	beq.n	800305c <TIM_OC1_SetConfig+0x64>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a1f      	ldr	r2, [pc, #124]	; (80030d4 <TIM_OC1_SetConfig+0xdc>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d10c      	bne.n	8003076 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	f023 0308 	bic.w	r3, r3, #8
 8003062:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	4313      	orrs	r3, r2
 800306c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	f023 0304 	bic.w	r3, r3, #4
 8003074:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a15      	ldr	r2, [pc, #84]	; (80030d0 <TIM_OC1_SetConfig+0xd8>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d003      	beq.n	8003086 <TIM_OC1_SetConfig+0x8e>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a14      	ldr	r2, [pc, #80]	; (80030d4 <TIM_OC1_SetConfig+0xdc>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d111      	bne.n	80030aa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800308c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003094:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	4313      	orrs	r3, r2
 800309e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685a      	ldr	r2, [r3, #4]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	621a      	str	r2, [r3, #32]
}
 80030c4:	bf00      	nop
 80030c6:	371c      	adds	r7, #28
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	40010000 	.word	0x40010000
 80030d4:	40010400 	.word	0x40010400

080030d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030d8:	b480      	push	{r7}
 80030da:	b087      	sub	sp, #28
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	f023 0210 	bic.w	r2, r3, #16
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800310e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	021b      	lsls	r3, r3, #8
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	4313      	orrs	r3, r2
 800311a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	f023 0320 	bic.w	r3, r3, #32
 8003122:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	011b      	lsls	r3, r3, #4
 800312a:	697a      	ldr	r2, [r7, #20]
 800312c:	4313      	orrs	r3, r2
 800312e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a22      	ldr	r2, [pc, #136]	; (80031bc <TIM_OC2_SetConfig+0xe4>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d003      	beq.n	8003140 <TIM_OC2_SetConfig+0x68>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a21      	ldr	r2, [pc, #132]	; (80031c0 <TIM_OC2_SetConfig+0xe8>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d10d      	bne.n	800315c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003146:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	011b      	lsls	r3, r3, #4
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	4313      	orrs	r3, r2
 8003152:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800315a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a17      	ldr	r2, [pc, #92]	; (80031bc <TIM_OC2_SetConfig+0xe4>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d003      	beq.n	800316c <TIM_OC2_SetConfig+0x94>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a16      	ldr	r2, [pc, #88]	; (80031c0 <TIM_OC2_SetConfig+0xe8>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d113      	bne.n	8003194 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003172:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800317a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	4313      	orrs	r3, r2
 8003186:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	4313      	orrs	r3, r2
 8003192:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	621a      	str	r2, [r3, #32]
}
 80031ae:	bf00      	nop
 80031b0:	371c      	adds	r7, #28
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	40010000 	.word	0x40010000
 80031c0:	40010400 	.word	0x40010400

080031c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b087      	sub	sp, #28
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f023 0303 	bic.w	r3, r3, #3
 80031fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	4313      	orrs	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800320c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	021b      	lsls	r3, r3, #8
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	4313      	orrs	r3, r2
 8003218:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a21      	ldr	r2, [pc, #132]	; (80032a4 <TIM_OC3_SetConfig+0xe0>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d003      	beq.n	800322a <TIM_OC3_SetConfig+0x66>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a20      	ldr	r2, [pc, #128]	; (80032a8 <TIM_OC3_SetConfig+0xe4>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d10d      	bne.n	8003246 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003230:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	021b      	lsls	r3, r3, #8
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	4313      	orrs	r3, r2
 800323c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003244:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a16      	ldr	r2, [pc, #88]	; (80032a4 <TIM_OC3_SetConfig+0xe0>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d003      	beq.n	8003256 <TIM_OC3_SetConfig+0x92>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a15      	ldr	r2, [pc, #84]	; (80032a8 <TIM_OC3_SetConfig+0xe4>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d113      	bne.n	800327e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800325c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003264:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	011b      	lsls	r3, r3, #4
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	4313      	orrs	r3, r2
 8003270:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	011b      	lsls	r3, r3, #4
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	4313      	orrs	r3, r2
 800327c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	621a      	str	r2, [r3, #32]
}
 8003298:	bf00      	nop
 800329a:	371c      	adds	r7, #28
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	40010000 	.word	0x40010000
 80032a8:	40010400 	.word	0x40010400

080032ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b087      	sub	sp, #28
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	021b      	lsls	r3, r3, #8
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	031b      	lsls	r3, r3, #12
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	4313      	orrs	r3, r2
 8003302:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a12      	ldr	r2, [pc, #72]	; (8003350 <TIM_OC4_SetConfig+0xa4>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d003      	beq.n	8003314 <TIM_OC4_SetConfig+0x68>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a11      	ldr	r2, [pc, #68]	; (8003354 <TIM_OC4_SetConfig+0xa8>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d109      	bne.n	8003328 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800331a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	019b      	lsls	r3, r3, #6
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	4313      	orrs	r3, r2
 8003326:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	621a      	str	r2, [r3, #32]
}
 8003342:	bf00      	nop
 8003344:	371c      	adds	r7, #28
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	40010000 	.word	0x40010000
 8003354:	40010400 	.word	0x40010400

08003358 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003362:	2300      	movs	r3, #0
 8003364:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003374:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	4313      	orrs	r3, r2
 800337e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	f023 0307 	bic.w	r3, r3, #7
 8003386:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	4313      	orrs	r3, r2
 8003390:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	2b70      	cmp	r3, #112	; 0x70
 80033a0:	d01a      	beq.n	80033d8 <TIM_SlaveTimer_SetConfig+0x80>
 80033a2:	2b70      	cmp	r3, #112	; 0x70
 80033a4:	d860      	bhi.n	8003468 <TIM_SlaveTimer_SetConfig+0x110>
 80033a6:	2b60      	cmp	r3, #96	; 0x60
 80033a8:	d054      	beq.n	8003454 <TIM_SlaveTimer_SetConfig+0xfc>
 80033aa:	2b60      	cmp	r3, #96	; 0x60
 80033ac:	d85c      	bhi.n	8003468 <TIM_SlaveTimer_SetConfig+0x110>
 80033ae:	2b50      	cmp	r3, #80	; 0x50
 80033b0:	d046      	beq.n	8003440 <TIM_SlaveTimer_SetConfig+0xe8>
 80033b2:	2b50      	cmp	r3, #80	; 0x50
 80033b4:	d858      	bhi.n	8003468 <TIM_SlaveTimer_SetConfig+0x110>
 80033b6:	2b40      	cmp	r3, #64	; 0x40
 80033b8:	d019      	beq.n	80033ee <TIM_SlaveTimer_SetConfig+0x96>
 80033ba:	2b40      	cmp	r3, #64	; 0x40
 80033bc:	d854      	bhi.n	8003468 <TIM_SlaveTimer_SetConfig+0x110>
 80033be:	2b30      	cmp	r3, #48	; 0x30
 80033c0:	d055      	beq.n	800346e <TIM_SlaveTimer_SetConfig+0x116>
 80033c2:	2b30      	cmp	r3, #48	; 0x30
 80033c4:	d850      	bhi.n	8003468 <TIM_SlaveTimer_SetConfig+0x110>
 80033c6:	2b20      	cmp	r3, #32
 80033c8:	d051      	beq.n	800346e <TIM_SlaveTimer_SetConfig+0x116>
 80033ca:	2b20      	cmp	r3, #32
 80033cc:	d84c      	bhi.n	8003468 <TIM_SlaveTimer_SetConfig+0x110>
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d04d      	beq.n	800346e <TIM_SlaveTimer_SetConfig+0x116>
 80033d2:	2b10      	cmp	r3, #16
 80033d4:	d04b      	beq.n	800346e <TIM_SlaveTimer_SetConfig+0x116>
 80033d6:	e047      	b.n	8003468 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6818      	ldr	r0, [r3, #0]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	68d9      	ldr	r1, [r3, #12]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	f000 f9d1 	bl	800378e <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80033ec:	e040      	b.n	8003470 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2b05      	cmp	r3, #5
 80033f4:	d101      	bne.n	80033fa <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e03b      	b.n	8003472 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6a1a      	ldr	r2, [r3, #32]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 0201 	bic.w	r2, r2, #1
 8003410:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003420:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	011b      	lsls	r3, r3, #4
 8003428:	68ba      	ldr	r2, [r7, #8]
 800342a:	4313      	orrs	r3, r2
 800342c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68ba      	ldr	r2, [r7, #8]
 8003434:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	621a      	str	r2, [r3, #32]
      break;
 800343e:	e017      	b.n	8003470 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6818      	ldr	r0, [r3, #0]
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	6899      	ldr	r1, [r3, #8]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	461a      	mov	r2, r3
 800344e:	f000 f889 	bl	8003564 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003452:	e00d      	b.n	8003470 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6818      	ldr	r0, [r3, #0]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	6899      	ldr	r1, [r3, #8]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	461a      	mov	r2, r3
 8003462:	f000 f8eb 	bl	800363c <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003466:	e003      	b.n	8003470 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	75fb      	strb	r3, [r7, #23]
      break;
 800346c:	e000      	b.n	8003470 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800346e:	bf00      	nop
  }

  return status;
 8003470:	7dfb      	ldrb	r3, [r7, #23]
}
 8003472:	4618      	mov	r0, r3
 8003474:	3718      	adds	r7, #24
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
	...

0800347c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800347c:	b480      	push	{r7}
 800347e:	b087      	sub	sp, #28
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
 8003488:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	f023 0201 	bic.w	r2, r3, #1
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	4a28      	ldr	r2, [pc, #160]	; (8003548 <TIM_TI1_SetConfig+0xcc>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d01b      	beq.n	80034e2 <TIM_TI1_SetConfig+0x66>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b0:	d017      	beq.n	80034e2 <TIM_TI1_SetConfig+0x66>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	4a25      	ldr	r2, [pc, #148]	; (800354c <TIM_TI1_SetConfig+0xd0>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d013      	beq.n	80034e2 <TIM_TI1_SetConfig+0x66>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	4a24      	ldr	r2, [pc, #144]	; (8003550 <TIM_TI1_SetConfig+0xd4>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d00f      	beq.n	80034e2 <TIM_TI1_SetConfig+0x66>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	4a23      	ldr	r2, [pc, #140]	; (8003554 <TIM_TI1_SetConfig+0xd8>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d00b      	beq.n	80034e2 <TIM_TI1_SetConfig+0x66>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	4a22      	ldr	r2, [pc, #136]	; (8003558 <TIM_TI1_SetConfig+0xdc>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d007      	beq.n	80034e2 <TIM_TI1_SetConfig+0x66>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	4a21      	ldr	r2, [pc, #132]	; (800355c <TIM_TI1_SetConfig+0xe0>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d003      	beq.n	80034e2 <TIM_TI1_SetConfig+0x66>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	4a20      	ldr	r2, [pc, #128]	; (8003560 <TIM_TI1_SetConfig+0xe4>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d101      	bne.n	80034e6 <TIM_TI1_SetConfig+0x6a>
 80034e2:	2301      	movs	r3, #1
 80034e4:	e000      	b.n	80034e8 <TIM_TI1_SetConfig+0x6c>
 80034e6:	2300      	movs	r3, #0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d008      	beq.n	80034fe <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f023 0303 	bic.w	r3, r3, #3
 80034f2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	e003      	b.n	8003506 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f043 0301 	orr.w	r3, r3, #1
 8003504:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800350c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	011b      	lsls	r3, r3, #4
 8003512:	b2db      	uxtb	r3, r3
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	4313      	orrs	r3, r2
 8003518:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	f023 030a 	bic.w	r3, r3, #10
 8003520:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	f003 030a 	and.w	r3, r3, #10
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	4313      	orrs	r3, r2
 800352c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	621a      	str	r2, [r3, #32]
}
 800353a:	bf00      	nop
 800353c:	371c      	adds	r7, #28
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	40010000 	.word	0x40010000
 800354c:	40000400 	.word	0x40000400
 8003550:	40000800 	.word	0x40000800
 8003554:	40000c00 	.word	0x40000c00
 8003558:	40010400 	.word	0x40010400
 800355c:	40014000 	.word	0x40014000
 8003560:	40001800 	.word	0x40001800

08003564 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003564:	b480      	push	{r7}
 8003566:	b087      	sub	sp, #28
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	f023 0201 	bic.w	r2, r3, #1
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800358e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	4313      	orrs	r3, r2
 8003598:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f023 030a 	bic.w	r3, r3, #10
 80035a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035a2:	697a      	ldr	r2, [r7, #20]
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	621a      	str	r2, [r3, #32]
}
 80035b6:	bf00      	nop
 80035b8:	371c      	adds	r7, #28
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80035c2:	b480      	push	{r7}
 80035c4:	b087      	sub	sp, #28
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	60f8      	str	r0, [r7, #12]
 80035ca:	60b9      	str	r1, [r7, #8]
 80035cc:	607a      	str	r2, [r7, #4]
 80035ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	f023 0210 	bic.w	r2, r3, #16
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	021b      	lsls	r3, r3, #8
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003600:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	031b      	lsls	r3, r3, #12
 8003606:	b29b      	uxth	r3, r3
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	4313      	orrs	r3, r2
 800360c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003614:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	011b      	lsls	r3, r3, #4
 800361a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	4313      	orrs	r3, r2
 8003622:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	621a      	str	r2, [r3, #32]
}
 8003630:	bf00      	nop
 8003632:	371c      	adds	r7, #28
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800363c:	b480      	push	{r7}
 800363e:	b087      	sub	sp, #28
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	f023 0210 	bic.w	r2, r3, #16
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003666:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	031b      	lsls	r3, r3, #12
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	4313      	orrs	r3, r2
 8003670:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003678:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	011b      	lsls	r3, r3, #4
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	4313      	orrs	r3, r2
 8003682:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	621a      	str	r2, [r3, #32]
}
 8003690:	bf00      	nop
 8003692:	371c      	adds	r7, #28
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800369c:	b480      	push	{r7}
 800369e:	b087      	sub	sp, #28
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
 80036a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	f023 0303 	bic.w	r3, r3, #3
 80036c8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036d8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	011b      	lsls	r3, r3, #4
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80036ec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	021b      	lsls	r3, r3, #8
 80036f2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	621a      	str	r2, [r3, #32]
}
 8003708:	bf00      	nop
 800370a:	371c      	adds	r7, #28
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003714:	b480      	push	{r7}
 8003716:	b087      	sub	sp, #28
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
 8003720:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003740:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	021b      	lsls	r3, r3, #8
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	4313      	orrs	r3, r2
 800374a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003752:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	031b      	lsls	r3, r3, #12
 8003758:	b29b      	uxth	r3, r3
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	4313      	orrs	r3, r2
 800375e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003766:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	031b      	lsls	r3, r3, #12
 800376c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	4313      	orrs	r3, r2
 8003774:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	621a      	str	r2, [r3, #32]
}
 8003782:	bf00      	nop
 8003784:	371c      	adds	r7, #28
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800378e:	b480      	push	{r7}
 8003790:	b087      	sub	sp, #28
 8003792:	af00      	add	r7, sp, #0
 8003794:	60f8      	str	r0, [r7, #12]
 8003796:	60b9      	str	r1, [r7, #8]
 8003798:	607a      	str	r2, [r7, #4]
 800379a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037a8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	021a      	lsls	r2, r3, #8
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	431a      	orrs	r2, r3
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	609a      	str	r2, [r3, #8]
}
 80037c2:	bf00      	nop
 80037c4:	371c      	adds	r7, #28
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr

080037ce <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80037ce:	b480      	push	{r7}
 80037d0:	b087      	sub	sp, #28
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	60f8      	str	r0, [r7, #12]
 80037d6:	60b9      	str	r1, [r7, #8]
 80037d8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	f003 031f 	and.w	r3, r3, #31
 80037e0:	2201      	movs	r2, #1
 80037e2:	fa02 f303 	lsl.w	r3, r2, r3
 80037e6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6a1a      	ldr	r2, [r3, #32]
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	43db      	mvns	r3, r3
 80037f0:	401a      	ands	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6a1a      	ldr	r2, [r3, #32]
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	f003 031f 	and.w	r3, r3, #31
 8003800:	6879      	ldr	r1, [r7, #4]
 8003802:	fa01 f303 	lsl.w	r3, r1, r3
 8003806:	431a      	orrs	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	621a      	str	r2, [r3, #32]
}
 800380c:	bf00      	nop
 800380e:	371c      	adds	r7, #28
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003828:	2b01      	cmp	r3, #1
 800382a:	d101      	bne.n	8003830 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800382c:	2302      	movs	r3, #2
 800382e:	e05a      	b.n	80038e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2202      	movs	r2, #2
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003856:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	4313      	orrs	r3, r2
 8003860:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a21      	ldr	r2, [pc, #132]	; (80038f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d022      	beq.n	80038ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800387c:	d01d      	beq.n	80038ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a1d      	ldr	r2, [pc, #116]	; (80038f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d018      	beq.n	80038ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a1b      	ldr	r2, [pc, #108]	; (80038fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d013      	beq.n	80038ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a1a      	ldr	r2, [pc, #104]	; (8003900 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d00e      	beq.n	80038ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a18      	ldr	r2, [pc, #96]	; (8003904 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d009      	beq.n	80038ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a17      	ldr	r2, [pc, #92]	; (8003908 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d004      	beq.n	80038ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a15      	ldr	r2, [pc, #84]	; (800390c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d10c      	bne.n	80038d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3714      	adds	r7, #20
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	40010000 	.word	0x40010000
 80038f8:	40000400 	.word	0x40000400
 80038fc:	40000800 	.word	0x40000800
 8003900:	40000c00 	.word	0x40000c00
 8003904:	40010400 	.word	0x40010400
 8003908:	40014000 	.word	0x40014000
 800390c:	40001800 	.word	0x40001800

08003910 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e03f      	b.n	80039a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d106      	bne.n	800393c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7fd fdcc 	bl	80014d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2224      	movs	r2, #36	; 0x24
 8003940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68da      	ldr	r2, [r3, #12]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003952:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f929 	bl	8003bac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	691a      	ldr	r2, [r3, #16]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003968:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	695a      	ldr	r2, [r3, #20]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003978:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68da      	ldr	r2, [r3, #12]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003988:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2220      	movs	r2, #32
 8003994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2220      	movs	r2, #32
 800399c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b08a      	sub	sp, #40	; 0x28
 80039ae:	af02      	add	r7, sp, #8
 80039b0:	60f8      	str	r0, [r7, #12]
 80039b2:	60b9      	str	r1, [r7, #8]
 80039b4:	603b      	str	r3, [r7, #0]
 80039b6:	4613      	mov	r3, r2
 80039b8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039ba:	2300      	movs	r3, #0
 80039bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b20      	cmp	r3, #32
 80039c8:	d17c      	bne.n	8003ac4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d002      	beq.n	80039d6 <HAL_UART_Transmit+0x2c>
 80039d0:	88fb      	ldrh	r3, [r7, #6]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e075      	b.n	8003ac6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d101      	bne.n	80039e8 <HAL_UART_Transmit+0x3e>
 80039e4:	2302      	movs	r3, #2
 80039e6:	e06e      	b.n	8003ac6 <HAL_UART_Transmit+0x11c>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2221      	movs	r2, #33	; 0x21
 80039fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039fe:	f7fd fe41 	bl	8001684 <HAL_GetTick>
 8003a02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	88fa      	ldrh	r2, [r7, #6]
 8003a08:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	88fa      	ldrh	r2, [r7, #6]
 8003a0e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a18:	d108      	bne.n	8003a2c <HAL_UART_Transmit+0x82>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d104      	bne.n	8003a2c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003a22:	2300      	movs	r3, #0
 8003a24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	61bb      	str	r3, [r7, #24]
 8003a2a:	e003      	b.n	8003a34 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a30:	2300      	movs	r3, #0
 8003a32:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003a3c:	e02a      	b.n	8003a94 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	2200      	movs	r2, #0
 8003a46:	2180      	movs	r1, #128	; 0x80
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f000 f840 	bl	8003ace <UART_WaitOnFlagUntilTimeout>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e036      	b.n	8003ac6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10b      	bne.n	8003a76 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	881b      	ldrh	r3, [r3, #0]
 8003a62:	461a      	mov	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a6c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	3302      	adds	r3, #2
 8003a72:	61bb      	str	r3, [r7, #24]
 8003a74:	e007      	b.n	8003a86 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	781a      	ldrb	r2, [r3, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	3301      	adds	r3, #1
 8003a84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1cf      	bne.n	8003a3e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	2140      	movs	r1, #64	; 0x40
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f000 f810 	bl	8003ace <UART_WaitOnFlagUntilTimeout>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e006      	b.n	8003ac6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2220      	movs	r2, #32
 8003abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	e000      	b.n	8003ac6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ac4:	2302      	movs	r3, #2
  }
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3720      	adds	r7, #32
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b090      	sub	sp, #64	; 0x40
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	60f8      	str	r0, [r7, #12]
 8003ad6:	60b9      	str	r1, [r7, #8]
 8003ad8:	603b      	str	r3, [r7, #0]
 8003ada:	4613      	mov	r3, r2
 8003adc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ade:	e050      	b.n	8003b82 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ae0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ae2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ae6:	d04c      	beq.n	8003b82 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ae8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d007      	beq.n	8003afe <UART_WaitOnFlagUntilTimeout+0x30>
 8003aee:	f7fd fdc9 	bl	8001684 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d241      	bcs.n	8003b82 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	330c      	adds	r3, #12
 8003b04:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b08:	e853 3f00 	ldrex	r3, [r3]
 8003b0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b10:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	330c      	adds	r3, #12
 8003b1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b1e:	637a      	str	r2, [r7, #52]	; 0x34
 8003b20:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b26:	e841 2300 	strex	r3, r2, [r1]
 8003b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1e5      	bne.n	8003afe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	3314      	adds	r3, #20
 8003b38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	e853 3f00 	ldrex	r3, [r3]
 8003b40:	613b      	str	r3, [r7, #16]
   return(result);
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	f023 0301 	bic.w	r3, r3, #1
 8003b48:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	3314      	adds	r3, #20
 8003b50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b52:	623a      	str	r2, [r7, #32]
 8003b54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b56:	69f9      	ldr	r1, [r7, #28]
 8003b58:	6a3a      	ldr	r2, [r7, #32]
 8003b5a:	e841 2300 	strex	r3, r2, [r1]
 8003b5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1e5      	bne.n	8003b32 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2220      	movs	r2, #32
 8003b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e00f      	b.n	8003ba2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	bf0c      	ite	eq
 8003b92:	2301      	moveq	r3, #1
 8003b94:	2300      	movne	r3, #0
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	461a      	mov	r2, r3
 8003b9a:	79fb      	ldrb	r3, [r7, #7]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d09f      	beq.n	8003ae0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3740      	adds	r7, #64	; 0x40
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
	...

08003bac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bb0:	b0c0      	sub	sp, #256	; 0x100
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bc8:	68d9      	ldr	r1, [r3, #12]
 8003bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	ea40 0301 	orr.w	r3, r0, r1
 8003bd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	431a      	orrs	r2, r3
 8003be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	431a      	orrs	r2, r3
 8003bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003c04:	f021 010c 	bic.w	r1, r1, #12
 8003c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c12:	430b      	orrs	r3, r1
 8003c14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c26:	6999      	ldr	r1, [r3, #24]
 8003c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	ea40 0301 	orr.w	r3, r0, r1
 8003c32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	4b8f      	ldr	r3, [pc, #572]	; (8003e78 <UART_SetConfig+0x2cc>)
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d005      	beq.n	8003c4c <UART_SetConfig+0xa0>
 8003c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	4b8d      	ldr	r3, [pc, #564]	; (8003e7c <UART_SetConfig+0x2d0>)
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d104      	bne.n	8003c56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c4c:	f7fe fc2c 	bl	80024a8 <HAL_RCC_GetPCLK2Freq>
 8003c50:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003c54:	e003      	b.n	8003c5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c56:	f7fe fc13 	bl	8002480 <HAL_RCC_GetPCLK1Freq>
 8003c5a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c62:	69db      	ldr	r3, [r3, #28]
 8003c64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c68:	f040 810c 	bne.w	8003e84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c70:	2200      	movs	r2, #0
 8003c72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003c76:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003c7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003c7e:	4622      	mov	r2, r4
 8003c80:	462b      	mov	r3, r5
 8003c82:	1891      	adds	r1, r2, r2
 8003c84:	65b9      	str	r1, [r7, #88]	; 0x58
 8003c86:	415b      	adcs	r3, r3
 8003c88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c8e:	4621      	mov	r1, r4
 8003c90:	eb12 0801 	adds.w	r8, r2, r1
 8003c94:	4629      	mov	r1, r5
 8003c96:	eb43 0901 	adc.w	r9, r3, r1
 8003c9a:	f04f 0200 	mov.w	r2, #0
 8003c9e:	f04f 0300 	mov.w	r3, #0
 8003ca2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ca6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003caa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cae:	4690      	mov	r8, r2
 8003cb0:	4699      	mov	r9, r3
 8003cb2:	4623      	mov	r3, r4
 8003cb4:	eb18 0303 	adds.w	r3, r8, r3
 8003cb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003cbc:	462b      	mov	r3, r5
 8003cbe:	eb49 0303 	adc.w	r3, r9, r3
 8003cc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003cd2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003cd6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003cda:	460b      	mov	r3, r1
 8003cdc:	18db      	adds	r3, r3, r3
 8003cde:	653b      	str	r3, [r7, #80]	; 0x50
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	eb42 0303 	adc.w	r3, r2, r3
 8003ce6:	657b      	str	r3, [r7, #84]	; 0x54
 8003ce8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003cec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003cf0:	f7fc feac 	bl	8000a4c <__aeabi_uldivmod>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	4b61      	ldr	r3, [pc, #388]	; (8003e80 <UART_SetConfig+0x2d4>)
 8003cfa:	fba3 2302 	umull	r2, r3, r3, r2
 8003cfe:	095b      	lsrs	r3, r3, #5
 8003d00:	011c      	lsls	r4, r3, #4
 8003d02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d06:	2200      	movs	r2, #0
 8003d08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d0c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003d10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003d14:	4642      	mov	r2, r8
 8003d16:	464b      	mov	r3, r9
 8003d18:	1891      	adds	r1, r2, r2
 8003d1a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003d1c:	415b      	adcs	r3, r3
 8003d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d24:	4641      	mov	r1, r8
 8003d26:	eb12 0a01 	adds.w	sl, r2, r1
 8003d2a:	4649      	mov	r1, r9
 8003d2c:	eb43 0b01 	adc.w	fp, r3, r1
 8003d30:	f04f 0200 	mov.w	r2, #0
 8003d34:	f04f 0300 	mov.w	r3, #0
 8003d38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d44:	4692      	mov	sl, r2
 8003d46:	469b      	mov	fp, r3
 8003d48:	4643      	mov	r3, r8
 8003d4a:	eb1a 0303 	adds.w	r3, sl, r3
 8003d4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d52:	464b      	mov	r3, r9
 8003d54:	eb4b 0303 	adc.w	r3, fp, r3
 8003d58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d68:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003d6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003d70:	460b      	mov	r3, r1
 8003d72:	18db      	adds	r3, r3, r3
 8003d74:	643b      	str	r3, [r7, #64]	; 0x40
 8003d76:	4613      	mov	r3, r2
 8003d78:	eb42 0303 	adc.w	r3, r2, r3
 8003d7c:	647b      	str	r3, [r7, #68]	; 0x44
 8003d7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003d86:	f7fc fe61 	bl	8000a4c <__aeabi_uldivmod>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	4611      	mov	r1, r2
 8003d90:	4b3b      	ldr	r3, [pc, #236]	; (8003e80 <UART_SetConfig+0x2d4>)
 8003d92:	fba3 2301 	umull	r2, r3, r3, r1
 8003d96:	095b      	lsrs	r3, r3, #5
 8003d98:	2264      	movs	r2, #100	; 0x64
 8003d9a:	fb02 f303 	mul.w	r3, r2, r3
 8003d9e:	1acb      	subs	r3, r1, r3
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003da6:	4b36      	ldr	r3, [pc, #216]	; (8003e80 <UART_SetConfig+0x2d4>)
 8003da8:	fba3 2302 	umull	r2, r3, r3, r2
 8003dac:	095b      	lsrs	r3, r3, #5
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003db4:	441c      	add	r4, r3
 8003db6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003dc0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003dc4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003dc8:	4642      	mov	r2, r8
 8003dca:	464b      	mov	r3, r9
 8003dcc:	1891      	adds	r1, r2, r2
 8003dce:	63b9      	str	r1, [r7, #56]	; 0x38
 8003dd0:	415b      	adcs	r3, r3
 8003dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003dd8:	4641      	mov	r1, r8
 8003dda:	1851      	adds	r1, r2, r1
 8003ddc:	6339      	str	r1, [r7, #48]	; 0x30
 8003dde:	4649      	mov	r1, r9
 8003de0:	414b      	adcs	r3, r1
 8003de2:	637b      	str	r3, [r7, #52]	; 0x34
 8003de4:	f04f 0200 	mov.w	r2, #0
 8003de8:	f04f 0300 	mov.w	r3, #0
 8003dec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003df0:	4659      	mov	r1, fp
 8003df2:	00cb      	lsls	r3, r1, #3
 8003df4:	4651      	mov	r1, sl
 8003df6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dfa:	4651      	mov	r1, sl
 8003dfc:	00ca      	lsls	r2, r1, #3
 8003dfe:	4610      	mov	r0, r2
 8003e00:	4619      	mov	r1, r3
 8003e02:	4603      	mov	r3, r0
 8003e04:	4642      	mov	r2, r8
 8003e06:	189b      	adds	r3, r3, r2
 8003e08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e0c:	464b      	mov	r3, r9
 8003e0e:	460a      	mov	r2, r1
 8003e10:	eb42 0303 	adc.w	r3, r2, r3
 8003e14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e24:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003e28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	18db      	adds	r3, r3, r3
 8003e30:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e32:	4613      	mov	r3, r2
 8003e34:	eb42 0303 	adc.w	r3, r2, r3
 8003e38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003e42:	f7fc fe03 	bl	8000a4c <__aeabi_uldivmod>
 8003e46:	4602      	mov	r2, r0
 8003e48:	460b      	mov	r3, r1
 8003e4a:	4b0d      	ldr	r3, [pc, #52]	; (8003e80 <UART_SetConfig+0x2d4>)
 8003e4c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e50:	095b      	lsrs	r3, r3, #5
 8003e52:	2164      	movs	r1, #100	; 0x64
 8003e54:	fb01 f303 	mul.w	r3, r1, r3
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	3332      	adds	r3, #50	; 0x32
 8003e5e:	4a08      	ldr	r2, [pc, #32]	; (8003e80 <UART_SetConfig+0x2d4>)
 8003e60:	fba2 2303 	umull	r2, r3, r2, r3
 8003e64:	095b      	lsrs	r3, r3, #5
 8003e66:	f003 0207 	and.w	r2, r3, #7
 8003e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4422      	add	r2, r4
 8003e72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e74:	e106      	b.n	8004084 <UART_SetConfig+0x4d8>
 8003e76:	bf00      	nop
 8003e78:	40011000 	.word	0x40011000
 8003e7c:	40011400 	.word	0x40011400
 8003e80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003e8e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003e92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003e96:	4642      	mov	r2, r8
 8003e98:	464b      	mov	r3, r9
 8003e9a:	1891      	adds	r1, r2, r2
 8003e9c:	6239      	str	r1, [r7, #32]
 8003e9e:	415b      	adcs	r3, r3
 8003ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ea6:	4641      	mov	r1, r8
 8003ea8:	1854      	adds	r4, r2, r1
 8003eaa:	4649      	mov	r1, r9
 8003eac:	eb43 0501 	adc.w	r5, r3, r1
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	f04f 0300 	mov.w	r3, #0
 8003eb8:	00eb      	lsls	r3, r5, #3
 8003eba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ebe:	00e2      	lsls	r2, r4, #3
 8003ec0:	4614      	mov	r4, r2
 8003ec2:	461d      	mov	r5, r3
 8003ec4:	4643      	mov	r3, r8
 8003ec6:	18e3      	adds	r3, r4, r3
 8003ec8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ecc:	464b      	mov	r3, r9
 8003ece:	eb45 0303 	adc.w	r3, r5, r3
 8003ed2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ee2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ee6:	f04f 0200 	mov.w	r2, #0
 8003eea:	f04f 0300 	mov.w	r3, #0
 8003eee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003ef2:	4629      	mov	r1, r5
 8003ef4:	008b      	lsls	r3, r1, #2
 8003ef6:	4621      	mov	r1, r4
 8003ef8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003efc:	4621      	mov	r1, r4
 8003efe:	008a      	lsls	r2, r1, #2
 8003f00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003f04:	f7fc fda2 	bl	8000a4c <__aeabi_uldivmod>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	4b60      	ldr	r3, [pc, #384]	; (8004090 <UART_SetConfig+0x4e4>)
 8003f0e:	fba3 2302 	umull	r2, r3, r3, r2
 8003f12:	095b      	lsrs	r3, r3, #5
 8003f14:	011c      	lsls	r4, r3, #4
 8003f16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003f24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003f28:	4642      	mov	r2, r8
 8003f2a:	464b      	mov	r3, r9
 8003f2c:	1891      	adds	r1, r2, r2
 8003f2e:	61b9      	str	r1, [r7, #24]
 8003f30:	415b      	adcs	r3, r3
 8003f32:	61fb      	str	r3, [r7, #28]
 8003f34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f38:	4641      	mov	r1, r8
 8003f3a:	1851      	adds	r1, r2, r1
 8003f3c:	6139      	str	r1, [r7, #16]
 8003f3e:	4649      	mov	r1, r9
 8003f40:	414b      	adcs	r3, r1
 8003f42:	617b      	str	r3, [r7, #20]
 8003f44:	f04f 0200 	mov.w	r2, #0
 8003f48:	f04f 0300 	mov.w	r3, #0
 8003f4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f50:	4659      	mov	r1, fp
 8003f52:	00cb      	lsls	r3, r1, #3
 8003f54:	4651      	mov	r1, sl
 8003f56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f5a:	4651      	mov	r1, sl
 8003f5c:	00ca      	lsls	r2, r1, #3
 8003f5e:	4610      	mov	r0, r2
 8003f60:	4619      	mov	r1, r3
 8003f62:	4603      	mov	r3, r0
 8003f64:	4642      	mov	r2, r8
 8003f66:	189b      	adds	r3, r3, r2
 8003f68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f6c:	464b      	mov	r3, r9
 8003f6e:	460a      	mov	r2, r1
 8003f70:	eb42 0303 	adc.w	r3, r2, r3
 8003f74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f82:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003f84:	f04f 0200 	mov.w	r2, #0
 8003f88:	f04f 0300 	mov.w	r3, #0
 8003f8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003f90:	4649      	mov	r1, r9
 8003f92:	008b      	lsls	r3, r1, #2
 8003f94:	4641      	mov	r1, r8
 8003f96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f9a:	4641      	mov	r1, r8
 8003f9c:	008a      	lsls	r2, r1, #2
 8003f9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003fa2:	f7fc fd53 	bl	8000a4c <__aeabi_uldivmod>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	460b      	mov	r3, r1
 8003faa:	4611      	mov	r1, r2
 8003fac:	4b38      	ldr	r3, [pc, #224]	; (8004090 <UART_SetConfig+0x4e4>)
 8003fae:	fba3 2301 	umull	r2, r3, r3, r1
 8003fb2:	095b      	lsrs	r3, r3, #5
 8003fb4:	2264      	movs	r2, #100	; 0x64
 8003fb6:	fb02 f303 	mul.w	r3, r2, r3
 8003fba:	1acb      	subs	r3, r1, r3
 8003fbc:	011b      	lsls	r3, r3, #4
 8003fbe:	3332      	adds	r3, #50	; 0x32
 8003fc0:	4a33      	ldr	r2, [pc, #204]	; (8004090 <UART_SetConfig+0x4e4>)
 8003fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc6:	095b      	lsrs	r3, r3, #5
 8003fc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fcc:	441c      	add	r4, r3
 8003fce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	673b      	str	r3, [r7, #112]	; 0x70
 8003fd6:	677a      	str	r2, [r7, #116]	; 0x74
 8003fd8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003fdc:	4642      	mov	r2, r8
 8003fde:	464b      	mov	r3, r9
 8003fe0:	1891      	adds	r1, r2, r2
 8003fe2:	60b9      	str	r1, [r7, #8]
 8003fe4:	415b      	adcs	r3, r3
 8003fe6:	60fb      	str	r3, [r7, #12]
 8003fe8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fec:	4641      	mov	r1, r8
 8003fee:	1851      	adds	r1, r2, r1
 8003ff0:	6039      	str	r1, [r7, #0]
 8003ff2:	4649      	mov	r1, r9
 8003ff4:	414b      	adcs	r3, r1
 8003ff6:	607b      	str	r3, [r7, #4]
 8003ff8:	f04f 0200 	mov.w	r2, #0
 8003ffc:	f04f 0300 	mov.w	r3, #0
 8004000:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004004:	4659      	mov	r1, fp
 8004006:	00cb      	lsls	r3, r1, #3
 8004008:	4651      	mov	r1, sl
 800400a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800400e:	4651      	mov	r1, sl
 8004010:	00ca      	lsls	r2, r1, #3
 8004012:	4610      	mov	r0, r2
 8004014:	4619      	mov	r1, r3
 8004016:	4603      	mov	r3, r0
 8004018:	4642      	mov	r2, r8
 800401a:	189b      	adds	r3, r3, r2
 800401c:	66bb      	str	r3, [r7, #104]	; 0x68
 800401e:	464b      	mov	r3, r9
 8004020:	460a      	mov	r2, r1
 8004022:	eb42 0303 	adc.w	r3, r2, r3
 8004026:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	663b      	str	r3, [r7, #96]	; 0x60
 8004032:	667a      	str	r2, [r7, #100]	; 0x64
 8004034:	f04f 0200 	mov.w	r2, #0
 8004038:	f04f 0300 	mov.w	r3, #0
 800403c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004040:	4649      	mov	r1, r9
 8004042:	008b      	lsls	r3, r1, #2
 8004044:	4641      	mov	r1, r8
 8004046:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800404a:	4641      	mov	r1, r8
 800404c:	008a      	lsls	r2, r1, #2
 800404e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004052:	f7fc fcfb 	bl	8000a4c <__aeabi_uldivmod>
 8004056:	4602      	mov	r2, r0
 8004058:	460b      	mov	r3, r1
 800405a:	4b0d      	ldr	r3, [pc, #52]	; (8004090 <UART_SetConfig+0x4e4>)
 800405c:	fba3 1302 	umull	r1, r3, r3, r2
 8004060:	095b      	lsrs	r3, r3, #5
 8004062:	2164      	movs	r1, #100	; 0x64
 8004064:	fb01 f303 	mul.w	r3, r1, r3
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	011b      	lsls	r3, r3, #4
 800406c:	3332      	adds	r3, #50	; 0x32
 800406e:	4a08      	ldr	r2, [pc, #32]	; (8004090 <UART_SetConfig+0x4e4>)
 8004070:	fba2 2303 	umull	r2, r3, r2, r3
 8004074:	095b      	lsrs	r3, r3, #5
 8004076:	f003 020f 	and.w	r2, r3, #15
 800407a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4422      	add	r2, r4
 8004082:	609a      	str	r2, [r3, #8]
}
 8004084:	bf00      	nop
 8004086:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800408a:	46bd      	mov	sp, r7
 800408c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004090:	51eb851f 	.word	0x51eb851f

08004094 <std>:
 8004094:	2300      	movs	r3, #0
 8004096:	b510      	push	{r4, lr}
 8004098:	4604      	mov	r4, r0
 800409a:	e9c0 3300 	strd	r3, r3, [r0]
 800409e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80040a2:	6083      	str	r3, [r0, #8]
 80040a4:	8181      	strh	r1, [r0, #12]
 80040a6:	6643      	str	r3, [r0, #100]	; 0x64
 80040a8:	81c2      	strh	r2, [r0, #14]
 80040aa:	6183      	str	r3, [r0, #24]
 80040ac:	4619      	mov	r1, r3
 80040ae:	2208      	movs	r2, #8
 80040b0:	305c      	adds	r0, #92	; 0x5c
 80040b2:	f000 f906 	bl	80042c2 <memset>
 80040b6:	4b0d      	ldr	r3, [pc, #52]	; (80040ec <std+0x58>)
 80040b8:	6263      	str	r3, [r4, #36]	; 0x24
 80040ba:	4b0d      	ldr	r3, [pc, #52]	; (80040f0 <std+0x5c>)
 80040bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80040be:	4b0d      	ldr	r3, [pc, #52]	; (80040f4 <std+0x60>)
 80040c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80040c2:	4b0d      	ldr	r3, [pc, #52]	; (80040f8 <std+0x64>)
 80040c4:	6323      	str	r3, [r4, #48]	; 0x30
 80040c6:	4b0d      	ldr	r3, [pc, #52]	; (80040fc <std+0x68>)
 80040c8:	6224      	str	r4, [r4, #32]
 80040ca:	429c      	cmp	r4, r3
 80040cc:	d006      	beq.n	80040dc <std+0x48>
 80040ce:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80040d2:	4294      	cmp	r4, r2
 80040d4:	d002      	beq.n	80040dc <std+0x48>
 80040d6:	33d0      	adds	r3, #208	; 0xd0
 80040d8:	429c      	cmp	r4, r3
 80040da:	d105      	bne.n	80040e8 <std+0x54>
 80040dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80040e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040e4:	f000 b966 	b.w	80043b4 <__retarget_lock_init_recursive>
 80040e8:	bd10      	pop	{r4, pc}
 80040ea:	bf00      	nop
 80040ec:	0800423d 	.word	0x0800423d
 80040f0:	0800425f 	.word	0x0800425f
 80040f4:	08004297 	.word	0x08004297
 80040f8:	080042bb 	.word	0x080042bb
 80040fc:	2000016c 	.word	0x2000016c

08004100 <stdio_exit_handler>:
 8004100:	4a02      	ldr	r2, [pc, #8]	; (800410c <stdio_exit_handler+0xc>)
 8004102:	4903      	ldr	r1, [pc, #12]	; (8004110 <stdio_exit_handler+0x10>)
 8004104:	4803      	ldr	r0, [pc, #12]	; (8004114 <stdio_exit_handler+0x14>)
 8004106:	f000 b869 	b.w	80041dc <_fwalk_sglue>
 800410a:	bf00      	nop
 800410c:	2000000c 	.word	0x2000000c
 8004110:	08004c61 	.word	0x08004c61
 8004114:	20000018 	.word	0x20000018

08004118 <cleanup_stdio>:
 8004118:	6841      	ldr	r1, [r0, #4]
 800411a:	4b0c      	ldr	r3, [pc, #48]	; (800414c <cleanup_stdio+0x34>)
 800411c:	4299      	cmp	r1, r3
 800411e:	b510      	push	{r4, lr}
 8004120:	4604      	mov	r4, r0
 8004122:	d001      	beq.n	8004128 <cleanup_stdio+0x10>
 8004124:	f000 fd9c 	bl	8004c60 <_fflush_r>
 8004128:	68a1      	ldr	r1, [r4, #8]
 800412a:	4b09      	ldr	r3, [pc, #36]	; (8004150 <cleanup_stdio+0x38>)
 800412c:	4299      	cmp	r1, r3
 800412e:	d002      	beq.n	8004136 <cleanup_stdio+0x1e>
 8004130:	4620      	mov	r0, r4
 8004132:	f000 fd95 	bl	8004c60 <_fflush_r>
 8004136:	68e1      	ldr	r1, [r4, #12]
 8004138:	4b06      	ldr	r3, [pc, #24]	; (8004154 <cleanup_stdio+0x3c>)
 800413a:	4299      	cmp	r1, r3
 800413c:	d004      	beq.n	8004148 <cleanup_stdio+0x30>
 800413e:	4620      	mov	r0, r4
 8004140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004144:	f000 bd8c 	b.w	8004c60 <_fflush_r>
 8004148:	bd10      	pop	{r4, pc}
 800414a:	bf00      	nop
 800414c:	2000016c 	.word	0x2000016c
 8004150:	200001d4 	.word	0x200001d4
 8004154:	2000023c 	.word	0x2000023c

08004158 <global_stdio_init.part.0>:
 8004158:	b510      	push	{r4, lr}
 800415a:	4b0b      	ldr	r3, [pc, #44]	; (8004188 <global_stdio_init.part.0+0x30>)
 800415c:	4c0b      	ldr	r4, [pc, #44]	; (800418c <global_stdio_init.part.0+0x34>)
 800415e:	4a0c      	ldr	r2, [pc, #48]	; (8004190 <global_stdio_init.part.0+0x38>)
 8004160:	601a      	str	r2, [r3, #0]
 8004162:	4620      	mov	r0, r4
 8004164:	2200      	movs	r2, #0
 8004166:	2104      	movs	r1, #4
 8004168:	f7ff ff94 	bl	8004094 <std>
 800416c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004170:	2201      	movs	r2, #1
 8004172:	2109      	movs	r1, #9
 8004174:	f7ff ff8e 	bl	8004094 <std>
 8004178:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800417c:	2202      	movs	r2, #2
 800417e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004182:	2112      	movs	r1, #18
 8004184:	f7ff bf86 	b.w	8004094 <std>
 8004188:	200002a4 	.word	0x200002a4
 800418c:	2000016c 	.word	0x2000016c
 8004190:	08004101 	.word	0x08004101

08004194 <__sfp_lock_acquire>:
 8004194:	4801      	ldr	r0, [pc, #4]	; (800419c <__sfp_lock_acquire+0x8>)
 8004196:	f000 b90e 	b.w	80043b6 <__retarget_lock_acquire_recursive>
 800419a:	bf00      	nop
 800419c:	200002ad 	.word	0x200002ad

080041a0 <__sfp_lock_release>:
 80041a0:	4801      	ldr	r0, [pc, #4]	; (80041a8 <__sfp_lock_release+0x8>)
 80041a2:	f000 b909 	b.w	80043b8 <__retarget_lock_release_recursive>
 80041a6:	bf00      	nop
 80041a8:	200002ad 	.word	0x200002ad

080041ac <__sinit>:
 80041ac:	b510      	push	{r4, lr}
 80041ae:	4604      	mov	r4, r0
 80041b0:	f7ff fff0 	bl	8004194 <__sfp_lock_acquire>
 80041b4:	6a23      	ldr	r3, [r4, #32]
 80041b6:	b11b      	cbz	r3, 80041c0 <__sinit+0x14>
 80041b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041bc:	f7ff bff0 	b.w	80041a0 <__sfp_lock_release>
 80041c0:	4b04      	ldr	r3, [pc, #16]	; (80041d4 <__sinit+0x28>)
 80041c2:	6223      	str	r3, [r4, #32]
 80041c4:	4b04      	ldr	r3, [pc, #16]	; (80041d8 <__sinit+0x2c>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1f5      	bne.n	80041b8 <__sinit+0xc>
 80041cc:	f7ff ffc4 	bl	8004158 <global_stdio_init.part.0>
 80041d0:	e7f2      	b.n	80041b8 <__sinit+0xc>
 80041d2:	bf00      	nop
 80041d4:	08004119 	.word	0x08004119
 80041d8:	200002a4 	.word	0x200002a4

080041dc <_fwalk_sglue>:
 80041dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041e0:	4607      	mov	r7, r0
 80041e2:	4688      	mov	r8, r1
 80041e4:	4614      	mov	r4, r2
 80041e6:	2600      	movs	r6, #0
 80041e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80041ec:	f1b9 0901 	subs.w	r9, r9, #1
 80041f0:	d505      	bpl.n	80041fe <_fwalk_sglue+0x22>
 80041f2:	6824      	ldr	r4, [r4, #0]
 80041f4:	2c00      	cmp	r4, #0
 80041f6:	d1f7      	bne.n	80041e8 <_fwalk_sglue+0xc>
 80041f8:	4630      	mov	r0, r6
 80041fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041fe:	89ab      	ldrh	r3, [r5, #12]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d907      	bls.n	8004214 <_fwalk_sglue+0x38>
 8004204:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004208:	3301      	adds	r3, #1
 800420a:	d003      	beq.n	8004214 <_fwalk_sglue+0x38>
 800420c:	4629      	mov	r1, r5
 800420e:	4638      	mov	r0, r7
 8004210:	47c0      	blx	r8
 8004212:	4306      	orrs	r6, r0
 8004214:	3568      	adds	r5, #104	; 0x68
 8004216:	e7e9      	b.n	80041ec <_fwalk_sglue+0x10>

08004218 <iprintf>:
 8004218:	b40f      	push	{r0, r1, r2, r3}
 800421a:	b507      	push	{r0, r1, r2, lr}
 800421c:	4906      	ldr	r1, [pc, #24]	; (8004238 <iprintf+0x20>)
 800421e:	ab04      	add	r3, sp, #16
 8004220:	6808      	ldr	r0, [r1, #0]
 8004222:	f853 2b04 	ldr.w	r2, [r3], #4
 8004226:	6881      	ldr	r1, [r0, #8]
 8004228:	9301      	str	r3, [sp, #4]
 800422a:	f000 f9e9 	bl	8004600 <_vfiprintf_r>
 800422e:	b003      	add	sp, #12
 8004230:	f85d eb04 	ldr.w	lr, [sp], #4
 8004234:	b004      	add	sp, #16
 8004236:	4770      	bx	lr
 8004238:	20000064 	.word	0x20000064

0800423c <__sread>:
 800423c:	b510      	push	{r4, lr}
 800423e:	460c      	mov	r4, r1
 8004240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004244:	f000 f868 	bl	8004318 <_read_r>
 8004248:	2800      	cmp	r0, #0
 800424a:	bfab      	itete	ge
 800424c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800424e:	89a3      	ldrhlt	r3, [r4, #12]
 8004250:	181b      	addge	r3, r3, r0
 8004252:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004256:	bfac      	ite	ge
 8004258:	6563      	strge	r3, [r4, #84]	; 0x54
 800425a:	81a3      	strhlt	r3, [r4, #12]
 800425c:	bd10      	pop	{r4, pc}

0800425e <__swrite>:
 800425e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004262:	461f      	mov	r7, r3
 8004264:	898b      	ldrh	r3, [r1, #12]
 8004266:	05db      	lsls	r3, r3, #23
 8004268:	4605      	mov	r5, r0
 800426a:	460c      	mov	r4, r1
 800426c:	4616      	mov	r6, r2
 800426e:	d505      	bpl.n	800427c <__swrite+0x1e>
 8004270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004274:	2302      	movs	r3, #2
 8004276:	2200      	movs	r2, #0
 8004278:	f000 f83c 	bl	80042f4 <_lseek_r>
 800427c:	89a3      	ldrh	r3, [r4, #12]
 800427e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004282:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004286:	81a3      	strh	r3, [r4, #12]
 8004288:	4632      	mov	r2, r6
 800428a:	463b      	mov	r3, r7
 800428c:	4628      	mov	r0, r5
 800428e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004292:	f000 b853 	b.w	800433c <_write_r>

08004296 <__sseek>:
 8004296:	b510      	push	{r4, lr}
 8004298:	460c      	mov	r4, r1
 800429a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800429e:	f000 f829 	bl	80042f4 <_lseek_r>
 80042a2:	1c43      	adds	r3, r0, #1
 80042a4:	89a3      	ldrh	r3, [r4, #12]
 80042a6:	bf15      	itete	ne
 80042a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80042aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80042ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80042b2:	81a3      	strheq	r3, [r4, #12]
 80042b4:	bf18      	it	ne
 80042b6:	81a3      	strhne	r3, [r4, #12]
 80042b8:	bd10      	pop	{r4, pc}

080042ba <__sclose>:
 80042ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042be:	f000 b809 	b.w	80042d4 <_close_r>

080042c2 <memset>:
 80042c2:	4402      	add	r2, r0
 80042c4:	4603      	mov	r3, r0
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d100      	bne.n	80042cc <memset+0xa>
 80042ca:	4770      	bx	lr
 80042cc:	f803 1b01 	strb.w	r1, [r3], #1
 80042d0:	e7f9      	b.n	80042c6 <memset+0x4>
	...

080042d4 <_close_r>:
 80042d4:	b538      	push	{r3, r4, r5, lr}
 80042d6:	4d06      	ldr	r5, [pc, #24]	; (80042f0 <_close_r+0x1c>)
 80042d8:	2300      	movs	r3, #0
 80042da:	4604      	mov	r4, r0
 80042dc:	4608      	mov	r0, r1
 80042de:	602b      	str	r3, [r5, #0]
 80042e0:	f7fc fee7 	bl	80010b2 <_close>
 80042e4:	1c43      	adds	r3, r0, #1
 80042e6:	d102      	bne.n	80042ee <_close_r+0x1a>
 80042e8:	682b      	ldr	r3, [r5, #0]
 80042ea:	b103      	cbz	r3, 80042ee <_close_r+0x1a>
 80042ec:	6023      	str	r3, [r4, #0]
 80042ee:	bd38      	pop	{r3, r4, r5, pc}
 80042f0:	200002a8 	.word	0x200002a8

080042f4 <_lseek_r>:
 80042f4:	b538      	push	{r3, r4, r5, lr}
 80042f6:	4d07      	ldr	r5, [pc, #28]	; (8004314 <_lseek_r+0x20>)
 80042f8:	4604      	mov	r4, r0
 80042fa:	4608      	mov	r0, r1
 80042fc:	4611      	mov	r1, r2
 80042fe:	2200      	movs	r2, #0
 8004300:	602a      	str	r2, [r5, #0]
 8004302:	461a      	mov	r2, r3
 8004304:	f7fc fefc 	bl	8001100 <_lseek>
 8004308:	1c43      	adds	r3, r0, #1
 800430a:	d102      	bne.n	8004312 <_lseek_r+0x1e>
 800430c:	682b      	ldr	r3, [r5, #0]
 800430e:	b103      	cbz	r3, 8004312 <_lseek_r+0x1e>
 8004310:	6023      	str	r3, [r4, #0]
 8004312:	bd38      	pop	{r3, r4, r5, pc}
 8004314:	200002a8 	.word	0x200002a8

08004318 <_read_r>:
 8004318:	b538      	push	{r3, r4, r5, lr}
 800431a:	4d07      	ldr	r5, [pc, #28]	; (8004338 <_read_r+0x20>)
 800431c:	4604      	mov	r4, r0
 800431e:	4608      	mov	r0, r1
 8004320:	4611      	mov	r1, r2
 8004322:	2200      	movs	r2, #0
 8004324:	602a      	str	r2, [r5, #0]
 8004326:	461a      	mov	r2, r3
 8004328:	f7fc fe8a 	bl	8001040 <_read>
 800432c:	1c43      	adds	r3, r0, #1
 800432e:	d102      	bne.n	8004336 <_read_r+0x1e>
 8004330:	682b      	ldr	r3, [r5, #0]
 8004332:	b103      	cbz	r3, 8004336 <_read_r+0x1e>
 8004334:	6023      	str	r3, [r4, #0]
 8004336:	bd38      	pop	{r3, r4, r5, pc}
 8004338:	200002a8 	.word	0x200002a8

0800433c <_write_r>:
 800433c:	b538      	push	{r3, r4, r5, lr}
 800433e:	4d07      	ldr	r5, [pc, #28]	; (800435c <_write_r+0x20>)
 8004340:	4604      	mov	r4, r0
 8004342:	4608      	mov	r0, r1
 8004344:	4611      	mov	r1, r2
 8004346:	2200      	movs	r2, #0
 8004348:	602a      	str	r2, [r5, #0]
 800434a:	461a      	mov	r2, r3
 800434c:	f7fc fe95 	bl	800107a <_write>
 8004350:	1c43      	adds	r3, r0, #1
 8004352:	d102      	bne.n	800435a <_write_r+0x1e>
 8004354:	682b      	ldr	r3, [r5, #0]
 8004356:	b103      	cbz	r3, 800435a <_write_r+0x1e>
 8004358:	6023      	str	r3, [r4, #0]
 800435a:	bd38      	pop	{r3, r4, r5, pc}
 800435c:	200002a8 	.word	0x200002a8

08004360 <__errno>:
 8004360:	4b01      	ldr	r3, [pc, #4]	; (8004368 <__errno+0x8>)
 8004362:	6818      	ldr	r0, [r3, #0]
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	20000064 	.word	0x20000064

0800436c <__libc_init_array>:
 800436c:	b570      	push	{r4, r5, r6, lr}
 800436e:	4d0d      	ldr	r5, [pc, #52]	; (80043a4 <__libc_init_array+0x38>)
 8004370:	4c0d      	ldr	r4, [pc, #52]	; (80043a8 <__libc_init_array+0x3c>)
 8004372:	1b64      	subs	r4, r4, r5
 8004374:	10a4      	asrs	r4, r4, #2
 8004376:	2600      	movs	r6, #0
 8004378:	42a6      	cmp	r6, r4
 800437a:	d109      	bne.n	8004390 <__libc_init_array+0x24>
 800437c:	4d0b      	ldr	r5, [pc, #44]	; (80043ac <__libc_init_array+0x40>)
 800437e:	4c0c      	ldr	r4, [pc, #48]	; (80043b0 <__libc_init_array+0x44>)
 8004380:	f000 fdc0 	bl	8004f04 <_init>
 8004384:	1b64      	subs	r4, r4, r5
 8004386:	10a4      	asrs	r4, r4, #2
 8004388:	2600      	movs	r6, #0
 800438a:	42a6      	cmp	r6, r4
 800438c:	d105      	bne.n	800439a <__libc_init_array+0x2e>
 800438e:	bd70      	pop	{r4, r5, r6, pc}
 8004390:	f855 3b04 	ldr.w	r3, [r5], #4
 8004394:	4798      	blx	r3
 8004396:	3601      	adds	r6, #1
 8004398:	e7ee      	b.n	8004378 <__libc_init_array+0xc>
 800439a:	f855 3b04 	ldr.w	r3, [r5], #4
 800439e:	4798      	blx	r3
 80043a0:	3601      	adds	r6, #1
 80043a2:	e7f2      	b.n	800438a <__libc_init_array+0x1e>
 80043a4:	08004f8c 	.word	0x08004f8c
 80043a8:	08004f8c 	.word	0x08004f8c
 80043ac:	08004f8c 	.word	0x08004f8c
 80043b0:	08004f90 	.word	0x08004f90

080043b4 <__retarget_lock_init_recursive>:
 80043b4:	4770      	bx	lr

080043b6 <__retarget_lock_acquire_recursive>:
 80043b6:	4770      	bx	lr

080043b8 <__retarget_lock_release_recursive>:
 80043b8:	4770      	bx	lr
	...

080043bc <_free_r>:
 80043bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80043be:	2900      	cmp	r1, #0
 80043c0:	d044      	beq.n	800444c <_free_r+0x90>
 80043c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043c6:	9001      	str	r0, [sp, #4]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f1a1 0404 	sub.w	r4, r1, #4
 80043ce:	bfb8      	it	lt
 80043d0:	18e4      	addlt	r4, r4, r3
 80043d2:	f000 f8df 	bl	8004594 <__malloc_lock>
 80043d6:	4a1e      	ldr	r2, [pc, #120]	; (8004450 <_free_r+0x94>)
 80043d8:	9801      	ldr	r0, [sp, #4]
 80043da:	6813      	ldr	r3, [r2, #0]
 80043dc:	b933      	cbnz	r3, 80043ec <_free_r+0x30>
 80043de:	6063      	str	r3, [r4, #4]
 80043e0:	6014      	str	r4, [r2, #0]
 80043e2:	b003      	add	sp, #12
 80043e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80043e8:	f000 b8da 	b.w	80045a0 <__malloc_unlock>
 80043ec:	42a3      	cmp	r3, r4
 80043ee:	d908      	bls.n	8004402 <_free_r+0x46>
 80043f0:	6825      	ldr	r5, [r4, #0]
 80043f2:	1961      	adds	r1, r4, r5
 80043f4:	428b      	cmp	r3, r1
 80043f6:	bf01      	itttt	eq
 80043f8:	6819      	ldreq	r1, [r3, #0]
 80043fa:	685b      	ldreq	r3, [r3, #4]
 80043fc:	1949      	addeq	r1, r1, r5
 80043fe:	6021      	streq	r1, [r4, #0]
 8004400:	e7ed      	b.n	80043de <_free_r+0x22>
 8004402:	461a      	mov	r2, r3
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	b10b      	cbz	r3, 800440c <_free_r+0x50>
 8004408:	42a3      	cmp	r3, r4
 800440a:	d9fa      	bls.n	8004402 <_free_r+0x46>
 800440c:	6811      	ldr	r1, [r2, #0]
 800440e:	1855      	adds	r5, r2, r1
 8004410:	42a5      	cmp	r5, r4
 8004412:	d10b      	bne.n	800442c <_free_r+0x70>
 8004414:	6824      	ldr	r4, [r4, #0]
 8004416:	4421      	add	r1, r4
 8004418:	1854      	adds	r4, r2, r1
 800441a:	42a3      	cmp	r3, r4
 800441c:	6011      	str	r1, [r2, #0]
 800441e:	d1e0      	bne.n	80043e2 <_free_r+0x26>
 8004420:	681c      	ldr	r4, [r3, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	6053      	str	r3, [r2, #4]
 8004426:	440c      	add	r4, r1
 8004428:	6014      	str	r4, [r2, #0]
 800442a:	e7da      	b.n	80043e2 <_free_r+0x26>
 800442c:	d902      	bls.n	8004434 <_free_r+0x78>
 800442e:	230c      	movs	r3, #12
 8004430:	6003      	str	r3, [r0, #0]
 8004432:	e7d6      	b.n	80043e2 <_free_r+0x26>
 8004434:	6825      	ldr	r5, [r4, #0]
 8004436:	1961      	adds	r1, r4, r5
 8004438:	428b      	cmp	r3, r1
 800443a:	bf04      	itt	eq
 800443c:	6819      	ldreq	r1, [r3, #0]
 800443e:	685b      	ldreq	r3, [r3, #4]
 8004440:	6063      	str	r3, [r4, #4]
 8004442:	bf04      	itt	eq
 8004444:	1949      	addeq	r1, r1, r5
 8004446:	6021      	streq	r1, [r4, #0]
 8004448:	6054      	str	r4, [r2, #4]
 800444a:	e7ca      	b.n	80043e2 <_free_r+0x26>
 800444c:	b003      	add	sp, #12
 800444e:	bd30      	pop	{r4, r5, pc}
 8004450:	200002b0 	.word	0x200002b0

08004454 <sbrk_aligned>:
 8004454:	b570      	push	{r4, r5, r6, lr}
 8004456:	4e0e      	ldr	r6, [pc, #56]	; (8004490 <sbrk_aligned+0x3c>)
 8004458:	460c      	mov	r4, r1
 800445a:	6831      	ldr	r1, [r6, #0]
 800445c:	4605      	mov	r5, r0
 800445e:	b911      	cbnz	r1, 8004466 <sbrk_aligned+0x12>
 8004460:	f000 fcbc 	bl	8004ddc <_sbrk_r>
 8004464:	6030      	str	r0, [r6, #0]
 8004466:	4621      	mov	r1, r4
 8004468:	4628      	mov	r0, r5
 800446a:	f000 fcb7 	bl	8004ddc <_sbrk_r>
 800446e:	1c43      	adds	r3, r0, #1
 8004470:	d00a      	beq.n	8004488 <sbrk_aligned+0x34>
 8004472:	1cc4      	adds	r4, r0, #3
 8004474:	f024 0403 	bic.w	r4, r4, #3
 8004478:	42a0      	cmp	r0, r4
 800447a:	d007      	beq.n	800448c <sbrk_aligned+0x38>
 800447c:	1a21      	subs	r1, r4, r0
 800447e:	4628      	mov	r0, r5
 8004480:	f000 fcac 	bl	8004ddc <_sbrk_r>
 8004484:	3001      	adds	r0, #1
 8004486:	d101      	bne.n	800448c <sbrk_aligned+0x38>
 8004488:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800448c:	4620      	mov	r0, r4
 800448e:	bd70      	pop	{r4, r5, r6, pc}
 8004490:	200002b4 	.word	0x200002b4

08004494 <_malloc_r>:
 8004494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004498:	1ccd      	adds	r5, r1, #3
 800449a:	f025 0503 	bic.w	r5, r5, #3
 800449e:	3508      	adds	r5, #8
 80044a0:	2d0c      	cmp	r5, #12
 80044a2:	bf38      	it	cc
 80044a4:	250c      	movcc	r5, #12
 80044a6:	2d00      	cmp	r5, #0
 80044a8:	4607      	mov	r7, r0
 80044aa:	db01      	blt.n	80044b0 <_malloc_r+0x1c>
 80044ac:	42a9      	cmp	r1, r5
 80044ae:	d905      	bls.n	80044bc <_malloc_r+0x28>
 80044b0:	230c      	movs	r3, #12
 80044b2:	603b      	str	r3, [r7, #0]
 80044b4:	2600      	movs	r6, #0
 80044b6:	4630      	mov	r0, r6
 80044b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004590 <_malloc_r+0xfc>
 80044c0:	f000 f868 	bl	8004594 <__malloc_lock>
 80044c4:	f8d8 3000 	ldr.w	r3, [r8]
 80044c8:	461c      	mov	r4, r3
 80044ca:	bb5c      	cbnz	r4, 8004524 <_malloc_r+0x90>
 80044cc:	4629      	mov	r1, r5
 80044ce:	4638      	mov	r0, r7
 80044d0:	f7ff ffc0 	bl	8004454 <sbrk_aligned>
 80044d4:	1c43      	adds	r3, r0, #1
 80044d6:	4604      	mov	r4, r0
 80044d8:	d155      	bne.n	8004586 <_malloc_r+0xf2>
 80044da:	f8d8 4000 	ldr.w	r4, [r8]
 80044de:	4626      	mov	r6, r4
 80044e0:	2e00      	cmp	r6, #0
 80044e2:	d145      	bne.n	8004570 <_malloc_r+0xdc>
 80044e4:	2c00      	cmp	r4, #0
 80044e6:	d048      	beq.n	800457a <_malloc_r+0xe6>
 80044e8:	6823      	ldr	r3, [r4, #0]
 80044ea:	4631      	mov	r1, r6
 80044ec:	4638      	mov	r0, r7
 80044ee:	eb04 0903 	add.w	r9, r4, r3
 80044f2:	f000 fc73 	bl	8004ddc <_sbrk_r>
 80044f6:	4581      	cmp	r9, r0
 80044f8:	d13f      	bne.n	800457a <_malloc_r+0xe6>
 80044fa:	6821      	ldr	r1, [r4, #0]
 80044fc:	1a6d      	subs	r5, r5, r1
 80044fe:	4629      	mov	r1, r5
 8004500:	4638      	mov	r0, r7
 8004502:	f7ff ffa7 	bl	8004454 <sbrk_aligned>
 8004506:	3001      	adds	r0, #1
 8004508:	d037      	beq.n	800457a <_malloc_r+0xe6>
 800450a:	6823      	ldr	r3, [r4, #0]
 800450c:	442b      	add	r3, r5
 800450e:	6023      	str	r3, [r4, #0]
 8004510:	f8d8 3000 	ldr.w	r3, [r8]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d038      	beq.n	800458a <_malloc_r+0xf6>
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	42a2      	cmp	r2, r4
 800451c:	d12b      	bne.n	8004576 <_malloc_r+0xe2>
 800451e:	2200      	movs	r2, #0
 8004520:	605a      	str	r2, [r3, #4]
 8004522:	e00f      	b.n	8004544 <_malloc_r+0xb0>
 8004524:	6822      	ldr	r2, [r4, #0]
 8004526:	1b52      	subs	r2, r2, r5
 8004528:	d41f      	bmi.n	800456a <_malloc_r+0xd6>
 800452a:	2a0b      	cmp	r2, #11
 800452c:	d917      	bls.n	800455e <_malloc_r+0xca>
 800452e:	1961      	adds	r1, r4, r5
 8004530:	42a3      	cmp	r3, r4
 8004532:	6025      	str	r5, [r4, #0]
 8004534:	bf18      	it	ne
 8004536:	6059      	strne	r1, [r3, #4]
 8004538:	6863      	ldr	r3, [r4, #4]
 800453a:	bf08      	it	eq
 800453c:	f8c8 1000 	streq.w	r1, [r8]
 8004540:	5162      	str	r2, [r4, r5]
 8004542:	604b      	str	r3, [r1, #4]
 8004544:	4638      	mov	r0, r7
 8004546:	f104 060b 	add.w	r6, r4, #11
 800454a:	f000 f829 	bl	80045a0 <__malloc_unlock>
 800454e:	f026 0607 	bic.w	r6, r6, #7
 8004552:	1d23      	adds	r3, r4, #4
 8004554:	1af2      	subs	r2, r6, r3
 8004556:	d0ae      	beq.n	80044b6 <_malloc_r+0x22>
 8004558:	1b9b      	subs	r3, r3, r6
 800455a:	50a3      	str	r3, [r4, r2]
 800455c:	e7ab      	b.n	80044b6 <_malloc_r+0x22>
 800455e:	42a3      	cmp	r3, r4
 8004560:	6862      	ldr	r2, [r4, #4]
 8004562:	d1dd      	bne.n	8004520 <_malloc_r+0x8c>
 8004564:	f8c8 2000 	str.w	r2, [r8]
 8004568:	e7ec      	b.n	8004544 <_malloc_r+0xb0>
 800456a:	4623      	mov	r3, r4
 800456c:	6864      	ldr	r4, [r4, #4]
 800456e:	e7ac      	b.n	80044ca <_malloc_r+0x36>
 8004570:	4634      	mov	r4, r6
 8004572:	6876      	ldr	r6, [r6, #4]
 8004574:	e7b4      	b.n	80044e0 <_malloc_r+0x4c>
 8004576:	4613      	mov	r3, r2
 8004578:	e7cc      	b.n	8004514 <_malloc_r+0x80>
 800457a:	230c      	movs	r3, #12
 800457c:	603b      	str	r3, [r7, #0]
 800457e:	4638      	mov	r0, r7
 8004580:	f000 f80e 	bl	80045a0 <__malloc_unlock>
 8004584:	e797      	b.n	80044b6 <_malloc_r+0x22>
 8004586:	6025      	str	r5, [r4, #0]
 8004588:	e7dc      	b.n	8004544 <_malloc_r+0xb0>
 800458a:	605b      	str	r3, [r3, #4]
 800458c:	deff      	udf	#255	; 0xff
 800458e:	bf00      	nop
 8004590:	200002b0 	.word	0x200002b0

08004594 <__malloc_lock>:
 8004594:	4801      	ldr	r0, [pc, #4]	; (800459c <__malloc_lock+0x8>)
 8004596:	f7ff bf0e 	b.w	80043b6 <__retarget_lock_acquire_recursive>
 800459a:	bf00      	nop
 800459c:	200002ac 	.word	0x200002ac

080045a0 <__malloc_unlock>:
 80045a0:	4801      	ldr	r0, [pc, #4]	; (80045a8 <__malloc_unlock+0x8>)
 80045a2:	f7ff bf09 	b.w	80043b8 <__retarget_lock_release_recursive>
 80045a6:	bf00      	nop
 80045a8:	200002ac 	.word	0x200002ac

080045ac <__sfputc_r>:
 80045ac:	6893      	ldr	r3, [r2, #8]
 80045ae:	3b01      	subs	r3, #1
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	b410      	push	{r4}
 80045b4:	6093      	str	r3, [r2, #8]
 80045b6:	da08      	bge.n	80045ca <__sfputc_r+0x1e>
 80045b8:	6994      	ldr	r4, [r2, #24]
 80045ba:	42a3      	cmp	r3, r4
 80045bc:	db01      	blt.n	80045c2 <__sfputc_r+0x16>
 80045be:	290a      	cmp	r1, #10
 80045c0:	d103      	bne.n	80045ca <__sfputc_r+0x1e>
 80045c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045c6:	f000 bb73 	b.w	8004cb0 <__swbuf_r>
 80045ca:	6813      	ldr	r3, [r2, #0]
 80045cc:	1c58      	adds	r0, r3, #1
 80045ce:	6010      	str	r0, [r2, #0]
 80045d0:	7019      	strb	r1, [r3, #0]
 80045d2:	4608      	mov	r0, r1
 80045d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045d8:	4770      	bx	lr

080045da <__sfputs_r>:
 80045da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045dc:	4606      	mov	r6, r0
 80045de:	460f      	mov	r7, r1
 80045e0:	4614      	mov	r4, r2
 80045e2:	18d5      	adds	r5, r2, r3
 80045e4:	42ac      	cmp	r4, r5
 80045e6:	d101      	bne.n	80045ec <__sfputs_r+0x12>
 80045e8:	2000      	movs	r0, #0
 80045ea:	e007      	b.n	80045fc <__sfputs_r+0x22>
 80045ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045f0:	463a      	mov	r2, r7
 80045f2:	4630      	mov	r0, r6
 80045f4:	f7ff ffda 	bl	80045ac <__sfputc_r>
 80045f8:	1c43      	adds	r3, r0, #1
 80045fa:	d1f3      	bne.n	80045e4 <__sfputs_r+0xa>
 80045fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004600 <_vfiprintf_r>:
 8004600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004604:	460d      	mov	r5, r1
 8004606:	b09d      	sub	sp, #116	; 0x74
 8004608:	4614      	mov	r4, r2
 800460a:	4698      	mov	r8, r3
 800460c:	4606      	mov	r6, r0
 800460e:	b118      	cbz	r0, 8004618 <_vfiprintf_r+0x18>
 8004610:	6a03      	ldr	r3, [r0, #32]
 8004612:	b90b      	cbnz	r3, 8004618 <_vfiprintf_r+0x18>
 8004614:	f7ff fdca 	bl	80041ac <__sinit>
 8004618:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800461a:	07d9      	lsls	r1, r3, #31
 800461c:	d405      	bmi.n	800462a <_vfiprintf_r+0x2a>
 800461e:	89ab      	ldrh	r3, [r5, #12]
 8004620:	059a      	lsls	r2, r3, #22
 8004622:	d402      	bmi.n	800462a <_vfiprintf_r+0x2a>
 8004624:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004626:	f7ff fec6 	bl	80043b6 <__retarget_lock_acquire_recursive>
 800462a:	89ab      	ldrh	r3, [r5, #12]
 800462c:	071b      	lsls	r3, r3, #28
 800462e:	d501      	bpl.n	8004634 <_vfiprintf_r+0x34>
 8004630:	692b      	ldr	r3, [r5, #16]
 8004632:	b99b      	cbnz	r3, 800465c <_vfiprintf_r+0x5c>
 8004634:	4629      	mov	r1, r5
 8004636:	4630      	mov	r0, r6
 8004638:	f000 fb78 	bl	8004d2c <__swsetup_r>
 800463c:	b170      	cbz	r0, 800465c <_vfiprintf_r+0x5c>
 800463e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004640:	07dc      	lsls	r4, r3, #31
 8004642:	d504      	bpl.n	800464e <_vfiprintf_r+0x4e>
 8004644:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004648:	b01d      	add	sp, #116	; 0x74
 800464a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800464e:	89ab      	ldrh	r3, [r5, #12]
 8004650:	0598      	lsls	r0, r3, #22
 8004652:	d4f7      	bmi.n	8004644 <_vfiprintf_r+0x44>
 8004654:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004656:	f7ff feaf 	bl	80043b8 <__retarget_lock_release_recursive>
 800465a:	e7f3      	b.n	8004644 <_vfiprintf_r+0x44>
 800465c:	2300      	movs	r3, #0
 800465e:	9309      	str	r3, [sp, #36]	; 0x24
 8004660:	2320      	movs	r3, #32
 8004662:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004666:	f8cd 800c 	str.w	r8, [sp, #12]
 800466a:	2330      	movs	r3, #48	; 0x30
 800466c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004820 <_vfiprintf_r+0x220>
 8004670:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004674:	f04f 0901 	mov.w	r9, #1
 8004678:	4623      	mov	r3, r4
 800467a:	469a      	mov	sl, r3
 800467c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004680:	b10a      	cbz	r2, 8004686 <_vfiprintf_r+0x86>
 8004682:	2a25      	cmp	r2, #37	; 0x25
 8004684:	d1f9      	bne.n	800467a <_vfiprintf_r+0x7a>
 8004686:	ebba 0b04 	subs.w	fp, sl, r4
 800468a:	d00b      	beq.n	80046a4 <_vfiprintf_r+0xa4>
 800468c:	465b      	mov	r3, fp
 800468e:	4622      	mov	r2, r4
 8004690:	4629      	mov	r1, r5
 8004692:	4630      	mov	r0, r6
 8004694:	f7ff ffa1 	bl	80045da <__sfputs_r>
 8004698:	3001      	adds	r0, #1
 800469a:	f000 80a9 	beq.w	80047f0 <_vfiprintf_r+0x1f0>
 800469e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046a0:	445a      	add	r2, fp
 80046a2:	9209      	str	r2, [sp, #36]	; 0x24
 80046a4:	f89a 3000 	ldrb.w	r3, [sl]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 80a1 	beq.w	80047f0 <_vfiprintf_r+0x1f0>
 80046ae:	2300      	movs	r3, #0
 80046b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046b8:	f10a 0a01 	add.w	sl, sl, #1
 80046bc:	9304      	str	r3, [sp, #16]
 80046be:	9307      	str	r3, [sp, #28]
 80046c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046c4:	931a      	str	r3, [sp, #104]	; 0x68
 80046c6:	4654      	mov	r4, sl
 80046c8:	2205      	movs	r2, #5
 80046ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046ce:	4854      	ldr	r0, [pc, #336]	; (8004820 <_vfiprintf_r+0x220>)
 80046d0:	f7fb fd7e 	bl	80001d0 <memchr>
 80046d4:	9a04      	ldr	r2, [sp, #16]
 80046d6:	b9d8      	cbnz	r0, 8004710 <_vfiprintf_r+0x110>
 80046d8:	06d1      	lsls	r1, r2, #27
 80046da:	bf44      	itt	mi
 80046dc:	2320      	movmi	r3, #32
 80046de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046e2:	0713      	lsls	r3, r2, #28
 80046e4:	bf44      	itt	mi
 80046e6:	232b      	movmi	r3, #43	; 0x2b
 80046e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046ec:	f89a 3000 	ldrb.w	r3, [sl]
 80046f0:	2b2a      	cmp	r3, #42	; 0x2a
 80046f2:	d015      	beq.n	8004720 <_vfiprintf_r+0x120>
 80046f4:	9a07      	ldr	r2, [sp, #28]
 80046f6:	4654      	mov	r4, sl
 80046f8:	2000      	movs	r0, #0
 80046fa:	f04f 0c0a 	mov.w	ip, #10
 80046fe:	4621      	mov	r1, r4
 8004700:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004704:	3b30      	subs	r3, #48	; 0x30
 8004706:	2b09      	cmp	r3, #9
 8004708:	d94d      	bls.n	80047a6 <_vfiprintf_r+0x1a6>
 800470a:	b1b0      	cbz	r0, 800473a <_vfiprintf_r+0x13a>
 800470c:	9207      	str	r2, [sp, #28]
 800470e:	e014      	b.n	800473a <_vfiprintf_r+0x13a>
 8004710:	eba0 0308 	sub.w	r3, r0, r8
 8004714:	fa09 f303 	lsl.w	r3, r9, r3
 8004718:	4313      	orrs	r3, r2
 800471a:	9304      	str	r3, [sp, #16]
 800471c:	46a2      	mov	sl, r4
 800471e:	e7d2      	b.n	80046c6 <_vfiprintf_r+0xc6>
 8004720:	9b03      	ldr	r3, [sp, #12]
 8004722:	1d19      	adds	r1, r3, #4
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	9103      	str	r1, [sp, #12]
 8004728:	2b00      	cmp	r3, #0
 800472a:	bfbb      	ittet	lt
 800472c:	425b      	neglt	r3, r3
 800472e:	f042 0202 	orrlt.w	r2, r2, #2
 8004732:	9307      	strge	r3, [sp, #28]
 8004734:	9307      	strlt	r3, [sp, #28]
 8004736:	bfb8      	it	lt
 8004738:	9204      	strlt	r2, [sp, #16]
 800473a:	7823      	ldrb	r3, [r4, #0]
 800473c:	2b2e      	cmp	r3, #46	; 0x2e
 800473e:	d10c      	bne.n	800475a <_vfiprintf_r+0x15a>
 8004740:	7863      	ldrb	r3, [r4, #1]
 8004742:	2b2a      	cmp	r3, #42	; 0x2a
 8004744:	d134      	bne.n	80047b0 <_vfiprintf_r+0x1b0>
 8004746:	9b03      	ldr	r3, [sp, #12]
 8004748:	1d1a      	adds	r2, r3, #4
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	9203      	str	r2, [sp, #12]
 800474e:	2b00      	cmp	r3, #0
 8004750:	bfb8      	it	lt
 8004752:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004756:	3402      	adds	r4, #2
 8004758:	9305      	str	r3, [sp, #20]
 800475a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004830 <_vfiprintf_r+0x230>
 800475e:	7821      	ldrb	r1, [r4, #0]
 8004760:	2203      	movs	r2, #3
 8004762:	4650      	mov	r0, sl
 8004764:	f7fb fd34 	bl	80001d0 <memchr>
 8004768:	b138      	cbz	r0, 800477a <_vfiprintf_r+0x17a>
 800476a:	9b04      	ldr	r3, [sp, #16]
 800476c:	eba0 000a 	sub.w	r0, r0, sl
 8004770:	2240      	movs	r2, #64	; 0x40
 8004772:	4082      	lsls	r2, r0
 8004774:	4313      	orrs	r3, r2
 8004776:	3401      	adds	r4, #1
 8004778:	9304      	str	r3, [sp, #16]
 800477a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800477e:	4829      	ldr	r0, [pc, #164]	; (8004824 <_vfiprintf_r+0x224>)
 8004780:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004784:	2206      	movs	r2, #6
 8004786:	f7fb fd23 	bl	80001d0 <memchr>
 800478a:	2800      	cmp	r0, #0
 800478c:	d03f      	beq.n	800480e <_vfiprintf_r+0x20e>
 800478e:	4b26      	ldr	r3, [pc, #152]	; (8004828 <_vfiprintf_r+0x228>)
 8004790:	bb1b      	cbnz	r3, 80047da <_vfiprintf_r+0x1da>
 8004792:	9b03      	ldr	r3, [sp, #12]
 8004794:	3307      	adds	r3, #7
 8004796:	f023 0307 	bic.w	r3, r3, #7
 800479a:	3308      	adds	r3, #8
 800479c:	9303      	str	r3, [sp, #12]
 800479e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047a0:	443b      	add	r3, r7
 80047a2:	9309      	str	r3, [sp, #36]	; 0x24
 80047a4:	e768      	b.n	8004678 <_vfiprintf_r+0x78>
 80047a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80047aa:	460c      	mov	r4, r1
 80047ac:	2001      	movs	r0, #1
 80047ae:	e7a6      	b.n	80046fe <_vfiprintf_r+0xfe>
 80047b0:	2300      	movs	r3, #0
 80047b2:	3401      	adds	r4, #1
 80047b4:	9305      	str	r3, [sp, #20]
 80047b6:	4619      	mov	r1, r3
 80047b8:	f04f 0c0a 	mov.w	ip, #10
 80047bc:	4620      	mov	r0, r4
 80047be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047c2:	3a30      	subs	r2, #48	; 0x30
 80047c4:	2a09      	cmp	r2, #9
 80047c6:	d903      	bls.n	80047d0 <_vfiprintf_r+0x1d0>
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d0c6      	beq.n	800475a <_vfiprintf_r+0x15a>
 80047cc:	9105      	str	r1, [sp, #20]
 80047ce:	e7c4      	b.n	800475a <_vfiprintf_r+0x15a>
 80047d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80047d4:	4604      	mov	r4, r0
 80047d6:	2301      	movs	r3, #1
 80047d8:	e7f0      	b.n	80047bc <_vfiprintf_r+0x1bc>
 80047da:	ab03      	add	r3, sp, #12
 80047dc:	9300      	str	r3, [sp, #0]
 80047de:	462a      	mov	r2, r5
 80047e0:	4b12      	ldr	r3, [pc, #72]	; (800482c <_vfiprintf_r+0x22c>)
 80047e2:	a904      	add	r1, sp, #16
 80047e4:	4630      	mov	r0, r6
 80047e6:	f3af 8000 	nop.w
 80047ea:	4607      	mov	r7, r0
 80047ec:	1c78      	adds	r0, r7, #1
 80047ee:	d1d6      	bne.n	800479e <_vfiprintf_r+0x19e>
 80047f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80047f2:	07d9      	lsls	r1, r3, #31
 80047f4:	d405      	bmi.n	8004802 <_vfiprintf_r+0x202>
 80047f6:	89ab      	ldrh	r3, [r5, #12]
 80047f8:	059a      	lsls	r2, r3, #22
 80047fa:	d402      	bmi.n	8004802 <_vfiprintf_r+0x202>
 80047fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80047fe:	f7ff fddb 	bl	80043b8 <__retarget_lock_release_recursive>
 8004802:	89ab      	ldrh	r3, [r5, #12]
 8004804:	065b      	lsls	r3, r3, #25
 8004806:	f53f af1d 	bmi.w	8004644 <_vfiprintf_r+0x44>
 800480a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800480c:	e71c      	b.n	8004648 <_vfiprintf_r+0x48>
 800480e:	ab03      	add	r3, sp, #12
 8004810:	9300      	str	r3, [sp, #0]
 8004812:	462a      	mov	r2, r5
 8004814:	4b05      	ldr	r3, [pc, #20]	; (800482c <_vfiprintf_r+0x22c>)
 8004816:	a904      	add	r1, sp, #16
 8004818:	4630      	mov	r0, r6
 800481a:	f000 f879 	bl	8004910 <_printf_i>
 800481e:	e7e4      	b.n	80047ea <_vfiprintf_r+0x1ea>
 8004820:	08004f50 	.word	0x08004f50
 8004824:	08004f5a 	.word	0x08004f5a
 8004828:	00000000 	.word	0x00000000
 800482c:	080045db 	.word	0x080045db
 8004830:	08004f56 	.word	0x08004f56

08004834 <_printf_common>:
 8004834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004838:	4616      	mov	r6, r2
 800483a:	4699      	mov	r9, r3
 800483c:	688a      	ldr	r2, [r1, #8]
 800483e:	690b      	ldr	r3, [r1, #16]
 8004840:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004844:	4293      	cmp	r3, r2
 8004846:	bfb8      	it	lt
 8004848:	4613      	movlt	r3, r2
 800484a:	6033      	str	r3, [r6, #0]
 800484c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004850:	4607      	mov	r7, r0
 8004852:	460c      	mov	r4, r1
 8004854:	b10a      	cbz	r2, 800485a <_printf_common+0x26>
 8004856:	3301      	adds	r3, #1
 8004858:	6033      	str	r3, [r6, #0]
 800485a:	6823      	ldr	r3, [r4, #0]
 800485c:	0699      	lsls	r1, r3, #26
 800485e:	bf42      	ittt	mi
 8004860:	6833      	ldrmi	r3, [r6, #0]
 8004862:	3302      	addmi	r3, #2
 8004864:	6033      	strmi	r3, [r6, #0]
 8004866:	6825      	ldr	r5, [r4, #0]
 8004868:	f015 0506 	ands.w	r5, r5, #6
 800486c:	d106      	bne.n	800487c <_printf_common+0x48>
 800486e:	f104 0a19 	add.w	sl, r4, #25
 8004872:	68e3      	ldr	r3, [r4, #12]
 8004874:	6832      	ldr	r2, [r6, #0]
 8004876:	1a9b      	subs	r3, r3, r2
 8004878:	42ab      	cmp	r3, r5
 800487a:	dc26      	bgt.n	80048ca <_printf_common+0x96>
 800487c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004880:	1e13      	subs	r3, r2, #0
 8004882:	6822      	ldr	r2, [r4, #0]
 8004884:	bf18      	it	ne
 8004886:	2301      	movne	r3, #1
 8004888:	0692      	lsls	r2, r2, #26
 800488a:	d42b      	bmi.n	80048e4 <_printf_common+0xb0>
 800488c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004890:	4649      	mov	r1, r9
 8004892:	4638      	mov	r0, r7
 8004894:	47c0      	blx	r8
 8004896:	3001      	adds	r0, #1
 8004898:	d01e      	beq.n	80048d8 <_printf_common+0xa4>
 800489a:	6823      	ldr	r3, [r4, #0]
 800489c:	6922      	ldr	r2, [r4, #16]
 800489e:	f003 0306 	and.w	r3, r3, #6
 80048a2:	2b04      	cmp	r3, #4
 80048a4:	bf02      	ittt	eq
 80048a6:	68e5      	ldreq	r5, [r4, #12]
 80048a8:	6833      	ldreq	r3, [r6, #0]
 80048aa:	1aed      	subeq	r5, r5, r3
 80048ac:	68a3      	ldr	r3, [r4, #8]
 80048ae:	bf0c      	ite	eq
 80048b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048b4:	2500      	movne	r5, #0
 80048b6:	4293      	cmp	r3, r2
 80048b8:	bfc4      	itt	gt
 80048ba:	1a9b      	subgt	r3, r3, r2
 80048bc:	18ed      	addgt	r5, r5, r3
 80048be:	2600      	movs	r6, #0
 80048c0:	341a      	adds	r4, #26
 80048c2:	42b5      	cmp	r5, r6
 80048c4:	d11a      	bne.n	80048fc <_printf_common+0xc8>
 80048c6:	2000      	movs	r0, #0
 80048c8:	e008      	b.n	80048dc <_printf_common+0xa8>
 80048ca:	2301      	movs	r3, #1
 80048cc:	4652      	mov	r2, sl
 80048ce:	4649      	mov	r1, r9
 80048d0:	4638      	mov	r0, r7
 80048d2:	47c0      	blx	r8
 80048d4:	3001      	adds	r0, #1
 80048d6:	d103      	bne.n	80048e0 <_printf_common+0xac>
 80048d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048e0:	3501      	adds	r5, #1
 80048e2:	e7c6      	b.n	8004872 <_printf_common+0x3e>
 80048e4:	18e1      	adds	r1, r4, r3
 80048e6:	1c5a      	adds	r2, r3, #1
 80048e8:	2030      	movs	r0, #48	; 0x30
 80048ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048ee:	4422      	add	r2, r4
 80048f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048f8:	3302      	adds	r3, #2
 80048fa:	e7c7      	b.n	800488c <_printf_common+0x58>
 80048fc:	2301      	movs	r3, #1
 80048fe:	4622      	mov	r2, r4
 8004900:	4649      	mov	r1, r9
 8004902:	4638      	mov	r0, r7
 8004904:	47c0      	blx	r8
 8004906:	3001      	adds	r0, #1
 8004908:	d0e6      	beq.n	80048d8 <_printf_common+0xa4>
 800490a:	3601      	adds	r6, #1
 800490c:	e7d9      	b.n	80048c2 <_printf_common+0x8e>
	...

08004910 <_printf_i>:
 8004910:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004914:	7e0f      	ldrb	r7, [r1, #24]
 8004916:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004918:	2f78      	cmp	r7, #120	; 0x78
 800491a:	4691      	mov	r9, r2
 800491c:	4680      	mov	r8, r0
 800491e:	460c      	mov	r4, r1
 8004920:	469a      	mov	sl, r3
 8004922:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004926:	d807      	bhi.n	8004938 <_printf_i+0x28>
 8004928:	2f62      	cmp	r7, #98	; 0x62
 800492a:	d80a      	bhi.n	8004942 <_printf_i+0x32>
 800492c:	2f00      	cmp	r7, #0
 800492e:	f000 80d4 	beq.w	8004ada <_printf_i+0x1ca>
 8004932:	2f58      	cmp	r7, #88	; 0x58
 8004934:	f000 80c0 	beq.w	8004ab8 <_printf_i+0x1a8>
 8004938:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800493c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004940:	e03a      	b.n	80049b8 <_printf_i+0xa8>
 8004942:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004946:	2b15      	cmp	r3, #21
 8004948:	d8f6      	bhi.n	8004938 <_printf_i+0x28>
 800494a:	a101      	add	r1, pc, #4	; (adr r1, 8004950 <_printf_i+0x40>)
 800494c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004950:	080049a9 	.word	0x080049a9
 8004954:	080049bd 	.word	0x080049bd
 8004958:	08004939 	.word	0x08004939
 800495c:	08004939 	.word	0x08004939
 8004960:	08004939 	.word	0x08004939
 8004964:	08004939 	.word	0x08004939
 8004968:	080049bd 	.word	0x080049bd
 800496c:	08004939 	.word	0x08004939
 8004970:	08004939 	.word	0x08004939
 8004974:	08004939 	.word	0x08004939
 8004978:	08004939 	.word	0x08004939
 800497c:	08004ac1 	.word	0x08004ac1
 8004980:	080049e9 	.word	0x080049e9
 8004984:	08004a7b 	.word	0x08004a7b
 8004988:	08004939 	.word	0x08004939
 800498c:	08004939 	.word	0x08004939
 8004990:	08004ae3 	.word	0x08004ae3
 8004994:	08004939 	.word	0x08004939
 8004998:	080049e9 	.word	0x080049e9
 800499c:	08004939 	.word	0x08004939
 80049a0:	08004939 	.word	0x08004939
 80049a4:	08004a83 	.word	0x08004a83
 80049a8:	682b      	ldr	r3, [r5, #0]
 80049aa:	1d1a      	adds	r2, r3, #4
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	602a      	str	r2, [r5, #0]
 80049b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049b8:	2301      	movs	r3, #1
 80049ba:	e09f      	b.n	8004afc <_printf_i+0x1ec>
 80049bc:	6820      	ldr	r0, [r4, #0]
 80049be:	682b      	ldr	r3, [r5, #0]
 80049c0:	0607      	lsls	r7, r0, #24
 80049c2:	f103 0104 	add.w	r1, r3, #4
 80049c6:	6029      	str	r1, [r5, #0]
 80049c8:	d501      	bpl.n	80049ce <_printf_i+0xbe>
 80049ca:	681e      	ldr	r6, [r3, #0]
 80049cc:	e003      	b.n	80049d6 <_printf_i+0xc6>
 80049ce:	0646      	lsls	r6, r0, #25
 80049d0:	d5fb      	bpl.n	80049ca <_printf_i+0xba>
 80049d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80049d6:	2e00      	cmp	r6, #0
 80049d8:	da03      	bge.n	80049e2 <_printf_i+0xd2>
 80049da:	232d      	movs	r3, #45	; 0x2d
 80049dc:	4276      	negs	r6, r6
 80049de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049e2:	485a      	ldr	r0, [pc, #360]	; (8004b4c <_printf_i+0x23c>)
 80049e4:	230a      	movs	r3, #10
 80049e6:	e012      	b.n	8004a0e <_printf_i+0xfe>
 80049e8:	682b      	ldr	r3, [r5, #0]
 80049ea:	6820      	ldr	r0, [r4, #0]
 80049ec:	1d19      	adds	r1, r3, #4
 80049ee:	6029      	str	r1, [r5, #0]
 80049f0:	0605      	lsls	r5, r0, #24
 80049f2:	d501      	bpl.n	80049f8 <_printf_i+0xe8>
 80049f4:	681e      	ldr	r6, [r3, #0]
 80049f6:	e002      	b.n	80049fe <_printf_i+0xee>
 80049f8:	0641      	lsls	r1, r0, #25
 80049fa:	d5fb      	bpl.n	80049f4 <_printf_i+0xe4>
 80049fc:	881e      	ldrh	r6, [r3, #0]
 80049fe:	4853      	ldr	r0, [pc, #332]	; (8004b4c <_printf_i+0x23c>)
 8004a00:	2f6f      	cmp	r7, #111	; 0x6f
 8004a02:	bf0c      	ite	eq
 8004a04:	2308      	moveq	r3, #8
 8004a06:	230a      	movne	r3, #10
 8004a08:	2100      	movs	r1, #0
 8004a0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a0e:	6865      	ldr	r5, [r4, #4]
 8004a10:	60a5      	str	r5, [r4, #8]
 8004a12:	2d00      	cmp	r5, #0
 8004a14:	bfa2      	ittt	ge
 8004a16:	6821      	ldrge	r1, [r4, #0]
 8004a18:	f021 0104 	bicge.w	r1, r1, #4
 8004a1c:	6021      	strge	r1, [r4, #0]
 8004a1e:	b90e      	cbnz	r6, 8004a24 <_printf_i+0x114>
 8004a20:	2d00      	cmp	r5, #0
 8004a22:	d04b      	beq.n	8004abc <_printf_i+0x1ac>
 8004a24:	4615      	mov	r5, r2
 8004a26:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a2a:	fb03 6711 	mls	r7, r3, r1, r6
 8004a2e:	5dc7      	ldrb	r7, [r0, r7]
 8004a30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a34:	4637      	mov	r7, r6
 8004a36:	42bb      	cmp	r3, r7
 8004a38:	460e      	mov	r6, r1
 8004a3a:	d9f4      	bls.n	8004a26 <_printf_i+0x116>
 8004a3c:	2b08      	cmp	r3, #8
 8004a3e:	d10b      	bne.n	8004a58 <_printf_i+0x148>
 8004a40:	6823      	ldr	r3, [r4, #0]
 8004a42:	07de      	lsls	r6, r3, #31
 8004a44:	d508      	bpl.n	8004a58 <_printf_i+0x148>
 8004a46:	6923      	ldr	r3, [r4, #16]
 8004a48:	6861      	ldr	r1, [r4, #4]
 8004a4a:	4299      	cmp	r1, r3
 8004a4c:	bfde      	ittt	le
 8004a4e:	2330      	movle	r3, #48	; 0x30
 8004a50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a54:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004a58:	1b52      	subs	r2, r2, r5
 8004a5a:	6122      	str	r2, [r4, #16]
 8004a5c:	f8cd a000 	str.w	sl, [sp]
 8004a60:	464b      	mov	r3, r9
 8004a62:	aa03      	add	r2, sp, #12
 8004a64:	4621      	mov	r1, r4
 8004a66:	4640      	mov	r0, r8
 8004a68:	f7ff fee4 	bl	8004834 <_printf_common>
 8004a6c:	3001      	adds	r0, #1
 8004a6e:	d14a      	bne.n	8004b06 <_printf_i+0x1f6>
 8004a70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a74:	b004      	add	sp, #16
 8004a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a7a:	6823      	ldr	r3, [r4, #0]
 8004a7c:	f043 0320 	orr.w	r3, r3, #32
 8004a80:	6023      	str	r3, [r4, #0]
 8004a82:	4833      	ldr	r0, [pc, #204]	; (8004b50 <_printf_i+0x240>)
 8004a84:	2778      	movs	r7, #120	; 0x78
 8004a86:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a8a:	6823      	ldr	r3, [r4, #0]
 8004a8c:	6829      	ldr	r1, [r5, #0]
 8004a8e:	061f      	lsls	r7, r3, #24
 8004a90:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a94:	d402      	bmi.n	8004a9c <_printf_i+0x18c>
 8004a96:	065f      	lsls	r7, r3, #25
 8004a98:	bf48      	it	mi
 8004a9a:	b2b6      	uxthmi	r6, r6
 8004a9c:	07df      	lsls	r7, r3, #31
 8004a9e:	bf48      	it	mi
 8004aa0:	f043 0320 	orrmi.w	r3, r3, #32
 8004aa4:	6029      	str	r1, [r5, #0]
 8004aa6:	bf48      	it	mi
 8004aa8:	6023      	strmi	r3, [r4, #0]
 8004aaa:	b91e      	cbnz	r6, 8004ab4 <_printf_i+0x1a4>
 8004aac:	6823      	ldr	r3, [r4, #0]
 8004aae:	f023 0320 	bic.w	r3, r3, #32
 8004ab2:	6023      	str	r3, [r4, #0]
 8004ab4:	2310      	movs	r3, #16
 8004ab6:	e7a7      	b.n	8004a08 <_printf_i+0xf8>
 8004ab8:	4824      	ldr	r0, [pc, #144]	; (8004b4c <_printf_i+0x23c>)
 8004aba:	e7e4      	b.n	8004a86 <_printf_i+0x176>
 8004abc:	4615      	mov	r5, r2
 8004abe:	e7bd      	b.n	8004a3c <_printf_i+0x12c>
 8004ac0:	682b      	ldr	r3, [r5, #0]
 8004ac2:	6826      	ldr	r6, [r4, #0]
 8004ac4:	6961      	ldr	r1, [r4, #20]
 8004ac6:	1d18      	adds	r0, r3, #4
 8004ac8:	6028      	str	r0, [r5, #0]
 8004aca:	0635      	lsls	r5, r6, #24
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	d501      	bpl.n	8004ad4 <_printf_i+0x1c4>
 8004ad0:	6019      	str	r1, [r3, #0]
 8004ad2:	e002      	b.n	8004ada <_printf_i+0x1ca>
 8004ad4:	0670      	lsls	r0, r6, #25
 8004ad6:	d5fb      	bpl.n	8004ad0 <_printf_i+0x1c0>
 8004ad8:	8019      	strh	r1, [r3, #0]
 8004ada:	2300      	movs	r3, #0
 8004adc:	6123      	str	r3, [r4, #16]
 8004ade:	4615      	mov	r5, r2
 8004ae0:	e7bc      	b.n	8004a5c <_printf_i+0x14c>
 8004ae2:	682b      	ldr	r3, [r5, #0]
 8004ae4:	1d1a      	adds	r2, r3, #4
 8004ae6:	602a      	str	r2, [r5, #0]
 8004ae8:	681d      	ldr	r5, [r3, #0]
 8004aea:	6862      	ldr	r2, [r4, #4]
 8004aec:	2100      	movs	r1, #0
 8004aee:	4628      	mov	r0, r5
 8004af0:	f7fb fb6e 	bl	80001d0 <memchr>
 8004af4:	b108      	cbz	r0, 8004afa <_printf_i+0x1ea>
 8004af6:	1b40      	subs	r0, r0, r5
 8004af8:	6060      	str	r0, [r4, #4]
 8004afa:	6863      	ldr	r3, [r4, #4]
 8004afc:	6123      	str	r3, [r4, #16]
 8004afe:	2300      	movs	r3, #0
 8004b00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b04:	e7aa      	b.n	8004a5c <_printf_i+0x14c>
 8004b06:	6923      	ldr	r3, [r4, #16]
 8004b08:	462a      	mov	r2, r5
 8004b0a:	4649      	mov	r1, r9
 8004b0c:	4640      	mov	r0, r8
 8004b0e:	47d0      	blx	sl
 8004b10:	3001      	adds	r0, #1
 8004b12:	d0ad      	beq.n	8004a70 <_printf_i+0x160>
 8004b14:	6823      	ldr	r3, [r4, #0]
 8004b16:	079b      	lsls	r3, r3, #30
 8004b18:	d413      	bmi.n	8004b42 <_printf_i+0x232>
 8004b1a:	68e0      	ldr	r0, [r4, #12]
 8004b1c:	9b03      	ldr	r3, [sp, #12]
 8004b1e:	4298      	cmp	r0, r3
 8004b20:	bfb8      	it	lt
 8004b22:	4618      	movlt	r0, r3
 8004b24:	e7a6      	b.n	8004a74 <_printf_i+0x164>
 8004b26:	2301      	movs	r3, #1
 8004b28:	4632      	mov	r2, r6
 8004b2a:	4649      	mov	r1, r9
 8004b2c:	4640      	mov	r0, r8
 8004b2e:	47d0      	blx	sl
 8004b30:	3001      	adds	r0, #1
 8004b32:	d09d      	beq.n	8004a70 <_printf_i+0x160>
 8004b34:	3501      	adds	r5, #1
 8004b36:	68e3      	ldr	r3, [r4, #12]
 8004b38:	9903      	ldr	r1, [sp, #12]
 8004b3a:	1a5b      	subs	r3, r3, r1
 8004b3c:	42ab      	cmp	r3, r5
 8004b3e:	dcf2      	bgt.n	8004b26 <_printf_i+0x216>
 8004b40:	e7eb      	b.n	8004b1a <_printf_i+0x20a>
 8004b42:	2500      	movs	r5, #0
 8004b44:	f104 0619 	add.w	r6, r4, #25
 8004b48:	e7f5      	b.n	8004b36 <_printf_i+0x226>
 8004b4a:	bf00      	nop
 8004b4c:	08004f61 	.word	0x08004f61
 8004b50:	08004f72 	.word	0x08004f72

08004b54 <__sflush_r>:
 8004b54:	898a      	ldrh	r2, [r1, #12]
 8004b56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b5a:	4605      	mov	r5, r0
 8004b5c:	0710      	lsls	r0, r2, #28
 8004b5e:	460c      	mov	r4, r1
 8004b60:	d458      	bmi.n	8004c14 <__sflush_r+0xc0>
 8004b62:	684b      	ldr	r3, [r1, #4]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	dc05      	bgt.n	8004b74 <__sflush_r+0x20>
 8004b68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	dc02      	bgt.n	8004b74 <__sflush_r+0x20>
 8004b6e:	2000      	movs	r0, #0
 8004b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b76:	2e00      	cmp	r6, #0
 8004b78:	d0f9      	beq.n	8004b6e <__sflush_r+0x1a>
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004b80:	682f      	ldr	r7, [r5, #0]
 8004b82:	6a21      	ldr	r1, [r4, #32]
 8004b84:	602b      	str	r3, [r5, #0]
 8004b86:	d032      	beq.n	8004bee <__sflush_r+0x9a>
 8004b88:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004b8a:	89a3      	ldrh	r3, [r4, #12]
 8004b8c:	075a      	lsls	r2, r3, #29
 8004b8e:	d505      	bpl.n	8004b9c <__sflush_r+0x48>
 8004b90:	6863      	ldr	r3, [r4, #4]
 8004b92:	1ac0      	subs	r0, r0, r3
 8004b94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b96:	b10b      	cbz	r3, 8004b9c <__sflush_r+0x48>
 8004b98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b9a:	1ac0      	subs	r0, r0, r3
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ba2:	6a21      	ldr	r1, [r4, #32]
 8004ba4:	4628      	mov	r0, r5
 8004ba6:	47b0      	blx	r6
 8004ba8:	1c43      	adds	r3, r0, #1
 8004baa:	89a3      	ldrh	r3, [r4, #12]
 8004bac:	d106      	bne.n	8004bbc <__sflush_r+0x68>
 8004bae:	6829      	ldr	r1, [r5, #0]
 8004bb0:	291d      	cmp	r1, #29
 8004bb2:	d82b      	bhi.n	8004c0c <__sflush_r+0xb8>
 8004bb4:	4a29      	ldr	r2, [pc, #164]	; (8004c5c <__sflush_r+0x108>)
 8004bb6:	410a      	asrs	r2, r1
 8004bb8:	07d6      	lsls	r6, r2, #31
 8004bba:	d427      	bmi.n	8004c0c <__sflush_r+0xb8>
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	6062      	str	r2, [r4, #4]
 8004bc0:	04d9      	lsls	r1, r3, #19
 8004bc2:	6922      	ldr	r2, [r4, #16]
 8004bc4:	6022      	str	r2, [r4, #0]
 8004bc6:	d504      	bpl.n	8004bd2 <__sflush_r+0x7e>
 8004bc8:	1c42      	adds	r2, r0, #1
 8004bca:	d101      	bne.n	8004bd0 <__sflush_r+0x7c>
 8004bcc:	682b      	ldr	r3, [r5, #0]
 8004bce:	b903      	cbnz	r3, 8004bd2 <__sflush_r+0x7e>
 8004bd0:	6560      	str	r0, [r4, #84]	; 0x54
 8004bd2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004bd4:	602f      	str	r7, [r5, #0]
 8004bd6:	2900      	cmp	r1, #0
 8004bd8:	d0c9      	beq.n	8004b6e <__sflush_r+0x1a>
 8004bda:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004bde:	4299      	cmp	r1, r3
 8004be0:	d002      	beq.n	8004be8 <__sflush_r+0x94>
 8004be2:	4628      	mov	r0, r5
 8004be4:	f7ff fbea 	bl	80043bc <_free_r>
 8004be8:	2000      	movs	r0, #0
 8004bea:	6360      	str	r0, [r4, #52]	; 0x34
 8004bec:	e7c0      	b.n	8004b70 <__sflush_r+0x1c>
 8004bee:	2301      	movs	r3, #1
 8004bf0:	4628      	mov	r0, r5
 8004bf2:	47b0      	blx	r6
 8004bf4:	1c41      	adds	r1, r0, #1
 8004bf6:	d1c8      	bne.n	8004b8a <__sflush_r+0x36>
 8004bf8:	682b      	ldr	r3, [r5, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d0c5      	beq.n	8004b8a <__sflush_r+0x36>
 8004bfe:	2b1d      	cmp	r3, #29
 8004c00:	d001      	beq.n	8004c06 <__sflush_r+0xb2>
 8004c02:	2b16      	cmp	r3, #22
 8004c04:	d101      	bne.n	8004c0a <__sflush_r+0xb6>
 8004c06:	602f      	str	r7, [r5, #0]
 8004c08:	e7b1      	b.n	8004b6e <__sflush_r+0x1a>
 8004c0a:	89a3      	ldrh	r3, [r4, #12]
 8004c0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c10:	81a3      	strh	r3, [r4, #12]
 8004c12:	e7ad      	b.n	8004b70 <__sflush_r+0x1c>
 8004c14:	690f      	ldr	r7, [r1, #16]
 8004c16:	2f00      	cmp	r7, #0
 8004c18:	d0a9      	beq.n	8004b6e <__sflush_r+0x1a>
 8004c1a:	0793      	lsls	r3, r2, #30
 8004c1c:	680e      	ldr	r6, [r1, #0]
 8004c1e:	bf08      	it	eq
 8004c20:	694b      	ldreq	r3, [r1, #20]
 8004c22:	600f      	str	r7, [r1, #0]
 8004c24:	bf18      	it	ne
 8004c26:	2300      	movne	r3, #0
 8004c28:	eba6 0807 	sub.w	r8, r6, r7
 8004c2c:	608b      	str	r3, [r1, #8]
 8004c2e:	f1b8 0f00 	cmp.w	r8, #0
 8004c32:	dd9c      	ble.n	8004b6e <__sflush_r+0x1a>
 8004c34:	6a21      	ldr	r1, [r4, #32]
 8004c36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004c38:	4643      	mov	r3, r8
 8004c3a:	463a      	mov	r2, r7
 8004c3c:	4628      	mov	r0, r5
 8004c3e:	47b0      	blx	r6
 8004c40:	2800      	cmp	r0, #0
 8004c42:	dc06      	bgt.n	8004c52 <__sflush_r+0xfe>
 8004c44:	89a3      	ldrh	r3, [r4, #12]
 8004c46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c4a:	81a3      	strh	r3, [r4, #12]
 8004c4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c50:	e78e      	b.n	8004b70 <__sflush_r+0x1c>
 8004c52:	4407      	add	r7, r0
 8004c54:	eba8 0800 	sub.w	r8, r8, r0
 8004c58:	e7e9      	b.n	8004c2e <__sflush_r+0xda>
 8004c5a:	bf00      	nop
 8004c5c:	dfbffffe 	.word	0xdfbffffe

08004c60 <_fflush_r>:
 8004c60:	b538      	push	{r3, r4, r5, lr}
 8004c62:	690b      	ldr	r3, [r1, #16]
 8004c64:	4605      	mov	r5, r0
 8004c66:	460c      	mov	r4, r1
 8004c68:	b913      	cbnz	r3, 8004c70 <_fflush_r+0x10>
 8004c6a:	2500      	movs	r5, #0
 8004c6c:	4628      	mov	r0, r5
 8004c6e:	bd38      	pop	{r3, r4, r5, pc}
 8004c70:	b118      	cbz	r0, 8004c7a <_fflush_r+0x1a>
 8004c72:	6a03      	ldr	r3, [r0, #32]
 8004c74:	b90b      	cbnz	r3, 8004c7a <_fflush_r+0x1a>
 8004c76:	f7ff fa99 	bl	80041ac <__sinit>
 8004c7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d0f3      	beq.n	8004c6a <_fflush_r+0xa>
 8004c82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004c84:	07d0      	lsls	r0, r2, #31
 8004c86:	d404      	bmi.n	8004c92 <_fflush_r+0x32>
 8004c88:	0599      	lsls	r1, r3, #22
 8004c8a:	d402      	bmi.n	8004c92 <_fflush_r+0x32>
 8004c8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c8e:	f7ff fb92 	bl	80043b6 <__retarget_lock_acquire_recursive>
 8004c92:	4628      	mov	r0, r5
 8004c94:	4621      	mov	r1, r4
 8004c96:	f7ff ff5d 	bl	8004b54 <__sflush_r>
 8004c9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c9c:	07da      	lsls	r2, r3, #31
 8004c9e:	4605      	mov	r5, r0
 8004ca0:	d4e4      	bmi.n	8004c6c <_fflush_r+0xc>
 8004ca2:	89a3      	ldrh	r3, [r4, #12]
 8004ca4:	059b      	lsls	r3, r3, #22
 8004ca6:	d4e1      	bmi.n	8004c6c <_fflush_r+0xc>
 8004ca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004caa:	f7ff fb85 	bl	80043b8 <__retarget_lock_release_recursive>
 8004cae:	e7dd      	b.n	8004c6c <_fflush_r+0xc>

08004cb0 <__swbuf_r>:
 8004cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cb2:	460e      	mov	r6, r1
 8004cb4:	4614      	mov	r4, r2
 8004cb6:	4605      	mov	r5, r0
 8004cb8:	b118      	cbz	r0, 8004cc2 <__swbuf_r+0x12>
 8004cba:	6a03      	ldr	r3, [r0, #32]
 8004cbc:	b90b      	cbnz	r3, 8004cc2 <__swbuf_r+0x12>
 8004cbe:	f7ff fa75 	bl	80041ac <__sinit>
 8004cc2:	69a3      	ldr	r3, [r4, #24]
 8004cc4:	60a3      	str	r3, [r4, #8]
 8004cc6:	89a3      	ldrh	r3, [r4, #12]
 8004cc8:	071a      	lsls	r2, r3, #28
 8004cca:	d525      	bpl.n	8004d18 <__swbuf_r+0x68>
 8004ccc:	6923      	ldr	r3, [r4, #16]
 8004cce:	b31b      	cbz	r3, 8004d18 <__swbuf_r+0x68>
 8004cd0:	6823      	ldr	r3, [r4, #0]
 8004cd2:	6922      	ldr	r2, [r4, #16]
 8004cd4:	1a98      	subs	r0, r3, r2
 8004cd6:	6963      	ldr	r3, [r4, #20]
 8004cd8:	b2f6      	uxtb	r6, r6
 8004cda:	4283      	cmp	r3, r0
 8004cdc:	4637      	mov	r7, r6
 8004cde:	dc04      	bgt.n	8004cea <__swbuf_r+0x3a>
 8004ce0:	4621      	mov	r1, r4
 8004ce2:	4628      	mov	r0, r5
 8004ce4:	f7ff ffbc 	bl	8004c60 <_fflush_r>
 8004ce8:	b9e0      	cbnz	r0, 8004d24 <__swbuf_r+0x74>
 8004cea:	68a3      	ldr	r3, [r4, #8]
 8004cec:	3b01      	subs	r3, #1
 8004cee:	60a3      	str	r3, [r4, #8]
 8004cf0:	6823      	ldr	r3, [r4, #0]
 8004cf2:	1c5a      	adds	r2, r3, #1
 8004cf4:	6022      	str	r2, [r4, #0]
 8004cf6:	701e      	strb	r6, [r3, #0]
 8004cf8:	6962      	ldr	r2, [r4, #20]
 8004cfa:	1c43      	adds	r3, r0, #1
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d004      	beq.n	8004d0a <__swbuf_r+0x5a>
 8004d00:	89a3      	ldrh	r3, [r4, #12]
 8004d02:	07db      	lsls	r3, r3, #31
 8004d04:	d506      	bpl.n	8004d14 <__swbuf_r+0x64>
 8004d06:	2e0a      	cmp	r6, #10
 8004d08:	d104      	bne.n	8004d14 <__swbuf_r+0x64>
 8004d0a:	4621      	mov	r1, r4
 8004d0c:	4628      	mov	r0, r5
 8004d0e:	f7ff ffa7 	bl	8004c60 <_fflush_r>
 8004d12:	b938      	cbnz	r0, 8004d24 <__swbuf_r+0x74>
 8004d14:	4638      	mov	r0, r7
 8004d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d18:	4621      	mov	r1, r4
 8004d1a:	4628      	mov	r0, r5
 8004d1c:	f000 f806 	bl	8004d2c <__swsetup_r>
 8004d20:	2800      	cmp	r0, #0
 8004d22:	d0d5      	beq.n	8004cd0 <__swbuf_r+0x20>
 8004d24:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004d28:	e7f4      	b.n	8004d14 <__swbuf_r+0x64>
	...

08004d2c <__swsetup_r>:
 8004d2c:	b538      	push	{r3, r4, r5, lr}
 8004d2e:	4b2a      	ldr	r3, [pc, #168]	; (8004dd8 <__swsetup_r+0xac>)
 8004d30:	4605      	mov	r5, r0
 8004d32:	6818      	ldr	r0, [r3, #0]
 8004d34:	460c      	mov	r4, r1
 8004d36:	b118      	cbz	r0, 8004d40 <__swsetup_r+0x14>
 8004d38:	6a03      	ldr	r3, [r0, #32]
 8004d3a:	b90b      	cbnz	r3, 8004d40 <__swsetup_r+0x14>
 8004d3c:	f7ff fa36 	bl	80041ac <__sinit>
 8004d40:	89a3      	ldrh	r3, [r4, #12]
 8004d42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d46:	0718      	lsls	r0, r3, #28
 8004d48:	d422      	bmi.n	8004d90 <__swsetup_r+0x64>
 8004d4a:	06d9      	lsls	r1, r3, #27
 8004d4c:	d407      	bmi.n	8004d5e <__swsetup_r+0x32>
 8004d4e:	2309      	movs	r3, #9
 8004d50:	602b      	str	r3, [r5, #0]
 8004d52:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004d56:	81a3      	strh	r3, [r4, #12]
 8004d58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d5c:	e034      	b.n	8004dc8 <__swsetup_r+0x9c>
 8004d5e:	0758      	lsls	r0, r3, #29
 8004d60:	d512      	bpl.n	8004d88 <__swsetup_r+0x5c>
 8004d62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d64:	b141      	cbz	r1, 8004d78 <__swsetup_r+0x4c>
 8004d66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d6a:	4299      	cmp	r1, r3
 8004d6c:	d002      	beq.n	8004d74 <__swsetup_r+0x48>
 8004d6e:	4628      	mov	r0, r5
 8004d70:	f7ff fb24 	bl	80043bc <_free_r>
 8004d74:	2300      	movs	r3, #0
 8004d76:	6363      	str	r3, [r4, #52]	; 0x34
 8004d78:	89a3      	ldrh	r3, [r4, #12]
 8004d7a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004d7e:	81a3      	strh	r3, [r4, #12]
 8004d80:	2300      	movs	r3, #0
 8004d82:	6063      	str	r3, [r4, #4]
 8004d84:	6923      	ldr	r3, [r4, #16]
 8004d86:	6023      	str	r3, [r4, #0]
 8004d88:	89a3      	ldrh	r3, [r4, #12]
 8004d8a:	f043 0308 	orr.w	r3, r3, #8
 8004d8e:	81a3      	strh	r3, [r4, #12]
 8004d90:	6923      	ldr	r3, [r4, #16]
 8004d92:	b94b      	cbnz	r3, 8004da8 <__swsetup_r+0x7c>
 8004d94:	89a3      	ldrh	r3, [r4, #12]
 8004d96:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004d9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d9e:	d003      	beq.n	8004da8 <__swsetup_r+0x7c>
 8004da0:	4621      	mov	r1, r4
 8004da2:	4628      	mov	r0, r5
 8004da4:	f000 f850 	bl	8004e48 <__smakebuf_r>
 8004da8:	89a0      	ldrh	r0, [r4, #12]
 8004daa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004dae:	f010 0301 	ands.w	r3, r0, #1
 8004db2:	d00a      	beq.n	8004dca <__swsetup_r+0x9e>
 8004db4:	2300      	movs	r3, #0
 8004db6:	60a3      	str	r3, [r4, #8]
 8004db8:	6963      	ldr	r3, [r4, #20]
 8004dba:	425b      	negs	r3, r3
 8004dbc:	61a3      	str	r3, [r4, #24]
 8004dbe:	6923      	ldr	r3, [r4, #16]
 8004dc0:	b943      	cbnz	r3, 8004dd4 <__swsetup_r+0xa8>
 8004dc2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004dc6:	d1c4      	bne.n	8004d52 <__swsetup_r+0x26>
 8004dc8:	bd38      	pop	{r3, r4, r5, pc}
 8004dca:	0781      	lsls	r1, r0, #30
 8004dcc:	bf58      	it	pl
 8004dce:	6963      	ldrpl	r3, [r4, #20]
 8004dd0:	60a3      	str	r3, [r4, #8]
 8004dd2:	e7f4      	b.n	8004dbe <__swsetup_r+0x92>
 8004dd4:	2000      	movs	r0, #0
 8004dd6:	e7f7      	b.n	8004dc8 <__swsetup_r+0x9c>
 8004dd8:	20000064 	.word	0x20000064

08004ddc <_sbrk_r>:
 8004ddc:	b538      	push	{r3, r4, r5, lr}
 8004dde:	4d06      	ldr	r5, [pc, #24]	; (8004df8 <_sbrk_r+0x1c>)
 8004de0:	2300      	movs	r3, #0
 8004de2:	4604      	mov	r4, r0
 8004de4:	4608      	mov	r0, r1
 8004de6:	602b      	str	r3, [r5, #0]
 8004de8:	f7fc f998 	bl	800111c <_sbrk>
 8004dec:	1c43      	adds	r3, r0, #1
 8004dee:	d102      	bne.n	8004df6 <_sbrk_r+0x1a>
 8004df0:	682b      	ldr	r3, [r5, #0]
 8004df2:	b103      	cbz	r3, 8004df6 <_sbrk_r+0x1a>
 8004df4:	6023      	str	r3, [r4, #0]
 8004df6:	bd38      	pop	{r3, r4, r5, pc}
 8004df8:	200002a8 	.word	0x200002a8

08004dfc <__swhatbuf_r>:
 8004dfc:	b570      	push	{r4, r5, r6, lr}
 8004dfe:	460c      	mov	r4, r1
 8004e00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e04:	2900      	cmp	r1, #0
 8004e06:	b096      	sub	sp, #88	; 0x58
 8004e08:	4615      	mov	r5, r2
 8004e0a:	461e      	mov	r6, r3
 8004e0c:	da0d      	bge.n	8004e2a <__swhatbuf_r+0x2e>
 8004e0e:	89a3      	ldrh	r3, [r4, #12]
 8004e10:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004e14:	f04f 0100 	mov.w	r1, #0
 8004e18:	bf0c      	ite	eq
 8004e1a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004e1e:	2340      	movne	r3, #64	; 0x40
 8004e20:	2000      	movs	r0, #0
 8004e22:	6031      	str	r1, [r6, #0]
 8004e24:	602b      	str	r3, [r5, #0]
 8004e26:	b016      	add	sp, #88	; 0x58
 8004e28:	bd70      	pop	{r4, r5, r6, pc}
 8004e2a:	466a      	mov	r2, sp
 8004e2c:	f000 f848 	bl	8004ec0 <_fstat_r>
 8004e30:	2800      	cmp	r0, #0
 8004e32:	dbec      	blt.n	8004e0e <__swhatbuf_r+0x12>
 8004e34:	9901      	ldr	r1, [sp, #4]
 8004e36:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004e3a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004e3e:	4259      	negs	r1, r3
 8004e40:	4159      	adcs	r1, r3
 8004e42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e46:	e7eb      	b.n	8004e20 <__swhatbuf_r+0x24>

08004e48 <__smakebuf_r>:
 8004e48:	898b      	ldrh	r3, [r1, #12]
 8004e4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e4c:	079d      	lsls	r5, r3, #30
 8004e4e:	4606      	mov	r6, r0
 8004e50:	460c      	mov	r4, r1
 8004e52:	d507      	bpl.n	8004e64 <__smakebuf_r+0x1c>
 8004e54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004e58:	6023      	str	r3, [r4, #0]
 8004e5a:	6123      	str	r3, [r4, #16]
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	6163      	str	r3, [r4, #20]
 8004e60:	b002      	add	sp, #8
 8004e62:	bd70      	pop	{r4, r5, r6, pc}
 8004e64:	ab01      	add	r3, sp, #4
 8004e66:	466a      	mov	r2, sp
 8004e68:	f7ff ffc8 	bl	8004dfc <__swhatbuf_r>
 8004e6c:	9900      	ldr	r1, [sp, #0]
 8004e6e:	4605      	mov	r5, r0
 8004e70:	4630      	mov	r0, r6
 8004e72:	f7ff fb0f 	bl	8004494 <_malloc_r>
 8004e76:	b948      	cbnz	r0, 8004e8c <__smakebuf_r+0x44>
 8004e78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e7c:	059a      	lsls	r2, r3, #22
 8004e7e:	d4ef      	bmi.n	8004e60 <__smakebuf_r+0x18>
 8004e80:	f023 0303 	bic.w	r3, r3, #3
 8004e84:	f043 0302 	orr.w	r3, r3, #2
 8004e88:	81a3      	strh	r3, [r4, #12]
 8004e8a:	e7e3      	b.n	8004e54 <__smakebuf_r+0xc>
 8004e8c:	89a3      	ldrh	r3, [r4, #12]
 8004e8e:	6020      	str	r0, [r4, #0]
 8004e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e94:	81a3      	strh	r3, [r4, #12]
 8004e96:	9b00      	ldr	r3, [sp, #0]
 8004e98:	6163      	str	r3, [r4, #20]
 8004e9a:	9b01      	ldr	r3, [sp, #4]
 8004e9c:	6120      	str	r0, [r4, #16]
 8004e9e:	b15b      	cbz	r3, 8004eb8 <__smakebuf_r+0x70>
 8004ea0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ea4:	4630      	mov	r0, r6
 8004ea6:	f000 f81d 	bl	8004ee4 <_isatty_r>
 8004eaa:	b128      	cbz	r0, 8004eb8 <__smakebuf_r+0x70>
 8004eac:	89a3      	ldrh	r3, [r4, #12]
 8004eae:	f023 0303 	bic.w	r3, r3, #3
 8004eb2:	f043 0301 	orr.w	r3, r3, #1
 8004eb6:	81a3      	strh	r3, [r4, #12]
 8004eb8:	89a3      	ldrh	r3, [r4, #12]
 8004eba:	431d      	orrs	r5, r3
 8004ebc:	81a5      	strh	r5, [r4, #12]
 8004ebe:	e7cf      	b.n	8004e60 <__smakebuf_r+0x18>

08004ec0 <_fstat_r>:
 8004ec0:	b538      	push	{r3, r4, r5, lr}
 8004ec2:	4d07      	ldr	r5, [pc, #28]	; (8004ee0 <_fstat_r+0x20>)
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	4604      	mov	r4, r0
 8004ec8:	4608      	mov	r0, r1
 8004eca:	4611      	mov	r1, r2
 8004ecc:	602b      	str	r3, [r5, #0]
 8004ece:	f7fc f8fc 	bl	80010ca <_fstat>
 8004ed2:	1c43      	adds	r3, r0, #1
 8004ed4:	d102      	bne.n	8004edc <_fstat_r+0x1c>
 8004ed6:	682b      	ldr	r3, [r5, #0]
 8004ed8:	b103      	cbz	r3, 8004edc <_fstat_r+0x1c>
 8004eda:	6023      	str	r3, [r4, #0]
 8004edc:	bd38      	pop	{r3, r4, r5, pc}
 8004ede:	bf00      	nop
 8004ee0:	200002a8 	.word	0x200002a8

08004ee4 <_isatty_r>:
 8004ee4:	b538      	push	{r3, r4, r5, lr}
 8004ee6:	4d06      	ldr	r5, [pc, #24]	; (8004f00 <_isatty_r+0x1c>)
 8004ee8:	2300      	movs	r3, #0
 8004eea:	4604      	mov	r4, r0
 8004eec:	4608      	mov	r0, r1
 8004eee:	602b      	str	r3, [r5, #0]
 8004ef0:	f7fc f8fb 	bl	80010ea <_isatty>
 8004ef4:	1c43      	adds	r3, r0, #1
 8004ef6:	d102      	bne.n	8004efe <_isatty_r+0x1a>
 8004ef8:	682b      	ldr	r3, [r5, #0]
 8004efa:	b103      	cbz	r3, 8004efe <_isatty_r+0x1a>
 8004efc:	6023      	str	r3, [r4, #0]
 8004efe:	bd38      	pop	{r3, r4, r5, pc}
 8004f00:	200002a8 	.word	0x200002a8

08004f04 <_init>:
 8004f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f06:	bf00      	nop
 8004f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f0a:	bc08      	pop	{r3}
 8004f0c:	469e      	mov	lr, r3
 8004f0e:	4770      	bx	lr

08004f10 <_fini>:
 8004f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f12:	bf00      	nop
 8004f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f16:	bc08      	pop	{r3}
 8004f18:	469e      	mov	lr, r3
 8004f1a:	4770      	bx	lr
