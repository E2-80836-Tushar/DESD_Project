
USART_NEW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bbc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08003d44  08003d44  00013d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003df4  08003df4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003df4  08003df4  00013df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003dfc  08003dfc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dfc  08003dfc  00013dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e00  08003e00  00013e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003e04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000ac  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000b8  200000b8  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000ca49  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001b99  00000000  00000000  0002cac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c08  00000000  00000000  0002e668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000977  00000000  00000000  0002f270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020bf5  00000000  00000000  0002fbe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000d722  00000000  00000000  000507dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ca764  00000000  00000000  0005defe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000032f0  00000000  00000000  00128664  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  0012b954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003d2c 	.word	0x08003d2c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003d2c 	.word	0x08003d2c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <receive_choice>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void receive_choice(char str[])
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
     int i=0;
 80004cc:	2300      	movs	r3, #0
 80004ce:	60fb      	str	r3, [r7, #12]
     char ch;
     do{
         HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80004d0:	f107 010b 	add.w	r1, r7, #11
 80004d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004d8:	2201      	movs	r2, #1
 80004da:	480f      	ldr	r0, [pc, #60]	; (8000518 <receive_choice+0x54>)
 80004dc:	f002 fc23 	bl	8002d26 <HAL_UART_Receive>
         str[i++]=ch;
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	1c5a      	adds	r2, r3, #1
 80004e4:	60fa      	str	r2, [r7, #12]
 80004e6:	461a      	mov	r2, r3
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	4413      	add	r3, r2
 80004ec:	7afa      	ldrb	r2, [r7, #11]
 80004ee:	701a      	strb	r2, [r3, #0]
     }while(ch!='\r');
 80004f0:	7afb      	ldrb	r3, [r7, #11]
 80004f2:	2b0d      	cmp	r3, #13
 80004f4:	d1ec      	bne.n	80004d0 <receive_choice+0xc>
        str[i++]='\n';
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	1c5a      	adds	r2, r3, #1
 80004fa:	60fa      	str	r2, [r7, #12]
 80004fc:	461a      	mov	r2, r3
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	4413      	add	r3, r2
 8000502:	220a      	movs	r2, #10
 8000504:	701a      	strb	r2, [r3, #0]
        str[i]='\0';
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	687a      	ldr	r2, [r7, #4]
 800050a:	4413      	add	r3, r2
 800050c:	2200      	movs	r2, #0
 800050e:	701a      	strb	r2, [r3, #0]
}
 8000510:	bf00      	nop
 8000512:	3710      	adds	r7, #16
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	20000070 	.word	0x20000070

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b094      	sub	sp, #80	; 0x50
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char str[20];
	    uint32_t choice;
	    int value = 0;
 8000522:	2300      	movs	r3, #0
 8000524:	64bb      	str	r3, [r7, #72]	; 0x48
	    char str1[20];
	    char str2[20];
	    int number;
	    int mask = 1;
 8000526:	2301      	movs	r3, #1
 8000528:	647b      	str	r3, [r7, #68]	; 0x44
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052a:	f000 fba3 	bl	8000c74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052e:	f000 f8b9 	bl	80006a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000532:	f000 f9eb 	bl	800090c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000536:	f000 f9bf 	bl	80008b8 <MX_USART2_UART_Init>
  MX_TIM8_Init();
 800053a:	f000 f91d 	bl	8000778 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  int i=0;
 800053e:	2300      	movs	r3, #0
 8000540:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);
 8000542:	2201      	movs	r2, #1
 8000544:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000548:	484b      	ldr	r0, [pc, #300]	; (8000678 <main+0x15c>)
 800054a:	f000 ff69 	bl	8001420 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);
 800054e:	2200      	movs	r2, #0
 8000550:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000554:	4848      	ldr	r0, [pc, #288]	; (8000678 <main+0x15c>)
 8000556:	f000 ff63 	bl	8001420 <HAL_GPIO_WritePin>

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800055a:	2100      	movs	r1, #0
 800055c:	4847      	ldr	r0, [pc, #284]	; (800067c <main+0x160>)
 800055e:	f001 fcd3 	bl	8001f08 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  do{
	  	  HAL_UART_Transmit(&huart2, (uint8_t *)"Name = Pavan Pandharinath Karpe\r\n", sizeof("Name = Pavan Pandharinath Karpe\r\n"), HAL_MAX_DELAY);
 8000562:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000566:	2222      	movs	r2, #34	; 0x22
 8000568:	4945      	ldr	r1, [pc, #276]	; (8000680 <main+0x164>)
 800056a:	4846      	ldr	r0, [pc, #280]	; (8000684 <main+0x168>)
 800056c:	f002 fb49 	bl	8002c02 <HAL_UART_Transmit>
	  	  HAL_UART_Transmit(&huart2, (uint8_t *)"ROLL NO: 80807\r\n", sizeof("ROLL NO: 80807\r\n"), HAL_MAX_DELAY);
 8000570:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000574:	2211      	movs	r2, #17
 8000576:	4944      	ldr	r1, [pc, #272]	; (8000688 <main+0x16c>)
 8000578:	4842      	ldr	r0, [pc, #264]	; (8000684 <main+0x168>)
 800057a:	f002 fb42 	bl	8002c02 <HAL_UART_Transmit>

	  	  HAL_UART_Transmit(&huart2, (uint8_t *)"list of cases\r\n", sizeof("list of cases\r\n"), HAL_MAX_DELAY);
 800057e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000582:	2210      	movs	r2, #16
 8000584:	4941      	ldr	r1, [pc, #260]	; (800068c <main+0x170>)
 8000586:	483f      	ldr	r0, [pc, #252]	; (8000684 <main+0x168>)
 8000588:	f002 fb3b 	bl	8002c02 <HAL_UART_Transmit>
	  	  HAL_UART_Transmit(&huart2, (uint8_t *)"1. LED Pattern\r\n", sizeof("1. LED Pattern\r\n"), HAL_MAX_DELAY);
 800058c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000590:	2211      	movs	r2, #17
 8000592:	493f      	ldr	r1, [pc, #252]	; (8000690 <main+0x174>)
 8000594:	483b      	ldr	r0, [pc, #236]	; (8000684 <main+0x168>)
 8000596:	f002 fb34 	bl	8002c02 <HAL_UART_Transmit>
	  	  HAL_UART_Transmit(&huart2, (uint8_t *)"2. Parity Check\r\n", sizeof("2. Parity Check\r\n"), HAL_MAX_DELAY);
 800059a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800059e:	2212      	movs	r2, #18
 80005a0:	493c      	ldr	r1, [pc, #240]	; (8000694 <main+0x178>)
 80005a2:	4838      	ldr	r0, [pc, #224]	; (8000684 <main+0x168>)
 80005a4:	f002 fb2d 	bl	8002c02 <HAL_UART_Transmit>
	  	  HAL_UART_Transmit(&huart2, (uint8_t *)"3. ADC Reading\r\n", sizeof("3. ADC Reading\r\n"), HAL_MAX_DELAY);
 80005a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005ac:	2211      	movs	r2, #17
 80005ae:	493a      	ldr	r1, [pc, #232]	; (8000698 <main+0x17c>)
 80005b0:	4834      	ldr	r0, [pc, #208]	; (8000684 <main+0x168>)
 80005b2:	f002 fb26 	bl	8002c02 <HAL_UART_Transmit>
	  	  HAL_UART_Transmit(&huart2, (uint8_t *)"Enter your choice\r\n", sizeof("Enter your choice\r\n"), HAL_MAX_DELAY);
 80005b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005ba:	2214      	movs	r2, #20
 80005bc:	4937      	ldr	r1, [pc, #220]	; (800069c <main+0x180>)
 80005be:	4831      	ldr	r0, [pc, #196]	; (8000684 <main+0x168>)
 80005c0:	f002 fb1f 	bl	8002c02 <HAL_UART_Transmit>

	  	  receive_choice(str);
 80005c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff ff7b 	bl	80004c4 <receive_choice>
	  	  choice = str[0]-'0';
 80005ce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80005d2:	3b30      	subs	r3, #48	; 0x30
 80005d4:	643b      	str	r3, [r7, #64]	; 0x40

	  	 switch(choice)
 80005d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80005d8:	2b03      	cmp	r3, #3
 80005da:	d035      	beq.n	8000648 <main+0x12c>
 80005dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80005de:	2b03      	cmp	r3, #3
 80005e0:	d8bf      	bhi.n	8000562 <main+0x46>
 80005e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d003      	beq.n	80005f0 <main+0xd4>
 80005e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80005ea:	2b02      	cmp	r3, #2
 80005ec:	d016      	beq.n	800061c <main+0x100>
 80005ee:	e041      	b.n	8000674 <main+0x158>
	  		  {
	  		  case 1:
	  			while (1)
	  			  {
	  				for(i=20; i<=60;i++)
 80005f0:	2314      	movs	r3, #20
 80005f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80005f4:	e00e      	b.n	8000614 <main+0xf8>
	  				  {
	  					htim8.Instance->CCR1 = i;
 80005f6:	4b21      	ldr	r3, [pc, #132]	; (800067c <main+0x160>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80005fc:	635a      	str	r2, [r3, #52]	; 0x34
	  					HAL_Delay(100);
 80005fe:	2064      	movs	r0, #100	; 0x64
 8000600:	f000 fbaa 	bl	8000d58 <HAL_Delay>
	  					HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000604:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000608:	4825      	ldr	r0, [pc, #148]	; (80006a0 <main+0x184>)
 800060a:	f000 ff22 	bl	8001452 <HAL_GPIO_TogglePin>
	  				for(i=20; i<=60;i++)
 800060e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000610:	3301      	adds	r3, #1
 8000612:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000616:	2b3c      	cmp	r3, #60	; 0x3c
 8000618:	dded      	ble.n	80005f6 <main+0xda>
 800061a:	e7e9      	b.n	80005f0 <main+0xd4>
	  			  break;

	  		  case 2:
	  			while (1)
	  				{
	  	  				for(i=60; i<=100;i++)
 800061c:	233c      	movs	r3, #60	; 0x3c
 800061e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000620:	e00e      	b.n	8000640 <main+0x124>
	  	  				{
	  						htim8.Instance->CCR1 = i;
 8000622:	4b16      	ldr	r3, [pc, #88]	; (800067c <main+0x160>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000628:	635a      	str	r2, [r3, #52]	; 0x34
		  					HAL_Delay(100);
 800062a:	2064      	movs	r0, #100	; 0x64
 800062c:	f000 fb94 	bl	8000d58 <HAL_Delay>
	  				  		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000630:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000634:	481a      	ldr	r0, [pc, #104]	; (80006a0 <main+0x184>)
 8000636:	f000 ff0c 	bl	8001452 <HAL_GPIO_TogglePin>
	  	  				for(i=60; i<=100;i++)
 800063a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800063c:	3301      	adds	r3, #1
 800063e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000642:	2b64      	cmp	r3, #100	; 0x64
 8000644:	dded      	ble.n	8000622 <main+0x106>
 8000646:	e7e9      	b.n	800061c <main+0x100>
	  					break;

	  		  case 3:
	  			while (1)
	  				{
	  	  				for(i=100; i<=20;i++)
 8000648:	2364      	movs	r3, #100	; 0x64
 800064a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800064c:	e00e      	b.n	800066c <main+0x150>
	  	  				{
	  						htim8.Instance->CCR1 = i;
 800064e:	4b0b      	ldr	r3, [pc, #44]	; (800067c <main+0x160>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000654:	635a      	str	r2, [r3, #52]	; 0x34
	 	 					HAL_Delay(100);
 8000656:	2064      	movs	r0, #100	; 0x64
 8000658:	f000 fb7e 	bl	8000d58 <HAL_Delay>
							HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800065c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000660:	480f      	ldr	r0, [pc, #60]	; (80006a0 <main+0x184>)
 8000662:	f000 fef6 	bl	8001452 <HAL_GPIO_TogglePin>
	  	  				for(i=100; i<=20;i++)
 8000666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000668:	3301      	adds	r3, #1
 800066a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800066c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800066e:	2b14      	cmp	r3, #20
 8000670:	dded      	ble.n	800064e <main+0x132>
 8000672:	e7e9      	b.n	8000648 <main+0x12c>
	  	  HAL_UART_Transmit(&huart2, (uint8_t *)"Name = Pavan Pandharinath Karpe\r\n", sizeof("Name = Pavan Pandharinath Karpe\r\n"), HAL_MAX_DELAY);
 8000674:	e775      	b.n	8000562 <main+0x46>
 8000676:	bf00      	nop
 8000678:	40020800 	.word	0x40020800
 800067c:	20000028 	.word	0x20000028
 8000680:	08003d44 	.word	0x08003d44
 8000684:	20000070 	.word	0x20000070
 8000688:	08003d68 	.word	0x08003d68
 800068c:	08003d7c 	.word	0x08003d7c
 8000690:	08003d8c 	.word	0x08003d8c
 8000694:	08003da0 	.word	0x08003da0
 8000698:	08003db4 	.word	0x08003db4
 800069c:	08003dc8 	.word	0x08003dc8
 80006a0:	40020c00 	.word	0x40020c00

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b094      	sub	sp, #80	; 0x50
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	f107 0320 	add.w	r3, r7, #32
 80006ae:	2230      	movs	r2, #48	; 0x30
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f003 fb0e 	bl	8003cd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c8:	2300      	movs	r3, #0
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	4b28      	ldr	r3, [pc, #160]	; (8000770 <SystemClock_Config+0xcc>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	4a27      	ldr	r2, [pc, #156]	; (8000770 <SystemClock_Config+0xcc>)
 80006d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d6:	6413      	str	r3, [r2, #64]	; 0x40
 80006d8:	4b25      	ldr	r3, [pc, #148]	; (8000770 <SystemClock_Config+0xcc>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e4:	2300      	movs	r3, #0
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	4b22      	ldr	r3, [pc, #136]	; (8000774 <SystemClock_Config+0xd0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a21      	ldr	r2, [pc, #132]	; (8000774 <SystemClock_Config+0xd0>)
 80006ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f2:	6013      	str	r3, [r2, #0]
 80006f4:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <SystemClock_Config+0xd0>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000700:	2302      	movs	r3, #2
 8000702:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000704:	2301      	movs	r3, #1
 8000706:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000708:	2310      	movs	r3, #16
 800070a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070c:	2302      	movs	r3, #2
 800070e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000710:	2300      	movs	r3, #0
 8000712:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000714:	2308      	movs	r3, #8
 8000716:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000718:	2332      	movs	r3, #50	; 0x32
 800071a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800071c:	2304      	movs	r3, #4
 800071e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000720:	2307      	movs	r3, #7
 8000722:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000724:	f107 0320 	add.w	r3, r7, #32
 8000728:	4618      	mov	r0, r3
 800072a:	f000 fead 	bl	8001488 <HAL_RCC_OscConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000734:	f000 f954 	bl	80009e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000738:	230f      	movs	r3, #15
 800073a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073c:	2302      	movs	r3, #2
 800073e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000744:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000748:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800074a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f001 f90e 	bl	8001978 <HAL_RCC_ClockConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000762:	f000 f93d 	bl	80009e0 <Error_Handler>
  }
}
 8000766:	bf00      	nop
 8000768:	3750      	adds	r7, #80	; 0x50
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800
 8000774:	40007000 	.word	0x40007000

08000778 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b096      	sub	sp, #88	; 0x58
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800077e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800078c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]
 80007a6:	615a      	str	r2, [r3, #20]
 80007a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2220      	movs	r2, #32
 80007ae:	2100      	movs	r1, #0
 80007b0:	4618      	mov	r0, r3
 80007b2:	f003 fa8f 	bl	8003cd4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80007b6:	4b3e      	ldr	r3, [pc, #248]	; (80008b0 <MX_TIM8_Init+0x138>)
 80007b8:	4a3e      	ldr	r2, [pc, #248]	; (80008b4 <MX_TIM8_Init+0x13c>)
 80007ba:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 72-1;
 80007bc:	4b3c      	ldr	r3, [pc, #240]	; (80008b0 <MX_TIM8_Init+0x138>)
 80007be:	2247      	movs	r2, #71	; 0x47
 80007c0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c2:	4b3b      	ldr	r3, [pc, #236]	; (80008b0 <MX_TIM8_Init+0x138>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 80007c8:	4b39      	ldr	r3, [pc, #228]	; (80008b0 <MX_TIM8_Init+0x138>)
 80007ca:	2263      	movs	r2, #99	; 0x63
 80007cc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ce:	4b38      	ldr	r3, [pc, #224]	; (80008b0 <MX_TIM8_Init+0x138>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80007d4:	4b36      	ldr	r3, [pc, #216]	; (80008b0 <MX_TIM8_Init+0x138>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007da:	4b35      	ldr	r3, [pc, #212]	; (80008b0 <MX_TIM8_Init+0x138>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80007e0:	4833      	ldr	r0, [pc, #204]	; (80008b0 <MX_TIM8_Init+0x138>)
 80007e2:	f001 fae9 	bl	8001db8 <HAL_TIM_Base_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 80007ec:	f000 f8f8 	bl	80009e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80007f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007fa:	4619      	mov	r1, r3
 80007fc:	482c      	ldr	r0, [pc, #176]	; (80008b0 <MX_TIM8_Init+0x138>)
 80007fe:	f001 fd0d 	bl	800221c <HAL_TIM_ConfigClockSource>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8000808:	f000 f8ea 	bl	80009e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800080c:	4828      	ldr	r0, [pc, #160]	; (80008b0 <MX_TIM8_Init+0x138>)
 800080e:	f001 fb22 	bl	8001e56 <HAL_TIM_PWM_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8000818:	f000 f8e2 	bl	80009e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800081c:	2300      	movs	r3, #0
 800081e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000820:	2300      	movs	r3, #0
 8000822:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000824:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000828:	4619      	mov	r1, r3
 800082a:	4821      	ldr	r0, [pc, #132]	; (80008b0 <MX_TIM8_Init+0x138>)
 800082c:	f002 f8ce 	bl	80029cc <HAL_TIMEx_MasterConfigSynchronization>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8000836:	f000 f8d3 	bl	80009e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800083a:	2360      	movs	r3, #96	; 0x60
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800083e:	2300      	movs	r3, #0
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000842:	2300      	movs	r3, #0
 8000844:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000846:	2300      	movs	r3, #0
 8000848:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800084a:	2300      	movs	r3, #0
 800084c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800084e:	2300      	movs	r3, #0
 8000850:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000852:	2300      	movs	r3, #0
 8000854:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000856:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800085a:	2200      	movs	r2, #0
 800085c:	4619      	mov	r1, r3
 800085e:	4814      	ldr	r0, [pc, #80]	; (80008b0 <MX_TIM8_Init+0x138>)
 8000860:	f001 fc1a 	bl	8002098 <HAL_TIM_PWM_ConfigChannel>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 800086a:	f000 f8b9 	bl	80009e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000872:	2300      	movs	r3, #0
 8000874:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800087e:	2300      	movs	r3, #0
 8000880:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000882:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000886:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000888:	2300      	movs	r3, #0
 800088a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	4619      	mov	r1, r3
 8000890:	4807      	ldr	r0, [pc, #28]	; (80008b0 <MX_TIM8_Init+0x138>)
 8000892:	f002 f917 	bl	8002ac4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 800089c:	f000 f8a0 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80008a0:	4803      	ldr	r0, [pc, #12]	; (80008b0 <MX_TIM8_Init+0x138>)
 80008a2:	f000 f8ed 	bl	8000a80 <HAL_TIM_MspPostInit>

}
 80008a6:	bf00      	nop
 80008a8:	3758      	adds	r7, #88	; 0x58
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000028 	.word	0x20000028
 80008b4:	40010400 	.word	0x40010400

080008b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008bc:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008be:	4a12      	ldr	r2, [pc, #72]	; (8000908 <MX_USART2_UART_Init+0x50>)
 80008c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008c2:	4b10      	ldr	r3, [pc, #64]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008de:	220c      	movs	r2, #12
 80008e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008f0:	f002 f93a 	bl	8002b68 <HAL_UART_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008fa:	f000 f871 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000070 	.word	0x20000070
 8000908:	40004400 	.word	0x40004400

0800090c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b088      	sub	sp, #32
 8000910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000912:	f107 030c 	add.w	r3, r7, #12
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	4b2b      	ldr	r3, [pc, #172]	; (80009d4 <MX_GPIO_Init+0xc8>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a2a      	ldr	r2, [pc, #168]	; (80009d4 <MX_GPIO_Init+0xc8>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b28      	ldr	r3, [pc, #160]	; (80009d4 <MX_GPIO_Init+0xc8>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	4b24      	ldr	r3, [pc, #144]	; (80009d4 <MX_GPIO_Init+0xc8>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a23      	ldr	r2, [pc, #140]	; (80009d4 <MX_GPIO_Init+0xc8>)
 8000948:	f043 0308 	orr.w	r3, r3, #8
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b21      	ldr	r3, [pc, #132]	; (80009d4 <MX_GPIO_Init+0xc8>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0308 	and.w	r3, r3, #8
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	603b      	str	r3, [r7, #0]
 800095e:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <MX_GPIO_Init+0xc8>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a1c      	ldr	r2, [pc, #112]	; (80009d4 <MX_GPIO_Init+0xc8>)
 8000964:	f043 0304 	orr.w	r3, r3, #4
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <MX_GPIO_Init+0xc8>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0304 	and.w	r3, r3, #4
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 800097c:	4816      	ldr	r0, [pc, #88]	; (80009d8 <MX_GPIO_Init+0xcc>)
 800097e:	f000 fd4f 	bl	8001420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000988:	4814      	ldr	r0, [pc, #80]	; (80009dc <MX_GPIO_Init+0xd0>)
 800098a:	f000 fd49 	bl	8001420 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 800098e:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000992:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000994:	2301      	movs	r3, #1
 8000996:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099c:	2300      	movs	r3, #0
 800099e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009a0:	f107 030c 	add.w	r3, r7, #12
 80009a4:	4619      	mov	r1, r3
 80009a6:	480c      	ldr	r0, [pc, #48]	; (80009d8 <MX_GPIO_Init+0xcc>)
 80009a8:	f000 fb9e 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009be:	f107 030c 	add.w	r3, r7, #12
 80009c2:	4619      	mov	r1, r3
 80009c4:	4805      	ldr	r0, [pc, #20]	; (80009dc <MX_GPIO_Init+0xd0>)
 80009c6:	f000 fb8f 	bl	80010e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ca:	bf00      	nop
 80009cc:	3720      	adds	r7, #32
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40020c00 	.word	0x40020c00
 80009dc:	40020800 	.word	0x40020800

080009e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e4:	b672      	cpsid	i
}
 80009e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <Error_Handler+0x8>
	...

080009ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <HAL_MspInit+0x4c>)
 80009f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fa:	4a0f      	ldr	r2, [pc, #60]	; (8000a38 <HAL_MspInit+0x4c>)
 80009fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a00:	6453      	str	r3, [r2, #68]	; 0x44
 8000a02:	4b0d      	ldr	r3, [pc, #52]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	603b      	str	r3, [r7, #0]
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	4a08      	ldr	r2, [pc, #32]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a2a:	2007      	movs	r0, #7
 8000a2c:	f000 fa88 	bl	8000f40 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a30:	bf00      	nop
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40023800 	.word	0x40023800

08000a3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a0b      	ldr	r2, [pc, #44]	; (8000a78 <HAL_TIM_Base_MspInit+0x3c>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d10d      	bne.n	8000a6a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <HAL_TIM_Base_MspInit+0x40>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a56:	4a09      	ldr	r2, [pc, #36]	; (8000a7c <HAL_TIM_Base_MspInit+0x40>)
 8000a58:	f043 0302 	orr.w	r3, r3, #2
 8000a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a5e:	4b07      	ldr	r3, [pc, #28]	; (8000a7c <HAL_TIM_Base_MspInit+0x40>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a62:	f003 0302 	and.w	r3, r3, #2
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000a6a:	bf00      	nop
 8000a6c:	3714      	adds	r7, #20
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	40010400 	.word	0x40010400
 8000a7c:	40023800 	.word	0x40023800

08000a80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b088      	sub	sp, #32
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	f107 030c 	add.w	r3, r7, #12
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a12      	ldr	r2, [pc, #72]	; (8000ae8 <HAL_TIM_MspPostInit+0x68>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d11d      	bne.n	8000ade <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	4b11      	ldr	r3, [pc, #68]	; (8000aec <HAL_TIM_MspPostInit+0x6c>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a10      	ldr	r2, [pc, #64]	; (8000aec <HAL_TIM_MspPostInit+0x6c>)
 8000aac:	f043 0304 	orr.w	r3, r3, #4
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <HAL_TIM_MspPostInit+0x6c>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0304 	and.w	r3, r3, #4
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000abe:	2340      	movs	r3, #64	; 0x40
 8000ac0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad2:	f107 030c 	add.w	r3, r7, #12
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4805      	ldr	r0, [pc, #20]	; (8000af0 <HAL_TIM_MspPostInit+0x70>)
 8000ada:	f000 fb05 	bl	80010e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000ade:	bf00      	nop
 8000ae0:	3720      	adds	r7, #32
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40010400 	.word	0x40010400
 8000aec:	40023800 	.word	0x40023800
 8000af0:	40020800 	.word	0x40020800

08000af4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08a      	sub	sp, #40	; 0x28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a1d      	ldr	r2, [pc, #116]	; (8000b88 <HAL_UART_MspInit+0x94>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d133      	bne.n	8000b7e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	4b1c      	ldr	r3, [pc, #112]	; (8000b8c <HAL_UART_MspInit+0x98>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	4a1b      	ldr	r2, [pc, #108]	; (8000b8c <HAL_UART_MspInit+0x98>)
 8000b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b24:	6413      	str	r3, [r2, #64]	; 0x40
 8000b26:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <HAL_UART_MspInit+0x98>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <HAL_UART_MspInit+0x98>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a14      	ldr	r2, [pc, #80]	; (8000b8c <HAL_UART_MspInit+0x98>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <HAL_UART_MspInit+0x98>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b4e:	230c      	movs	r3, #12
 8000b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b52:	2302      	movs	r3, #2
 8000b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b5e:	2307      	movs	r3, #7
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4619      	mov	r1, r3
 8000b68:	4809      	ldr	r0, [pc, #36]	; (8000b90 <HAL_UART_MspInit+0x9c>)
 8000b6a:	f000 fabd 	bl	80010e8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2100      	movs	r1, #0
 8000b72:	2026      	movs	r0, #38	; 0x26
 8000b74:	f000 f9ef 	bl	8000f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b78:	2026      	movs	r0, #38	; 0x26
 8000b7a:	f000 fa08 	bl	8000f8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b7e:	bf00      	nop
 8000b80:	3728      	adds	r7, #40	; 0x28
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40004400 	.word	0x40004400
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020000 	.word	0x40020000

08000b94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <NMI_Handler+0x4>

08000b9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9e:	e7fe      	b.n	8000b9e <HardFault_Handler+0x4>

08000ba0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <MemManage_Handler+0x4>

08000ba6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000baa:	e7fe      	b.n	8000baa <BusFault_Handler+0x4>

08000bac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <UsageFault_Handler+0x4>

08000bb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be0:	f000 f89a 	bl	8000d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bec:	4802      	ldr	r0, [pc, #8]	; (8000bf8 <USART2_IRQHandler+0x10>)
 8000bee:	f002 f93d 	bl	8002e6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000070 	.word	0x20000070

08000bfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <SystemInit+0x20>)
 8000c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c06:	4a05      	ldr	r2, [pc, #20]	; (8000c1c <SystemInit+0x20>)
 8000c08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c24:	480d      	ldr	r0, [pc, #52]	; (8000c5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c26:	490e      	ldr	r1, [pc, #56]	; (8000c60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c28:	4a0e      	ldr	r2, [pc, #56]	; (8000c64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c2c:	e002      	b.n	8000c34 <LoopCopyDataInit>

08000c2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c32:	3304      	adds	r3, #4

08000c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c38:	d3f9      	bcc.n	8000c2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3a:	4a0b      	ldr	r2, [pc, #44]	; (8000c68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c3c:	4c0b      	ldr	r4, [pc, #44]	; (8000c6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c40:	e001      	b.n	8000c46 <LoopFillZerobss>

08000c42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c44:	3204      	adds	r2, #4

08000c46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c48:	d3fb      	bcc.n	8000c42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c4a:	f7ff ffd7 	bl	8000bfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c4e:	f003 f849 	bl	8003ce4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c52:	f7ff fc63 	bl	800051c <main>
  bx  lr    
 8000c56:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c60:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c64:	08003e04 	.word	0x08003e04
  ldr r2, =_sbss
 8000c68:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c6c:	200000b8 	.word	0x200000b8

08000c70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c70:	e7fe      	b.n	8000c70 <ADC_IRQHandler>
	...

08000c74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c78:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <HAL_Init+0x40>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a0d      	ldr	r2, [pc, #52]	; (8000cb4 <HAL_Init+0x40>)
 8000c7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c84:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <HAL_Init+0x40>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <HAL_Init+0x40>)
 8000c8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c90:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <HAL_Init+0x40>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a07      	ldr	r2, [pc, #28]	; (8000cb4 <HAL_Init+0x40>)
 8000c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c9c:	2003      	movs	r0, #3
 8000c9e:	f000 f94f 	bl	8000f40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f000 f808 	bl	8000cb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca8:	f7ff fea0 	bl	80009ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40023c00 	.word	0x40023c00

08000cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <HAL_InitTick+0x54>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <HAL_InitTick+0x58>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	4619      	mov	r1, r3
 8000cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f000 f967 	bl	8000faa <HAL_SYSTICK_Config>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e00e      	b.n	8000d04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2b0f      	cmp	r3, #15
 8000cea:	d80a      	bhi.n	8000d02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cec:	2200      	movs	r2, #0
 8000cee:	6879      	ldr	r1, [r7, #4]
 8000cf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cf4:	f000 f92f 	bl	8000f56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf8:	4a06      	ldr	r2, [pc, #24]	; (8000d14 <HAL_InitTick+0x5c>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	e000      	b.n	8000d04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000000 	.word	0x20000000
 8000d10:	20000008 	.word	0x20000008
 8000d14:	20000004 	.word	0x20000004

08000d18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_IncTick+0x20>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	461a      	mov	r2, r3
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <HAL_IncTick+0x24>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4413      	add	r3, r2
 8000d28:	4a04      	ldr	r2, [pc, #16]	; (8000d3c <HAL_IncTick+0x24>)
 8000d2a:	6013      	str	r3, [r2, #0]
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20000008 	.word	0x20000008
 8000d3c:	200000b4 	.word	0x200000b4

08000d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return uwTick;
 8000d44:	4b03      	ldr	r3, [pc, #12]	; (8000d54 <HAL_GetTick+0x14>)
 8000d46:	681b      	ldr	r3, [r3, #0]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	200000b4 	.word	0x200000b4

08000d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d60:	f7ff ffee 	bl	8000d40 <HAL_GetTick>
 8000d64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d70:	d005      	beq.n	8000d7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d72:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <HAL_Delay+0x44>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	461a      	mov	r2, r3
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d7e:	bf00      	nop
 8000d80:	f7ff ffde 	bl	8000d40 <HAL_GetTick>
 8000d84:	4602      	mov	r2, r0
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d8f7      	bhi.n	8000d80 <HAL_Delay+0x28>
  {
  }
}
 8000d90:	bf00      	nop
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000008 	.word	0x20000008

08000da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dd2:	4a04      	ldr	r2, [pc, #16]	; (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	60d3      	str	r3, [r2, #12]
}
 8000dd8:	bf00      	nop
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <__NVIC_GetPriorityGrouping+0x18>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	0a1b      	lsrs	r3, r3, #8
 8000df2:	f003 0307 	and.w	r3, r3, #7
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	db0b      	blt.n	8000e2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	f003 021f 	and.w	r2, r3, #31
 8000e1c:	4907      	ldr	r1, [pc, #28]	; (8000e3c <__NVIC_EnableIRQ+0x38>)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	095b      	lsrs	r3, r3, #5
 8000e24:	2001      	movs	r0, #1
 8000e26:	fa00 f202 	lsl.w	r2, r0, r2
 8000e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000e100 	.word	0xe000e100

08000e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	6039      	str	r1, [r7, #0]
 8000e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	db0a      	blt.n	8000e6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	490c      	ldr	r1, [pc, #48]	; (8000e8c <__NVIC_SetPriority+0x4c>)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	0112      	lsls	r2, r2, #4
 8000e60:	b2d2      	uxtb	r2, r2
 8000e62:	440b      	add	r3, r1
 8000e64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e68:	e00a      	b.n	8000e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	4908      	ldr	r1, [pc, #32]	; (8000e90 <__NVIC_SetPriority+0x50>)
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	f003 030f 	and.w	r3, r3, #15
 8000e76:	3b04      	subs	r3, #4
 8000e78:	0112      	lsls	r2, r2, #4
 8000e7a:	b2d2      	uxtb	r2, r2
 8000e7c:	440b      	add	r3, r1
 8000e7e:	761a      	strb	r2, [r3, #24]
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000e100 	.word	0xe000e100
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b089      	sub	sp, #36	; 0x24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	f1c3 0307 	rsb	r3, r3, #7
 8000eae:	2b04      	cmp	r3, #4
 8000eb0:	bf28      	it	cs
 8000eb2:	2304      	movcs	r3, #4
 8000eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3304      	adds	r3, #4
 8000eba:	2b06      	cmp	r3, #6
 8000ebc:	d902      	bls.n	8000ec4 <NVIC_EncodePriority+0x30>
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3b03      	subs	r3, #3
 8000ec2:	e000      	b.n	8000ec6 <NVIC_EncodePriority+0x32>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43da      	mvns	r2, r3
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	401a      	ands	r2, r3
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000edc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee6:	43d9      	mvns	r1, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	4313      	orrs	r3, r2
         );
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3724      	adds	r7, #36	; 0x24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
	...

08000efc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3b01      	subs	r3, #1
 8000f08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f0c:	d301      	bcc.n	8000f12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e00f      	b.n	8000f32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f12:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <SysTick_Config+0x40>)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f1a:	210f      	movs	r1, #15
 8000f1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f20:	f7ff ff8e 	bl	8000e40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f24:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <SysTick_Config+0x40>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f2a:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <SysTick_Config+0x40>)
 8000f2c:	2207      	movs	r2, #7
 8000f2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	e000e010 	.word	0xe000e010

08000f40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f7ff ff29 	bl	8000da0 <__NVIC_SetPriorityGrouping>
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b086      	sub	sp, #24
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	60b9      	str	r1, [r7, #8]
 8000f60:	607a      	str	r2, [r7, #4]
 8000f62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f68:	f7ff ff3e 	bl	8000de8 <__NVIC_GetPriorityGrouping>
 8000f6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	68b9      	ldr	r1, [r7, #8]
 8000f72:	6978      	ldr	r0, [r7, #20]
 8000f74:	f7ff ff8e 	bl	8000e94 <NVIC_EncodePriority>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7e:	4611      	mov	r1, r2
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff ff5d 	bl	8000e40 <__NVIC_SetPriority>
}
 8000f86:	bf00      	nop
 8000f88:	3718      	adds	r7, #24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	4603      	mov	r3, r0
 8000f96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ff31 	bl	8000e04 <__NVIC_EnableIRQ>
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff ffa2 	bl	8000efc <SysTick_Config>
 8000fb8:	4603      	mov	r3, r0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b084      	sub	sp, #16
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fce:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000fd0:	f7ff feb6 	bl	8000d40 <HAL_GetTick>
 8000fd4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d008      	beq.n	8000ff4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2280      	movs	r2, #128	; 0x80
 8000fe6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e052      	b.n	800109a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f022 0216 	bic.w	r2, r2, #22
 8001002:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	695a      	ldr	r2, [r3, #20]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001012:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001018:	2b00      	cmp	r3, #0
 800101a:	d103      	bne.n	8001024 <HAL_DMA_Abort+0x62>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001020:	2b00      	cmp	r3, #0
 8001022:	d007      	beq.n	8001034 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f022 0208 	bic.w	r2, r2, #8
 8001032:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f022 0201 	bic.w	r2, r2, #1
 8001042:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001044:	e013      	b.n	800106e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001046:	f7ff fe7b 	bl	8000d40 <HAL_GetTick>
 800104a:	4602      	mov	r2, r0
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	2b05      	cmp	r3, #5
 8001052:	d90c      	bls.n	800106e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2220      	movs	r2, #32
 8001058:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2203      	movs	r2, #3
 800105e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	e015      	b.n	800109a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 0301 	and.w	r3, r3, #1
 8001078:	2b00      	cmp	r3, #0
 800107a:	d1e4      	bne.n	8001046 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001080:	223f      	movs	r2, #63	; 0x3f
 8001082:	409a      	lsls	r2, r3
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2201      	movs	r2, #1
 800108c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d004      	beq.n	80010c0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2280      	movs	r2, #128	; 0x80
 80010ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e00c      	b.n	80010da <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2205      	movs	r2, #5
 80010c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f022 0201 	bic.w	r2, r2, #1
 80010d6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b089      	sub	sp, #36	; 0x24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
 8001102:	e16b      	b.n	80013dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001104:	2201      	movs	r2, #1
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	697a      	ldr	r2, [r7, #20]
 8001114:	4013      	ands	r3, r2
 8001116:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	429a      	cmp	r2, r3
 800111e:	f040 815a 	bne.w	80013d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f003 0303 	and.w	r3, r3, #3
 800112a:	2b01      	cmp	r3, #1
 800112c:	d005      	beq.n	800113a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001136:	2b02      	cmp	r3, #2
 8001138:	d130      	bne.n	800119c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	2203      	movs	r2, #3
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43db      	mvns	r3, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4013      	ands	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	68da      	ldr	r2, [r3, #12]
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4313      	orrs	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001170:	2201      	movs	r2, #1
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	091b      	lsrs	r3, r3, #4
 8001186:	f003 0201 	and.w	r2, r3, #1
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 0303 	and.w	r3, r3, #3
 80011a4:	2b03      	cmp	r3, #3
 80011a6:	d017      	beq.n	80011d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	2203      	movs	r2, #3
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	689a      	ldr	r2, [r3, #8]
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d123      	bne.n	800122c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	08da      	lsrs	r2, r3, #3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3208      	adds	r2, #8
 80011ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	f003 0307 	and.w	r3, r3, #7
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	220f      	movs	r2, #15
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	691a      	ldr	r2, [r3, #16]
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	08da      	lsrs	r2, r3, #3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	3208      	adds	r2, #8
 8001226:	69b9      	ldr	r1, [r7, #24]
 8001228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	2203      	movs	r2, #3
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 0203 	and.w	r2, r3, #3
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001268:	2b00      	cmp	r3, #0
 800126a:	f000 80b4 	beq.w	80013d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	4b60      	ldr	r3, [pc, #384]	; (80013f4 <HAL_GPIO_Init+0x30c>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001276:	4a5f      	ldr	r2, [pc, #380]	; (80013f4 <HAL_GPIO_Init+0x30c>)
 8001278:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800127c:	6453      	str	r3, [r2, #68]	; 0x44
 800127e:	4b5d      	ldr	r3, [pc, #372]	; (80013f4 <HAL_GPIO_Init+0x30c>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800128a:	4a5b      	ldr	r2, [pc, #364]	; (80013f8 <HAL_GPIO_Init+0x310>)
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	089b      	lsrs	r3, r3, #2
 8001290:	3302      	adds	r3, #2
 8001292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001296:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	f003 0303 	and.w	r3, r3, #3
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	220f      	movs	r2, #15
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4013      	ands	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a52      	ldr	r2, [pc, #328]	; (80013fc <HAL_GPIO_Init+0x314>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d02b      	beq.n	800130e <HAL_GPIO_Init+0x226>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a51      	ldr	r2, [pc, #324]	; (8001400 <HAL_GPIO_Init+0x318>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d025      	beq.n	800130a <HAL_GPIO_Init+0x222>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a50      	ldr	r2, [pc, #320]	; (8001404 <HAL_GPIO_Init+0x31c>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d01f      	beq.n	8001306 <HAL_GPIO_Init+0x21e>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a4f      	ldr	r2, [pc, #316]	; (8001408 <HAL_GPIO_Init+0x320>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d019      	beq.n	8001302 <HAL_GPIO_Init+0x21a>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a4e      	ldr	r2, [pc, #312]	; (800140c <HAL_GPIO_Init+0x324>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d013      	beq.n	80012fe <HAL_GPIO_Init+0x216>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a4d      	ldr	r2, [pc, #308]	; (8001410 <HAL_GPIO_Init+0x328>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d00d      	beq.n	80012fa <HAL_GPIO_Init+0x212>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a4c      	ldr	r2, [pc, #304]	; (8001414 <HAL_GPIO_Init+0x32c>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d007      	beq.n	80012f6 <HAL_GPIO_Init+0x20e>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a4b      	ldr	r2, [pc, #300]	; (8001418 <HAL_GPIO_Init+0x330>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d101      	bne.n	80012f2 <HAL_GPIO_Init+0x20a>
 80012ee:	2307      	movs	r3, #7
 80012f0:	e00e      	b.n	8001310 <HAL_GPIO_Init+0x228>
 80012f2:	2308      	movs	r3, #8
 80012f4:	e00c      	b.n	8001310 <HAL_GPIO_Init+0x228>
 80012f6:	2306      	movs	r3, #6
 80012f8:	e00a      	b.n	8001310 <HAL_GPIO_Init+0x228>
 80012fa:	2305      	movs	r3, #5
 80012fc:	e008      	b.n	8001310 <HAL_GPIO_Init+0x228>
 80012fe:	2304      	movs	r3, #4
 8001300:	e006      	b.n	8001310 <HAL_GPIO_Init+0x228>
 8001302:	2303      	movs	r3, #3
 8001304:	e004      	b.n	8001310 <HAL_GPIO_Init+0x228>
 8001306:	2302      	movs	r3, #2
 8001308:	e002      	b.n	8001310 <HAL_GPIO_Init+0x228>
 800130a:	2301      	movs	r3, #1
 800130c:	e000      	b.n	8001310 <HAL_GPIO_Init+0x228>
 800130e:	2300      	movs	r3, #0
 8001310:	69fa      	ldr	r2, [r7, #28]
 8001312:	f002 0203 	and.w	r2, r2, #3
 8001316:	0092      	lsls	r2, r2, #2
 8001318:	4093      	lsls	r3, r2
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4313      	orrs	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001320:	4935      	ldr	r1, [pc, #212]	; (80013f8 <HAL_GPIO_Init+0x310>)
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	089b      	lsrs	r3, r3, #2
 8001326:	3302      	adds	r3, #2
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800132e:	4b3b      	ldr	r3, [pc, #236]	; (800141c <HAL_GPIO_Init+0x334>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	43db      	mvns	r3, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4013      	ands	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	4313      	orrs	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001352:	4a32      	ldr	r2, [pc, #200]	; (800141c <HAL_GPIO_Init+0x334>)
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001358:	4b30      	ldr	r3, [pc, #192]	; (800141c <HAL_GPIO_Init+0x334>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800137c:	4a27      	ldr	r2, [pc, #156]	; (800141c <HAL_GPIO_Init+0x334>)
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001382:	4b26      	ldr	r3, [pc, #152]	; (800141c <HAL_GPIO_Init+0x334>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	43db      	mvns	r3, r3
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	4013      	ands	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013a6:	4a1d      	ldr	r2, [pc, #116]	; (800141c <HAL_GPIO_Init+0x334>)
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013ac:	4b1b      	ldr	r3, [pc, #108]	; (800141c <HAL_GPIO_Init+0x334>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	43db      	mvns	r3, r3
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4013      	ands	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d003      	beq.n	80013d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013d0:	4a12      	ldr	r2, [pc, #72]	; (800141c <HAL_GPIO_Init+0x334>)
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	3301      	adds	r3, #1
 80013da:	61fb      	str	r3, [r7, #28]
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	2b0f      	cmp	r3, #15
 80013e0:	f67f ae90 	bls.w	8001104 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013e4:	bf00      	nop
 80013e6:	bf00      	nop
 80013e8:	3724      	adds	r7, #36	; 0x24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40013800 	.word	0x40013800
 80013fc:	40020000 	.word	0x40020000
 8001400:	40020400 	.word	0x40020400
 8001404:	40020800 	.word	0x40020800
 8001408:	40020c00 	.word	0x40020c00
 800140c:	40021000 	.word	0x40021000
 8001410:	40021400 	.word	0x40021400
 8001414:	40021800 	.word	0x40021800
 8001418:	40021c00 	.word	0x40021c00
 800141c:	40013c00 	.word	0x40013c00

08001420 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	460b      	mov	r3, r1
 800142a:	807b      	strh	r3, [r7, #2]
 800142c:	4613      	mov	r3, r2
 800142e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001430:	787b      	ldrb	r3, [r7, #1]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001436:	887a      	ldrh	r2, [r7, #2]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800143c:	e003      	b.n	8001446 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800143e:	887b      	ldrh	r3, [r7, #2]
 8001440:	041a      	lsls	r2, r3, #16
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	619a      	str	r2, [r3, #24]
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001452:	b480      	push	{r7}
 8001454:	b085      	sub	sp, #20
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
 800145a:	460b      	mov	r3, r1
 800145c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001464:	887a      	ldrh	r2, [r7, #2]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	4013      	ands	r3, r2
 800146a:	041a      	lsls	r2, r3, #16
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	43d9      	mvns	r1, r3
 8001470:	887b      	ldrh	r3, [r7, #2]
 8001472:	400b      	ands	r3, r1
 8001474:	431a      	orrs	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	619a      	str	r2, [r3, #24]
}
 800147a:	bf00      	nop
 800147c:	3714      	adds	r7, #20
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
	...

08001488 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d101      	bne.n	800149a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e267      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d075      	beq.n	8001592 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014a6:	4b88      	ldr	r3, [pc, #544]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f003 030c 	and.w	r3, r3, #12
 80014ae:	2b04      	cmp	r3, #4
 80014b0:	d00c      	beq.n	80014cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014b2:	4b85      	ldr	r3, [pc, #532]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014ba:	2b08      	cmp	r3, #8
 80014bc:	d112      	bne.n	80014e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014be:	4b82      	ldr	r3, [pc, #520]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014ca:	d10b      	bne.n	80014e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014cc:	4b7e      	ldr	r3, [pc, #504]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d05b      	beq.n	8001590 <HAL_RCC_OscConfig+0x108>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d157      	bne.n	8001590 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e242      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014ec:	d106      	bne.n	80014fc <HAL_RCC_OscConfig+0x74>
 80014ee:	4b76      	ldr	r3, [pc, #472]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a75      	ldr	r2, [pc, #468]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 80014f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f8:	6013      	str	r3, [r2, #0]
 80014fa:	e01d      	b.n	8001538 <HAL_RCC_OscConfig+0xb0>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001504:	d10c      	bne.n	8001520 <HAL_RCC_OscConfig+0x98>
 8001506:	4b70      	ldr	r3, [pc, #448]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a6f      	ldr	r2, [pc, #444]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 800150c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001510:	6013      	str	r3, [r2, #0]
 8001512:	4b6d      	ldr	r3, [pc, #436]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a6c      	ldr	r2, [pc, #432]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 8001518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800151c:	6013      	str	r3, [r2, #0]
 800151e:	e00b      	b.n	8001538 <HAL_RCC_OscConfig+0xb0>
 8001520:	4b69      	ldr	r3, [pc, #420]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a68      	ldr	r2, [pc, #416]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 8001526:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800152a:	6013      	str	r3, [r2, #0]
 800152c:	4b66      	ldr	r3, [pc, #408]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a65      	ldr	r2, [pc, #404]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 8001532:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001536:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d013      	beq.n	8001568 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001540:	f7ff fbfe 	bl	8000d40 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001548:	f7ff fbfa 	bl	8000d40 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b64      	cmp	r3, #100	; 0x64
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e207      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800155a:	4b5b      	ldr	r3, [pc, #364]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0f0      	beq.n	8001548 <HAL_RCC_OscConfig+0xc0>
 8001566:	e014      	b.n	8001592 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001568:	f7ff fbea 	bl	8000d40 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001570:	f7ff fbe6 	bl	8000d40 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b64      	cmp	r3, #100	; 0x64
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e1f3      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001582:	4b51      	ldr	r3, [pc, #324]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1f0      	bne.n	8001570 <HAL_RCC_OscConfig+0xe8>
 800158e:	e000      	b.n	8001592 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001590:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d063      	beq.n	8001666 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800159e:	4b4a      	ldr	r3, [pc, #296]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f003 030c 	and.w	r3, r3, #12
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d00b      	beq.n	80015c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015aa:	4b47      	ldr	r3, [pc, #284]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015b2:	2b08      	cmp	r3, #8
 80015b4:	d11c      	bne.n	80015f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015b6:	4b44      	ldr	r3, [pc, #272]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d116      	bne.n	80015f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015c2:	4b41      	ldr	r3, [pc, #260]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d005      	beq.n	80015da <HAL_RCC_OscConfig+0x152>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d001      	beq.n	80015da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e1c7      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015da:	4b3b      	ldr	r3, [pc, #236]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	4937      	ldr	r1, [pc, #220]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ee:	e03a      	b.n	8001666 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d020      	beq.n	800163a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015f8:	4b34      	ldr	r3, [pc, #208]	; (80016cc <HAL_RCC_OscConfig+0x244>)
 80015fa:	2201      	movs	r2, #1
 80015fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015fe:	f7ff fb9f 	bl	8000d40 <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001604:	e008      	b.n	8001618 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001606:	f7ff fb9b 	bl	8000d40 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d901      	bls.n	8001618 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e1a8      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001618:	4b2b      	ldr	r3, [pc, #172]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0302 	and.w	r3, r3, #2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d0f0      	beq.n	8001606 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001624:	4b28      	ldr	r3, [pc, #160]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	691b      	ldr	r3, [r3, #16]
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	4925      	ldr	r1, [pc, #148]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 8001634:	4313      	orrs	r3, r2
 8001636:	600b      	str	r3, [r1, #0]
 8001638:	e015      	b.n	8001666 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800163a:	4b24      	ldr	r3, [pc, #144]	; (80016cc <HAL_RCC_OscConfig+0x244>)
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001640:	f7ff fb7e 	bl	8000d40 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001648:	f7ff fb7a 	bl	8000d40 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e187      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800165a:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f0      	bne.n	8001648 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0308 	and.w	r3, r3, #8
 800166e:	2b00      	cmp	r3, #0
 8001670:	d036      	beq.n	80016e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d016      	beq.n	80016a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800167a:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <HAL_RCC_OscConfig+0x248>)
 800167c:	2201      	movs	r2, #1
 800167e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001680:	f7ff fb5e 	bl	8000d40 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001688:	f7ff fb5a 	bl	8000d40 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e167      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800169a:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 800169c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d0f0      	beq.n	8001688 <HAL_RCC_OscConfig+0x200>
 80016a6:	e01b      	b.n	80016e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <HAL_RCC_OscConfig+0x248>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ae:	f7ff fb47 	bl	8000d40 <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b4:	e00e      	b.n	80016d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016b6:	f7ff fb43 	bl	8000d40 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d907      	bls.n	80016d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e150      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
 80016c8:	40023800 	.word	0x40023800
 80016cc:	42470000 	.word	0x42470000
 80016d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016d4:	4b88      	ldr	r3, [pc, #544]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 80016d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d1ea      	bne.n	80016b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f000 8097 	beq.w	800181c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ee:	2300      	movs	r3, #0
 80016f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016f2:	4b81      	ldr	r3, [pc, #516]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10f      	bne.n	800171e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	4b7d      	ldr	r3, [pc, #500]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	4a7c      	ldr	r2, [pc, #496]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 8001708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800170c:	6413      	str	r3, [r2, #64]	; 0x40
 800170e:	4b7a      	ldr	r3, [pc, #488]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800171a:	2301      	movs	r3, #1
 800171c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800171e:	4b77      	ldr	r3, [pc, #476]	; (80018fc <HAL_RCC_OscConfig+0x474>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001726:	2b00      	cmp	r3, #0
 8001728:	d118      	bne.n	800175c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800172a:	4b74      	ldr	r3, [pc, #464]	; (80018fc <HAL_RCC_OscConfig+0x474>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a73      	ldr	r2, [pc, #460]	; (80018fc <HAL_RCC_OscConfig+0x474>)
 8001730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001734:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001736:	f7ff fb03 	bl	8000d40 <HAL_GetTick>
 800173a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800173c:	e008      	b.n	8001750 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800173e:	f7ff faff 	bl	8000d40 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e10c      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001750:	4b6a      	ldr	r3, [pc, #424]	; (80018fc <HAL_RCC_OscConfig+0x474>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001758:	2b00      	cmp	r3, #0
 800175a:	d0f0      	beq.n	800173e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d106      	bne.n	8001772 <HAL_RCC_OscConfig+0x2ea>
 8001764:	4b64      	ldr	r3, [pc, #400]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 8001766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001768:	4a63      	ldr	r2, [pc, #396]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	6713      	str	r3, [r2, #112]	; 0x70
 8001770:	e01c      	b.n	80017ac <HAL_RCC_OscConfig+0x324>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	2b05      	cmp	r3, #5
 8001778:	d10c      	bne.n	8001794 <HAL_RCC_OscConfig+0x30c>
 800177a:	4b5f      	ldr	r3, [pc, #380]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 800177c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800177e:	4a5e      	ldr	r2, [pc, #376]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 8001780:	f043 0304 	orr.w	r3, r3, #4
 8001784:	6713      	str	r3, [r2, #112]	; 0x70
 8001786:	4b5c      	ldr	r3, [pc, #368]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 8001788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800178a:	4a5b      	ldr	r2, [pc, #364]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	6713      	str	r3, [r2, #112]	; 0x70
 8001792:	e00b      	b.n	80017ac <HAL_RCC_OscConfig+0x324>
 8001794:	4b58      	ldr	r3, [pc, #352]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 8001796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001798:	4a57      	ldr	r2, [pc, #348]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 800179a:	f023 0301 	bic.w	r3, r3, #1
 800179e:	6713      	str	r3, [r2, #112]	; 0x70
 80017a0:	4b55      	ldr	r3, [pc, #340]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 80017a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a4:	4a54      	ldr	r2, [pc, #336]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 80017a6:	f023 0304 	bic.w	r3, r3, #4
 80017aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d015      	beq.n	80017e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b4:	f7ff fac4 	bl	8000d40 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ba:	e00a      	b.n	80017d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017bc:	f7ff fac0 	bl	8000d40 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e0cb      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d2:	4b49      	ldr	r3, [pc, #292]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 80017d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d0ee      	beq.n	80017bc <HAL_RCC_OscConfig+0x334>
 80017de:	e014      	b.n	800180a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e0:	f7ff faae 	bl	8000d40 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017e6:	e00a      	b.n	80017fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017e8:	f7ff faaa 	bl	8000d40 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e0b5      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017fe:	4b3e      	ldr	r3, [pc, #248]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 8001800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1ee      	bne.n	80017e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800180a:	7dfb      	ldrb	r3, [r7, #23]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d105      	bne.n	800181c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001810:	4b39      	ldr	r3, [pc, #228]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 8001812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001814:	4a38      	ldr	r2, [pc, #224]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 8001816:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800181a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	2b00      	cmp	r3, #0
 8001822:	f000 80a1 	beq.w	8001968 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001826:	4b34      	ldr	r3, [pc, #208]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f003 030c 	and.w	r3, r3, #12
 800182e:	2b08      	cmp	r3, #8
 8001830:	d05c      	beq.n	80018ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	2b02      	cmp	r3, #2
 8001838:	d141      	bne.n	80018be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800183a:	4b31      	ldr	r3, [pc, #196]	; (8001900 <HAL_RCC_OscConfig+0x478>)
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001840:	f7ff fa7e 	bl	8000d40 <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001848:	f7ff fa7a 	bl	8000d40 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e087      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800185a:	4b27      	ldr	r3, [pc, #156]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1f0      	bne.n	8001848 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	69da      	ldr	r2, [r3, #28]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a1b      	ldr	r3, [r3, #32]
 800186e:	431a      	orrs	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001874:	019b      	lsls	r3, r3, #6
 8001876:	431a      	orrs	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187c:	085b      	lsrs	r3, r3, #1
 800187e:	3b01      	subs	r3, #1
 8001880:	041b      	lsls	r3, r3, #16
 8001882:	431a      	orrs	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001888:	061b      	lsls	r3, r3, #24
 800188a:	491b      	ldr	r1, [pc, #108]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 800188c:	4313      	orrs	r3, r2
 800188e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001890:	4b1b      	ldr	r3, [pc, #108]	; (8001900 <HAL_RCC_OscConfig+0x478>)
 8001892:	2201      	movs	r2, #1
 8001894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001896:	f7ff fa53 	bl	8000d40 <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800189e:	f7ff fa4f 	bl	8000d40 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e05c      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018b0:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0f0      	beq.n	800189e <HAL_RCC_OscConfig+0x416>
 80018bc:	e054      	b.n	8001968 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018be:	4b10      	ldr	r3, [pc, #64]	; (8001900 <HAL_RCC_OscConfig+0x478>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c4:	f7ff fa3c 	bl	8000d40 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018cc:	f7ff fa38 	bl	8000d40 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e045      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f0      	bne.n	80018cc <HAL_RCC_OscConfig+0x444>
 80018ea:	e03d      	b.n	8001968 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d107      	bne.n	8001904 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e038      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
 80018f8:	40023800 	.word	0x40023800
 80018fc:	40007000 	.word	0x40007000
 8001900:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001904:	4b1b      	ldr	r3, [pc, #108]	; (8001974 <HAL_RCC_OscConfig+0x4ec>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d028      	beq.n	8001964 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800191c:	429a      	cmp	r2, r3
 800191e:	d121      	bne.n	8001964 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800192a:	429a      	cmp	r2, r3
 800192c:	d11a      	bne.n	8001964 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001934:	4013      	ands	r3, r2
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800193a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800193c:	4293      	cmp	r3, r2
 800193e:	d111      	bne.n	8001964 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194a:	085b      	lsrs	r3, r3, #1
 800194c:	3b01      	subs	r3, #1
 800194e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001950:	429a      	cmp	r2, r3
 8001952:	d107      	bne.n	8001964 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001960:	429a      	cmp	r2, r3
 8001962:	d001      	beq.n	8001968 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e000      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40023800 	.word	0x40023800

08001978 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d101      	bne.n	800198c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e0cc      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800198c:	4b68      	ldr	r3, [pc, #416]	; (8001b30 <HAL_RCC_ClockConfig+0x1b8>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	429a      	cmp	r2, r3
 8001998:	d90c      	bls.n	80019b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800199a:	4b65      	ldr	r3, [pc, #404]	; (8001b30 <HAL_RCC_ClockConfig+0x1b8>)
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	b2d2      	uxtb	r2, r2
 80019a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a2:	4b63      	ldr	r3, [pc, #396]	; (8001b30 <HAL_RCC_ClockConfig+0x1b8>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d001      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e0b8      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d020      	beq.n	8001a02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0304 	and.w	r3, r3, #4
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d005      	beq.n	80019d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019cc:	4b59      	ldr	r3, [pc, #356]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	4a58      	ldr	r2, [pc, #352]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 80019d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0308 	and.w	r3, r3, #8
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d005      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019e4:	4b53      	ldr	r3, [pc, #332]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	4a52      	ldr	r2, [pc, #328]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 80019ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019f0:	4b50      	ldr	r3, [pc, #320]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	494d      	ldr	r1, [pc, #308]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d044      	beq.n	8001a98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d107      	bne.n	8001a26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a16:	4b47      	ldr	r3, [pc, #284]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d119      	bne.n	8001a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e07f      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d003      	beq.n	8001a36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a32:	2b03      	cmp	r3, #3
 8001a34:	d107      	bne.n	8001a46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a36:	4b3f      	ldr	r3, [pc, #252]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d109      	bne.n	8001a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e06f      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a46:	4b3b      	ldr	r3, [pc, #236]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e067      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a56:	4b37      	ldr	r3, [pc, #220]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f023 0203 	bic.w	r2, r3, #3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	4934      	ldr	r1, [pc, #208]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a68:	f7ff f96a 	bl	8000d40 <HAL_GetTick>
 8001a6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a6e:	e00a      	b.n	8001a86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a70:	f7ff f966 	bl	8000d40 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e04f      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a86:	4b2b      	ldr	r3, [pc, #172]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 020c 	and.w	r2, r3, #12
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d1eb      	bne.n	8001a70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a98:	4b25      	ldr	r3, [pc, #148]	; (8001b30 <HAL_RCC_ClockConfig+0x1b8>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0307 	and.w	r3, r3, #7
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d20c      	bcs.n	8001ac0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa6:	4b22      	ldr	r3, [pc, #136]	; (8001b30 <HAL_RCC_ClockConfig+0x1b8>)
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aae:	4b20      	ldr	r3, [pc, #128]	; (8001b30 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d001      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e032      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d008      	beq.n	8001ade <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001acc:	4b19      	ldr	r3, [pc, #100]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	4916      	ldr	r1, [pc, #88]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0308 	and.w	r3, r3, #8
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d009      	beq.n	8001afe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001aea:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	490e      	ldr	r1, [pc, #56]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001afe:	f000 f821 	bl	8001b44 <HAL_RCC_GetSysClockFreq>
 8001b02:	4602      	mov	r2, r0
 8001b04:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	091b      	lsrs	r3, r3, #4
 8001b0a:	f003 030f 	and.w	r3, r3, #15
 8001b0e:	490a      	ldr	r1, [pc, #40]	; (8001b38 <HAL_RCC_ClockConfig+0x1c0>)
 8001b10:	5ccb      	ldrb	r3, [r1, r3]
 8001b12:	fa22 f303 	lsr.w	r3, r2, r3
 8001b16:	4a09      	ldr	r2, [pc, #36]	; (8001b3c <HAL_RCC_ClockConfig+0x1c4>)
 8001b18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b1a:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <HAL_RCC_ClockConfig+0x1c8>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff f8ca 	bl	8000cb8 <HAL_InitTick>

  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40023c00 	.word	0x40023c00
 8001b34:	40023800 	.word	0x40023800
 8001b38:	08003ddc 	.word	0x08003ddc
 8001b3c:	20000000 	.word	0x20000000
 8001b40:	20000004 	.word	0x20000004

08001b44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b48:	b094      	sub	sp, #80	; 0x50
 8001b4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	647b      	str	r3, [r7, #68]	; 0x44
 8001b50:	2300      	movs	r3, #0
 8001b52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b54:	2300      	movs	r3, #0
 8001b56:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b5c:	4b79      	ldr	r3, [pc, #484]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f003 030c 	and.w	r3, r3, #12
 8001b64:	2b08      	cmp	r3, #8
 8001b66:	d00d      	beq.n	8001b84 <HAL_RCC_GetSysClockFreq+0x40>
 8001b68:	2b08      	cmp	r3, #8
 8001b6a:	f200 80e1 	bhi.w	8001d30 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d002      	beq.n	8001b78 <HAL_RCC_GetSysClockFreq+0x34>
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	d003      	beq.n	8001b7e <HAL_RCC_GetSysClockFreq+0x3a>
 8001b76:	e0db      	b.n	8001d30 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b78:	4b73      	ldr	r3, [pc, #460]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b7a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001b7c:	e0db      	b.n	8001d36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b7e:	4b73      	ldr	r3, [pc, #460]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x208>)
 8001b80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b82:	e0d8      	b.n	8001d36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b84:	4b6f      	ldr	r3, [pc, #444]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b8c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b8e:	4b6d      	ldr	r3, [pc, #436]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d063      	beq.n	8001c62 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b9a:	4b6a      	ldr	r3, [pc, #424]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	099b      	lsrs	r3, r3, #6
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ba4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bac:	633b      	str	r3, [r7, #48]	; 0x30
 8001bae:	2300      	movs	r3, #0
 8001bb0:	637b      	str	r3, [r7, #52]	; 0x34
 8001bb2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001bb6:	4622      	mov	r2, r4
 8001bb8:	462b      	mov	r3, r5
 8001bba:	f04f 0000 	mov.w	r0, #0
 8001bbe:	f04f 0100 	mov.w	r1, #0
 8001bc2:	0159      	lsls	r1, r3, #5
 8001bc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bc8:	0150      	lsls	r0, r2, #5
 8001bca:	4602      	mov	r2, r0
 8001bcc:	460b      	mov	r3, r1
 8001bce:	4621      	mov	r1, r4
 8001bd0:	1a51      	subs	r1, r2, r1
 8001bd2:	6139      	str	r1, [r7, #16]
 8001bd4:	4629      	mov	r1, r5
 8001bd6:	eb63 0301 	sbc.w	r3, r3, r1
 8001bda:	617b      	str	r3, [r7, #20]
 8001bdc:	f04f 0200 	mov.w	r2, #0
 8001be0:	f04f 0300 	mov.w	r3, #0
 8001be4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001be8:	4659      	mov	r1, fp
 8001bea:	018b      	lsls	r3, r1, #6
 8001bec:	4651      	mov	r1, sl
 8001bee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bf2:	4651      	mov	r1, sl
 8001bf4:	018a      	lsls	r2, r1, #6
 8001bf6:	4651      	mov	r1, sl
 8001bf8:	ebb2 0801 	subs.w	r8, r2, r1
 8001bfc:	4659      	mov	r1, fp
 8001bfe:	eb63 0901 	sbc.w	r9, r3, r1
 8001c02:	f04f 0200 	mov.w	r2, #0
 8001c06:	f04f 0300 	mov.w	r3, #0
 8001c0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c16:	4690      	mov	r8, r2
 8001c18:	4699      	mov	r9, r3
 8001c1a:	4623      	mov	r3, r4
 8001c1c:	eb18 0303 	adds.w	r3, r8, r3
 8001c20:	60bb      	str	r3, [r7, #8]
 8001c22:	462b      	mov	r3, r5
 8001c24:	eb49 0303 	adc.w	r3, r9, r3
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	f04f 0200 	mov.w	r2, #0
 8001c2e:	f04f 0300 	mov.w	r3, #0
 8001c32:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c36:	4629      	mov	r1, r5
 8001c38:	024b      	lsls	r3, r1, #9
 8001c3a:	4621      	mov	r1, r4
 8001c3c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c40:	4621      	mov	r1, r4
 8001c42:	024a      	lsls	r2, r1, #9
 8001c44:	4610      	mov	r0, r2
 8001c46:	4619      	mov	r1, r3
 8001c48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c54:	f7fe fab8 	bl	80001c8 <__aeabi_uldivmod>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c60:	e058      	b.n	8001d14 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c62:	4b38      	ldr	r3, [pc, #224]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	099b      	lsrs	r3, r3, #6
 8001c68:	2200      	movs	r2, #0
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	4611      	mov	r1, r2
 8001c6e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c72:	623b      	str	r3, [r7, #32]
 8001c74:	2300      	movs	r3, #0
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
 8001c78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c7c:	4642      	mov	r2, r8
 8001c7e:	464b      	mov	r3, r9
 8001c80:	f04f 0000 	mov.w	r0, #0
 8001c84:	f04f 0100 	mov.w	r1, #0
 8001c88:	0159      	lsls	r1, r3, #5
 8001c8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c8e:	0150      	lsls	r0, r2, #5
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	4641      	mov	r1, r8
 8001c96:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c9a:	4649      	mov	r1, r9
 8001c9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ca0:	f04f 0200 	mov.w	r2, #0
 8001ca4:	f04f 0300 	mov.w	r3, #0
 8001ca8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001cac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001cb0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001cb4:	ebb2 040a 	subs.w	r4, r2, sl
 8001cb8:	eb63 050b 	sbc.w	r5, r3, fp
 8001cbc:	f04f 0200 	mov.w	r2, #0
 8001cc0:	f04f 0300 	mov.w	r3, #0
 8001cc4:	00eb      	lsls	r3, r5, #3
 8001cc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cca:	00e2      	lsls	r2, r4, #3
 8001ccc:	4614      	mov	r4, r2
 8001cce:	461d      	mov	r5, r3
 8001cd0:	4643      	mov	r3, r8
 8001cd2:	18e3      	adds	r3, r4, r3
 8001cd4:	603b      	str	r3, [r7, #0]
 8001cd6:	464b      	mov	r3, r9
 8001cd8:	eb45 0303 	adc.w	r3, r5, r3
 8001cdc:	607b      	str	r3, [r7, #4]
 8001cde:	f04f 0200 	mov.w	r2, #0
 8001ce2:	f04f 0300 	mov.w	r3, #0
 8001ce6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001cea:	4629      	mov	r1, r5
 8001cec:	028b      	lsls	r3, r1, #10
 8001cee:	4621      	mov	r1, r4
 8001cf0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cf4:	4621      	mov	r1, r4
 8001cf6:	028a      	lsls	r2, r1, #10
 8001cf8:	4610      	mov	r0, r2
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cfe:	2200      	movs	r2, #0
 8001d00:	61bb      	str	r3, [r7, #24]
 8001d02:	61fa      	str	r2, [r7, #28]
 8001d04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d08:	f7fe fa5e 	bl	80001c8 <__aeabi_uldivmod>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4613      	mov	r3, r2
 8001d12:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d14:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	0c1b      	lsrs	r3, r3, #16
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	3301      	adds	r3, #1
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001d24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d2e:	e002      	b.n	8001d36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d30:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d32:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3750      	adds	r7, #80	; 0x50
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d42:	bf00      	nop
 8001d44:	40023800 	.word	0x40023800
 8001d48:	00f42400 	.word	0x00f42400
 8001d4c:	007a1200 	.word	0x007a1200

08001d50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d54:	4b03      	ldr	r3, [pc, #12]	; (8001d64 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d56:	681b      	ldr	r3, [r3, #0]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	20000000 	.word	0x20000000

08001d68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d6c:	f7ff fff0 	bl	8001d50 <HAL_RCC_GetHCLKFreq>
 8001d70:	4602      	mov	r2, r0
 8001d72:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	0a9b      	lsrs	r3, r3, #10
 8001d78:	f003 0307 	and.w	r3, r3, #7
 8001d7c:	4903      	ldr	r1, [pc, #12]	; (8001d8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d7e:	5ccb      	ldrb	r3, [r1, r3]
 8001d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	08003dec 	.word	0x08003dec

08001d90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d94:	f7ff ffdc 	bl	8001d50 <HAL_RCC_GetHCLKFreq>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	0b5b      	lsrs	r3, r3, #13
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	4903      	ldr	r1, [pc, #12]	; (8001db4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001da6:	5ccb      	ldrb	r3, [r1, r3]
 8001da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40023800 	.word	0x40023800
 8001db4:	08003dec 	.word	0x08003dec

08001db8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e041      	b.n	8001e4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d106      	bne.n	8001de4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7fe fe2c 	bl	8000a3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2202      	movs	r2, #2
 8001de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3304      	adds	r3, #4
 8001df4:	4619      	mov	r1, r3
 8001df6:	4610      	mov	r0, r2
 8001df8:	f000 fad8 	bl	80023ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b082      	sub	sp, #8
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e041      	b.n	8001eec <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d106      	bne.n	8001e82 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f000 f839 	bl	8001ef4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2202      	movs	r2, #2
 8001e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	3304      	adds	r3, #4
 8001e92:	4619      	mov	r1, r3
 8001e94:	4610      	mov	r0, r2
 8001e96:	f000 fa89 	bl	80023ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d109      	bne.n	8001f2c <HAL_TIM_PWM_Start+0x24>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	bf14      	ite	ne
 8001f24:	2301      	movne	r3, #1
 8001f26:	2300      	moveq	r3, #0
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	e022      	b.n	8001f72 <HAL_TIM_PWM_Start+0x6a>
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	d109      	bne.n	8001f46 <HAL_TIM_PWM_Start+0x3e>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	bf14      	ite	ne
 8001f3e:	2301      	movne	r3, #1
 8001f40:	2300      	moveq	r3, #0
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	e015      	b.n	8001f72 <HAL_TIM_PWM_Start+0x6a>
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	2b08      	cmp	r3, #8
 8001f4a:	d109      	bne.n	8001f60 <HAL_TIM_PWM_Start+0x58>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	bf14      	ite	ne
 8001f58:	2301      	movne	r3, #1
 8001f5a:	2300      	moveq	r3, #0
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	e008      	b.n	8001f72 <HAL_TIM_PWM_Start+0x6a>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	bf14      	ite	ne
 8001f6c:	2301      	movne	r3, #1
 8001f6e:	2300      	moveq	r3, #0
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e07c      	b.n	8002074 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d104      	bne.n	8001f8a <HAL_TIM_PWM_Start+0x82>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2202      	movs	r2, #2
 8001f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f88:	e013      	b.n	8001fb2 <HAL_TIM_PWM_Start+0xaa>
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	2b04      	cmp	r3, #4
 8001f8e:	d104      	bne.n	8001f9a <HAL_TIM_PWM_Start+0x92>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2202      	movs	r2, #2
 8001f94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f98:	e00b      	b.n	8001fb2 <HAL_TIM_PWM_Start+0xaa>
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	2b08      	cmp	r3, #8
 8001f9e:	d104      	bne.n	8001faa <HAL_TIM_PWM_Start+0xa2>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fa8:	e003      	b.n	8001fb2 <HAL_TIM_PWM_Start+0xaa>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2202      	movs	r2, #2
 8001fae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	6839      	ldr	r1, [r7, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f000 fce0 	bl	8002980 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a2d      	ldr	r2, [pc, #180]	; (800207c <HAL_TIM_PWM_Start+0x174>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d004      	beq.n	8001fd4 <HAL_TIM_PWM_Start+0xcc>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a2c      	ldr	r2, [pc, #176]	; (8002080 <HAL_TIM_PWM_Start+0x178>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d101      	bne.n	8001fd8 <HAL_TIM_PWM_Start+0xd0>
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e000      	b.n	8001fda <HAL_TIM_PWM_Start+0xd2>
 8001fd8:	2300      	movs	r3, #0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d007      	beq.n	8001fee <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a22      	ldr	r2, [pc, #136]	; (800207c <HAL_TIM_PWM_Start+0x174>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d022      	beq.n	800203e <HAL_TIM_PWM_Start+0x136>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002000:	d01d      	beq.n	800203e <HAL_TIM_PWM_Start+0x136>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a1f      	ldr	r2, [pc, #124]	; (8002084 <HAL_TIM_PWM_Start+0x17c>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d018      	beq.n	800203e <HAL_TIM_PWM_Start+0x136>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a1d      	ldr	r2, [pc, #116]	; (8002088 <HAL_TIM_PWM_Start+0x180>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d013      	beq.n	800203e <HAL_TIM_PWM_Start+0x136>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a1c      	ldr	r2, [pc, #112]	; (800208c <HAL_TIM_PWM_Start+0x184>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d00e      	beq.n	800203e <HAL_TIM_PWM_Start+0x136>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a16      	ldr	r2, [pc, #88]	; (8002080 <HAL_TIM_PWM_Start+0x178>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d009      	beq.n	800203e <HAL_TIM_PWM_Start+0x136>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a18      	ldr	r2, [pc, #96]	; (8002090 <HAL_TIM_PWM_Start+0x188>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d004      	beq.n	800203e <HAL_TIM_PWM_Start+0x136>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a16      	ldr	r2, [pc, #88]	; (8002094 <HAL_TIM_PWM_Start+0x18c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d111      	bne.n	8002062 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2b06      	cmp	r3, #6
 800204e:	d010      	beq.n	8002072 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f042 0201 	orr.w	r2, r2, #1
 800205e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002060:	e007      	b.n	8002072 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f042 0201 	orr.w	r2, r2, #1
 8002070:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40010000 	.word	0x40010000
 8002080:	40010400 	.word	0x40010400
 8002084:	40000400 	.word	0x40000400
 8002088:	40000800 	.word	0x40000800
 800208c:	40000c00 	.word	0x40000c00
 8002090:	40014000 	.word	0x40014000
 8002094:	40001800 	.word	0x40001800

08002098 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020a4:	2300      	movs	r3, #0
 80020a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d101      	bne.n	80020b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80020b2:	2302      	movs	r3, #2
 80020b4:	e0ae      	b.n	8002214 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b0c      	cmp	r3, #12
 80020c2:	f200 809f 	bhi.w	8002204 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80020c6:	a201      	add	r2, pc, #4	; (adr r2, 80020cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80020c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020cc:	08002101 	.word	0x08002101
 80020d0:	08002205 	.word	0x08002205
 80020d4:	08002205 	.word	0x08002205
 80020d8:	08002205 	.word	0x08002205
 80020dc:	08002141 	.word	0x08002141
 80020e0:	08002205 	.word	0x08002205
 80020e4:	08002205 	.word	0x08002205
 80020e8:	08002205 	.word	0x08002205
 80020ec:	08002183 	.word	0x08002183
 80020f0:	08002205 	.word	0x08002205
 80020f4:	08002205 	.word	0x08002205
 80020f8:	08002205 	.word	0x08002205
 80020fc:	080021c3 	.word	0x080021c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68b9      	ldr	r1, [r7, #8]
 8002106:	4618      	mov	r0, r3
 8002108:	f000 f9f0 	bl	80024ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	699a      	ldr	r2, [r3, #24]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f042 0208 	orr.w	r2, r2, #8
 800211a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	699a      	ldr	r2, [r3, #24]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f022 0204 	bic.w	r2, r2, #4
 800212a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6999      	ldr	r1, [r3, #24]
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	691a      	ldr	r2, [r3, #16]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	430a      	orrs	r2, r1
 800213c:	619a      	str	r2, [r3, #24]
      break;
 800213e:	e064      	b.n	800220a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68b9      	ldr	r1, [r7, #8]
 8002146:	4618      	mov	r0, r3
 8002148:	f000 fa40 	bl	80025cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	699a      	ldr	r2, [r3, #24]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800215a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	699a      	ldr	r2, [r3, #24]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800216a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6999      	ldr	r1, [r3, #24]
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	021a      	lsls	r2, r3, #8
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	430a      	orrs	r2, r1
 800217e:	619a      	str	r2, [r3, #24]
      break;
 8002180:	e043      	b.n	800220a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68b9      	ldr	r1, [r7, #8]
 8002188:	4618      	mov	r0, r3
 800218a:	f000 fa95 	bl	80026b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	69da      	ldr	r2, [r3, #28]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f042 0208 	orr.w	r2, r2, #8
 800219c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	69da      	ldr	r2, [r3, #28]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 0204 	bic.w	r2, r2, #4
 80021ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	69d9      	ldr	r1, [r3, #28]
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	691a      	ldr	r2, [r3, #16]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	430a      	orrs	r2, r1
 80021be:	61da      	str	r2, [r3, #28]
      break;
 80021c0:	e023      	b.n	800220a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68b9      	ldr	r1, [r7, #8]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f000 fae9 	bl	80027a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	69da      	ldr	r2, [r3, #28]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	69da      	ldr	r2, [r3, #28]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	69d9      	ldr	r1, [r3, #28]
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	021a      	lsls	r2, r3, #8
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	430a      	orrs	r2, r1
 8002200:	61da      	str	r2, [r3, #28]
      break;
 8002202:	e002      	b.n	800220a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	75fb      	strb	r3, [r7, #23]
      break;
 8002208:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002212:	7dfb      	ldrb	r3, [r7, #23]
}
 8002214:	4618      	mov	r0, r3
 8002216:	3718      	adds	r7, #24
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002226:	2300      	movs	r3, #0
 8002228:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002230:	2b01      	cmp	r3, #1
 8002232:	d101      	bne.n	8002238 <HAL_TIM_ConfigClockSource+0x1c>
 8002234:	2302      	movs	r3, #2
 8002236:	e0b4      	b.n	80023a2 <HAL_TIM_ConfigClockSource+0x186>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2202      	movs	r2, #2
 8002244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002256:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800225e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68ba      	ldr	r2, [r7, #8]
 8002266:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002270:	d03e      	beq.n	80022f0 <HAL_TIM_ConfigClockSource+0xd4>
 8002272:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002276:	f200 8087 	bhi.w	8002388 <HAL_TIM_ConfigClockSource+0x16c>
 800227a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800227e:	f000 8086 	beq.w	800238e <HAL_TIM_ConfigClockSource+0x172>
 8002282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002286:	d87f      	bhi.n	8002388 <HAL_TIM_ConfigClockSource+0x16c>
 8002288:	2b70      	cmp	r3, #112	; 0x70
 800228a:	d01a      	beq.n	80022c2 <HAL_TIM_ConfigClockSource+0xa6>
 800228c:	2b70      	cmp	r3, #112	; 0x70
 800228e:	d87b      	bhi.n	8002388 <HAL_TIM_ConfigClockSource+0x16c>
 8002290:	2b60      	cmp	r3, #96	; 0x60
 8002292:	d050      	beq.n	8002336 <HAL_TIM_ConfigClockSource+0x11a>
 8002294:	2b60      	cmp	r3, #96	; 0x60
 8002296:	d877      	bhi.n	8002388 <HAL_TIM_ConfigClockSource+0x16c>
 8002298:	2b50      	cmp	r3, #80	; 0x50
 800229a:	d03c      	beq.n	8002316 <HAL_TIM_ConfigClockSource+0xfa>
 800229c:	2b50      	cmp	r3, #80	; 0x50
 800229e:	d873      	bhi.n	8002388 <HAL_TIM_ConfigClockSource+0x16c>
 80022a0:	2b40      	cmp	r3, #64	; 0x40
 80022a2:	d058      	beq.n	8002356 <HAL_TIM_ConfigClockSource+0x13a>
 80022a4:	2b40      	cmp	r3, #64	; 0x40
 80022a6:	d86f      	bhi.n	8002388 <HAL_TIM_ConfigClockSource+0x16c>
 80022a8:	2b30      	cmp	r3, #48	; 0x30
 80022aa:	d064      	beq.n	8002376 <HAL_TIM_ConfigClockSource+0x15a>
 80022ac:	2b30      	cmp	r3, #48	; 0x30
 80022ae:	d86b      	bhi.n	8002388 <HAL_TIM_ConfigClockSource+0x16c>
 80022b0:	2b20      	cmp	r3, #32
 80022b2:	d060      	beq.n	8002376 <HAL_TIM_ConfigClockSource+0x15a>
 80022b4:	2b20      	cmp	r3, #32
 80022b6:	d867      	bhi.n	8002388 <HAL_TIM_ConfigClockSource+0x16c>
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d05c      	beq.n	8002376 <HAL_TIM_ConfigClockSource+0x15a>
 80022bc:	2b10      	cmp	r3, #16
 80022be:	d05a      	beq.n	8002376 <HAL_TIM_ConfigClockSource+0x15a>
 80022c0:	e062      	b.n	8002388 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6818      	ldr	r0, [r3, #0]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	6899      	ldr	r1, [r3, #8]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	f000 fb35 	bl	8002940 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80022e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	609a      	str	r2, [r3, #8]
      break;
 80022ee:	e04f      	b.n	8002390 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6818      	ldr	r0, [r3, #0]
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	6899      	ldr	r1, [r3, #8]
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	f000 fb1e 	bl	8002940 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689a      	ldr	r2, [r3, #8]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002312:	609a      	str	r2, [r3, #8]
      break;
 8002314:	e03c      	b.n	8002390 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6818      	ldr	r0, [r3, #0]
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	6859      	ldr	r1, [r3, #4]
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	461a      	mov	r2, r3
 8002324:	f000 fa92 	bl	800284c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2150      	movs	r1, #80	; 0x50
 800232e:	4618      	mov	r0, r3
 8002330:	f000 faeb 	bl	800290a <TIM_ITRx_SetConfig>
      break;
 8002334:	e02c      	b.n	8002390 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6818      	ldr	r0, [r3, #0]
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	6859      	ldr	r1, [r3, #4]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	461a      	mov	r2, r3
 8002344:	f000 fab1 	bl	80028aa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2160      	movs	r1, #96	; 0x60
 800234e:	4618      	mov	r0, r3
 8002350:	f000 fadb 	bl	800290a <TIM_ITRx_SetConfig>
      break;
 8002354:	e01c      	b.n	8002390 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6818      	ldr	r0, [r3, #0]
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	6859      	ldr	r1, [r3, #4]
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	461a      	mov	r2, r3
 8002364:	f000 fa72 	bl	800284c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2140      	movs	r1, #64	; 0x40
 800236e:	4618      	mov	r0, r3
 8002370:	f000 facb 	bl	800290a <TIM_ITRx_SetConfig>
      break;
 8002374:	e00c      	b.n	8002390 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4619      	mov	r1, r3
 8002380:	4610      	mov	r0, r2
 8002382:	f000 fac2 	bl	800290a <TIM_ITRx_SetConfig>
      break;
 8002386:	e003      	b.n	8002390 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	73fb      	strb	r3, [r7, #15]
      break;
 800238c:	e000      	b.n	8002390 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800238e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
	...

080023ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a40      	ldr	r2, [pc, #256]	; (80024c0 <TIM_Base_SetConfig+0x114>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d013      	beq.n	80023ec <TIM_Base_SetConfig+0x40>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ca:	d00f      	beq.n	80023ec <TIM_Base_SetConfig+0x40>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a3d      	ldr	r2, [pc, #244]	; (80024c4 <TIM_Base_SetConfig+0x118>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d00b      	beq.n	80023ec <TIM_Base_SetConfig+0x40>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a3c      	ldr	r2, [pc, #240]	; (80024c8 <TIM_Base_SetConfig+0x11c>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d007      	beq.n	80023ec <TIM_Base_SetConfig+0x40>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a3b      	ldr	r2, [pc, #236]	; (80024cc <TIM_Base_SetConfig+0x120>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d003      	beq.n	80023ec <TIM_Base_SetConfig+0x40>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a3a      	ldr	r2, [pc, #232]	; (80024d0 <TIM_Base_SetConfig+0x124>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d108      	bne.n	80023fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a2f      	ldr	r2, [pc, #188]	; (80024c0 <TIM_Base_SetConfig+0x114>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d02b      	beq.n	800245e <TIM_Base_SetConfig+0xb2>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800240c:	d027      	beq.n	800245e <TIM_Base_SetConfig+0xb2>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a2c      	ldr	r2, [pc, #176]	; (80024c4 <TIM_Base_SetConfig+0x118>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d023      	beq.n	800245e <TIM_Base_SetConfig+0xb2>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a2b      	ldr	r2, [pc, #172]	; (80024c8 <TIM_Base_SetConfig+0x11c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d01f      	beq.n	800245e <TIM_Base_SetConfig+0xb2>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a2a      	ldr	r2, [pc, #168]	; (80024cc <TIM_Base_SetConfig+0x120>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d01b      	beq.n	800245e <TIM_Base_SetConfig+0xb2>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a29      	ldr	r2, [pc, #164]	; (80024d0 <TIM_Base_SetConfig+0x124>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d017      	beq.n	800245e <TIM_Base_SetConfig+0xb2>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a28      	ldr	r2, [pc, #160]	; (80024d4 <TIM_Base_SetConfig+0x128>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d013      	beq.n	800245e <TIM_Base_SetConfig+0xb2>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a27      	ldr	r2, [pc, #156]	; (80024d8 <TIM_Base_SetConfig+0x12c>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d00f      	beq.n	800245e <TIM_Base_SetConfig+0xb2>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a26      	ldr	r2, [pc, #152]	; (80024dc <TIM_Base_SetConfig+0x130>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d00b      	beq.n	800245e <TIM_Base_SetConfig+0xb2>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a25      	ldr	r2, [pc, #148]	; (80024e0 <TIM_Base_SetConfig+0x134>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d007      	beq.n	800245e <TIM_Base_SetConfig+0xb2>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a24      	ldr	r2, [pc, #144]	; (80024e4 <TIM_Base_SetConfig+0x138>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d003      	beq.n	800245e <TIM_Base_SetConfig+0xb2>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a23      	ldr	r2, [pc, #140]	; (80024e8 <TIM_Base_SetConfig+0x13c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d108      	bne.n	8002470 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002464:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	4313      	orrs	r3, r2
 800246e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	4313      	orrs	r3, r2
 800247c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a0a      	ldr	r2, [pc, #40]	; (80024c0 <TIM_Base_SetConfig+0x114>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d003      	beq.n	80024a4 <TIM_Base_SetConfig+0xf8>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a0c      	ldr	r2, [pc, #48]	; (80024d0 <TIM_Base_SetConfig+0x124>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d103      	bne.n	80024ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	691a      	ldr	r2, [r3, #16]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	615a      	str	r2, [r3, #20]
}
 80024b2:	bf00      	nop
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	40010000 	.word	0x40010000
 80024c4:	40000400 	.word	0x40000400
 80024c8:	40000800 	.word	0x40000800
 80024cc:	40000c00 	.word	0x40000c00
 80024d0:	40010400 	.word	0x40010400
 80024d4:	40014000 	.word	0x40014000
 80024d8:	40014400 	.word	0x40014400
 80024dc:	40014800 	.word	0x40014800
 80024e0:	40001800 	.word	0x40001800
 80024e4:	40001c00 	.word	0x40001c00
 80024e8:	40002000 	.word	0x40002000

080024ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b087      	sub	sp, #28
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	f023 0201 	bic.w	r2, r3, #1
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800251a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f023 0303 	bic.w	r3, r3, #3
 8002522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	4313      	orrs	r3, r2
 800252c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	f023 0302 	bic.w	r3, r3, #2
 8002534:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	4313      	orrs	r3, r2
 800253e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a20      	ldr	r2, [pc, #128]	; (80025c4 <TIM_OC1_SetConfig+0xd8>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d003      	beq.n	8002550 <TIM_OC1_SetConfig+0x64>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a1f      	ldr	r2, [pc, #124]	; (80025c8 <TIM_OC1_SetConfig+0xdc>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d10c      	bne.n	800256a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	f023 0308 	bic.w	r3, r3, #8
 8002556:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	4313      	orrs	r3, r2
 8002560:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f023 0304 	bic.w	r3, r3, #4
 8002568:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a15      	ldr	r2, [pc, #84]	; (80025c4 <TIM_OC1_SetConfig+0xd8>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d003      	beq.n	800257a <TIM_OC1_SetConfig+0x8e>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a14      	ldr	r2, [pc, #80]	; (80025c8 <TIM_OC1_SetConfig+0xdc>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d111      	bne.n	800259e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002580:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002588:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	4313      	orrs	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	4313      	orrs	r3, r2
 800259c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685a      	ldr	r2, [r3, #4]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	621a      	str	r2, [r3, #32]
}
 80025b8:	bf00      	nop
 80025ba:	371c      	adds	r7, #28
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	40010000 	.word	0x40010000
 80025c8:	40010400 	.word	0x40010400

080025cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b087      	sub	sp, #28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	f023 0210 	bic.w	r2, r3, #16
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002602:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	021b      	lsls	r3, r3, #8
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	4313      	orrs	r3, r2
 800260e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	f023 0320 	bic.w	r3, r3, #32
 8002616:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	011b      	lsls	r3, r3, #4
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	4313      	orrs	r3, r2
 8002622:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4a22      	ldr	r2, [pc, #136]	; (80026b0 <TIM_OC2_SetConfig+0xe4>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d003      	beq.n	8002634 <TIM_OC2_SetConfig+0x68>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a21      	ldr	r2, [pc, #132]	; (80026b4 <TIM_OC2_SetConfig+0xe8>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d10d      	bne.n	8002650 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800263a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	011b      	lsls	r3, r3, #4
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	4313      	orrs	r3, r2
 8002646:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800264e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a17      	ldr	r2, [pc, #92]	; (80026b0 <TIM_OC2_SetConfig+0xe4>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d003      	beq.n	8002660 <TIM_OC2_SetConfig+0x94>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a16      	ldr	r2, [pc, #88]	; (80026b4 <TIM_OC2_SetConfig+0xe8>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d113      	bne.n	8002688 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002666:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800266e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	695b      	ldr	r3, [r3, #20]
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	4313      	orrs	r3, r2
 800267a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	4313      	orrs	r3, r2
 8002686:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	621a      	str	r2, [r3, #32]
}
 80026a2:	bf00      	nop
 80026a4:	371c      	adds	r7, #28
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	40010000 	.word	0x40010000
 80026b4:	40010400 	.word	0x40010400

080026b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b087      	sub	sp, #28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a1b      	ldr	r3, [r3, #32]
 80026d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f023 0303 	bic.w	r3, r3, #3
 80026ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002700:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	021b      	lsls	r3, r3, #8
 8002708:	697a      	ldr	r2, [r7, #20]
 800270a:	4313      	orrs	r3, r2
 800270c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a21      	ldr	r2, [pc, #132]	; (8002798 <TIM_OC3_SetConfig+0xe0>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d003      	beq.n	800271e <TIM_OC3_SetConfig+0x66>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a20      	ldr	r2, [pc, #128]	; (800279c <TIM_OC3_SetConfig+0xe4>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d10d      	bne.n	800273a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002724:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	021b      	lsls	r3, r3, #8
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	4313      	orrs	r3, r2
 8002730:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002738:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a16      	ldr	r2, [pc, #88]	; (8002798 <TIM_OC3_SetConfig+0xe0>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d003      	beq.n	800274a <TIM_OC3_SetConfig+0x92>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a15      	ldr	r2, [pc, #84]	; (800279c <TIM_OC3_SetConfig+0xe4>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d113      	bne.n	8002772 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002750:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002758:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	4313      	orrs	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	011b      	lsls	r3, r3, #4
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	4313      	orrs	r3, r2
 8002770:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	621a      	str	r2, [r3, #32]
}
 800278c:	bf00      	nop
 800278e:	371c      	adds	r7, #28
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	40010000 	.word	0x40010000
 800279c:	40010400 	.word	0x40010400

080027a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b087      	sub	sp, #28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	021b      	lsls	r3, r3, #8
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	031b      	lsls	r3, r3, #12
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a12      	ldr	r2, [pc, #72]	; (8002844 <TIM_OC4_SetConfig+0xa4>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d003      	beq.n	8002808 <TIM_OC4_SetConfig+0x68>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a11      	ldr	r2, [pc, #68]	; (8002848 <TIM_OC4_SetConfig+0xa8>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d109      	bne.n	800281c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800280e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	019b      	lsls	r3, r3, #6
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	4313      	orrs	r3, r2
 800281a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	621a      	str	r2, [r3, #32]
}
 8002836:	bf00      	nop
 8002838:	371c      	adds	r7, #28
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	40010000 	.word	0x40010000
 8002848:	40010400 	.word	0x40010400

0800284c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800284c:	b480      	push	{r7}
 800284e:	b087      	sub	sp, #28
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	f023 0201 	bic.w	r2, r3, #1
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002876:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	4313      	orrs	r3, r2
 8002880:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f023 030a 	bic.w	r3, r3, #10
 8002888:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	4313      	orrs	r3, r2
 8002890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	621a      	str	r2, [r3, #32]
}
 800289e:	bf00      	nop
 80028a0:	371c      	adds	r7, #28
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b087      	sub	sp, #28
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	60f8      	str	r0, [r7, #12]
 80028b2:	60b9      	str	r1, [r7, #8]
 80028b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	f023 0210 	bic.w	r2, r3, #16
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	031b      	lsls	r3, r3, #12
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	4313      	orrs	r3, r2
 80028de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	621a      	str	r2, [r3, #32]
}
 80028fe:	bf00      	nop
 8002900:	371c      	adds	r7, #28
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800290a:	b480      	push	{r7}
 800290c:	b085      	sub	sp, #20
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
 8002912:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002920:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	4313      	orrs	r3, r2
 8002928:	f043 0307 	orr.w	r3, r3, #7
 800292c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	609a      	str	r2, [r3, #8]
}
 8002934:	bf00      	nop
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002940:	b480      	push	{r7}
 8002942:	b087      	sub	sp, #28
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
 800294c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800295a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	021a      	lsls	r2, r3, #8
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	431a      	orrs	r2, r3
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	4313      	orrs	r3, r2
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	4313      	orrs	r3, r2
 800296c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	609a      	str	r2, [r3, #8]
}
 8002974:	bf00      	nop
 8002976:	371c      	adds	r7, #28
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002980:	b480      	push	{r7}
 8002982:	b087      	sub	sp, #28
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	f003 031f 	and.w	r3, r3, #31
 8002992:	2201      	movs	r2, #1
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6a1a      	ldr	r2, [r3, #32]
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	43db      	mvns	r3, r3
 80029a2:	401a      	ands	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6a1a      	ldr	r2, [r3, #32]
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	f003 031f 	and.w	r3, r3, #31
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	fa01 f303 	lsl.w	r3, r1, r3
 80029b8:	431a      	orrs	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	621a      	str	r2, [r3, #32]
}
 80029be:	bf00      	nop
 80029c0:	371c      	adds	r7, #28
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
	...

080029cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d101      	bne.n	80029e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029e0:	2302      	movs	r3, #2
 80029e2:	e05a      	b.n	8002a9a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2202      	movs	r2, #2
 80029f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a21      	ldr	r2, [pc, #132]	; (8002aa8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d022      	beq.n	8002a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a30:	d01d      	beq.n	8002a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a1d      	ldr	r2, [pc, #116]	; (8002aac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d018      	beq.n	8002a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a1b      	ldr	r2, [pc, #108]	; (8002ab0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d013      	beq.n	8002a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a1a      	ldr	r2, [pc, #104]	; (8002ab4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d00e      	beq.n	8002a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a18      	ldr	r2, [pc, #96]	; (8002ab8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d009      	beq.n	8002a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a17      	ldr	r2, [pc, #92]	; (8002abc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d004      	beq.n	8002a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a15      	ldr	r2, [pc, #84]	; (8002ac0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d10c      	bne.n	8002a88 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	68ba      	ldr	r2, [r7, #8]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	40010000 	.word	0x40010000
 8002aac:	40000400 	.word	0x40000400
 8002ab0:	40000800 	.word	0x40000800
 8002ab4:	40000c00 	.word	0x40000c00
 8002ab8:	40010400 	.word	0x40010400
 8002abc:	40014000 	.word	0x40014000
 8002ac0:	40001800 	.word	0x40001800

08002ac4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002adc:	2302      	movs	r3, #2
 8002ade:	e03d      	b.n	8002b5c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3714      	adds	r7, #20
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e03f      	b.n	8002bfa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d106      	bne.n	8002b94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7fd ffb0 	bl	8000af4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2224      	movs	r2, #36	; 0x24
 8002b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68da      	ldr	r2, [r3, #12]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002baa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 fe1d 	bl	80037ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	691a      	ldr	r2, [r3, #16]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	695a      	ldr	r2, [r3, #20]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68da      	ldr	r2, [r3, #12]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002be0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2220      	movs	r2, #32
 8002bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b08a      	sub	sp, #40	; 0x28
 8002c06:	af02      	add	r7, sp, #8
 8002c08:	60f8      	str	r0, [r7, #12]
 8002c0a:	60b9      	str	r1, [r7, #8]
 8002c0c:	603b      	str	r3, [r7, #0]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c12:	2300      	movs	r3, #0
 8002c14:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b20      	cmp	r3, #32
 8002c20:	d17c      	bne.n	8002d1c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d002      	beq.n	8002c2e <HAL_UART_Transmit+0x2c>
 8002c28:	88fb      	ldrh	r3, [r7, #6]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e075      	b.n	8002d1e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d101      	bne.n	8002c40 <HAL_UART_Transmit+0x3e>
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	e06e      	b.n	8002d1e <HAL_UART_Transmit+0x11c>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2221      	movs	r2, #33	; 0x21
 8002c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c56:	f7fe f873 	bl	8000d40 <HAL_GetTick>
 8002c5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	88fa      	ldrh	r2, [r7, #6]
 8002c60:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	88fa      	ldrh	r2, [r7, #6]
 8002c66:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c70:	d108      	bne.n	8002c84 <HAL_UART_Transmit+0x82>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d104      	bne.n	8002c84 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	61bb      	str	r3, [r7, #24]
 8002c82:	e003      	b.n	8002c8c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002c94:	e02a      	b.n	8002cec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	2180      	movs	r1, #128	; 0x80
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f000 fb9b 	bl	80033dc <UART_WaitOnFlagUntilTimeout>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e036      	b.n	8002d1e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10b      	bne.n	8002cce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	881b      	ldrh	r3, [r3, #0]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cc4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	3302      	adds	r3, #2
 8002cca:	61bb      	str	r3, [r7, #24]
 8002ccc:	e007      	b.n	8002cde <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	781a      	ldrb	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	3301      	adds	r3, #1
 8002cdc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1cf      	bne.n	8002c96 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	9300      	str	r3, [sp, #0]
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	2140      	movs	r1, #64	; 0x40
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f000 fb6b 	bl	80033dc <UART_WaitOnFlagUntilTimeout>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e006      	b.n	8002d1e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2220      	movs	r2, #32
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	e000      	b.n	8002d1e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d1c:	2302      	movs	r3, #2
  }
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3720      	adds	r7, #32
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b08a      	sub	sp, #40	; 0x28
 8002d2a:	af02      	add	r7, sp, #8
 8002d2c:	60f8      	str	r0, [r7, #12]
 8002d2e:	60b9      	str	r1, [r7, #8]
 8002d30:	603b      	str	r3, [r7, #0]
 8002d32:	4613      	mov	r3, r2
 8002d34:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b20      	cmp	r3, #32
 8002d44:	f040 808c 	bne.w	8002e60 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d002      	beq.n	8002d54 <HAL_UART_Receive+0x2e>
 8002d4e:	88fb      	ldrh	r3, [r7, #6]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d101      	bne.n	8002d58 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e084      	b.n	8002e62 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d101      	bne.n	8002d66 <HAL_UART_Receive+0x40>
 8002d62:	2302      	movs	r3, #2
 8002d64:	e07d      	b.n	8002e62 <HAL_UART_Receive+0x13c>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2222      	movs	r2, #34	; 0x22
 8002d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d82:	f7fd ffdd 	bl	8000d40 <HAL_GetTick>
 8002d86:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	88fa      	ldrh	r2, [r7, #6]
 8002d8c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	88fa      	ldrh	r2, [r7, #6]
 8002d92:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d9c:	d108      	bne.n	8002db0 <HAL_UART_Receive+0x8a>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d104      	bne.n	8002db0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002da6:	2300      	movs	r3, #0
 8002da8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	61bb      	str	r3, [r7, #24]
 8002dae:	e003      	b.n	8002db8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002db4:	2300      	movs	r3, #0
 8002db6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002dc0:	e043      	b.n	8002e4a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	9300      	str	r3, [sp, #0]
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	2120      	movs	r1, #32
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f000 fb05 	bl	80033dc <UART_WaitOnFlagUntilTimeout>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e042      	b.n	8002e62 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10c      	bne.n	8002dfc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	3302      	adds	r3, #2
 8002df8:	61bb      	str	r3, [r7, #24]
 8002dfa:	e01f      	b.n	8002e3c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e04:	d007      	beq.n	8002e16 <HAL_UART_Receive+0xf0>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10a      	bne.n	8002e24 <HAL_UART_Receive+0xfe>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d106      	bne.n	8002e24 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	b2da      	uxtb	r2, r3
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	701a      	strb	r2, [r3, #0]
 8002e22:	e008      	b.n	8002e36 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	3b01      	subs	r3, #1
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1b6      	bne.n	8002dc2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2220      	movs	r2, #32
 8002e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	e000      	b.n	8002e62 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002e60:	2302      	movs	r3, #2
  }
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3720      	adds	r7, #32
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
	...

08002e6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b0ba      	sub	sp, #232	; 0xe8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002e92:	2300      	movs	r3, #0
 8002e94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ea2:	f003 030f 	and.w	r3, r3, #15
 8002ea6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002eaa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10f      	bne.n	8002ed2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eb6:	f003 0320 	and.w	r3, r3, #32
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d009      	beq.n	8002ed2 <HAL_UART_IRQHandler+0x66>
 8002ebe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ec2:	f003 0320 	and.w	r3, r3, #32
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 fbd3 	bl	8003676 <UART_Receive_IT>
      return;
 8002ed0:	e256      	b.n	8003380 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002ed2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f000 80de 	beq.w	8003098 <HAL_UART_IRQHandler+0x22c>
 8002edc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d106      	bne.n	8002ef6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002eec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f000 80d1 	beq.w	8003098 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00b      	beq.n	8002f1a <HAL_UART_IRQHandler+0xae>
 8002f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d005      	beq.n	8002f1a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	f043 0201 	orr.w	r2, r3, #1
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f1e:	f003 0304 	and.w	r3, r3, #4
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00b      	beq.n	8002f3e <HAL_UART_IRQHandler+0xd2>
 8002f26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d005      	beq.n	8002f3e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	f043 0202 	orr.w	r2, r3, #2
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00b      	beq.n	8002f62 <HAL_UART_IRQHandler+0xf6>
 8002f4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d005      	beq.n	8002f62 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	f043 0204 	orr.w	r2, r3, #4
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f66:	f003 0308 	and.w	r3, r3, #8
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d011      	beq.n	8002f92 <HAL_UART_IRQHandler+0x126>
 8002f6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f72:	f003 0320 	and.w	r3, r3, #32
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d105      	bne.n	8002f86 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002f7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d005      	beq.n	8002f92 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8a:	f043 0208 	orr.w	r2, r3, #8
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f000 81ed 	beq.w	8003376 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fa0:	f003 0320 	and.w	r3, r3, #32
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d008      	beq.n	8002fba <HAL_UART_IRQHandler+0x14e>
 8002fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fac:	f003 0320 	and.w	r3, r3, #32
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d002      	beq.n	8002fba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 fb5e 	bl	8003676 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc4:	2b40      	cmp	r3, #64	; 0x40
 8002fc6:	bf0c      	ite	eq
 8002fc8:	2301      	moveq	r3, #1
 8002fca:	2300      	movne	r3, #0
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	f003 0308 	and.w	r3, r3, #8
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d103      	bne.n	8002fe6 <HAL_UART_IRQHandler+0x17a>
 8002fde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d04f      	beq.n	8003086 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 fa66 	bl	80034b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff6:	2b40      	cmp	r3, #64	; 0x40
 8002ff8:	d141      	bne.n	800307e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	3314      	adds	r3, #20
 8003000:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003004:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003008:	e853 3f00 	ldrex	r3, [r3]
 800300c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003010:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003014:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003018:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	3314      	adds	r3, #20
 8003022:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003026:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800302a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800302e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003032:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003036:	e841 2300 	strex	r3, r2, [r1]
 800303a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800303e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1d9      	bne.n	8002ffa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304a:	2b00      	cmp	r3, #0
 800304c:	d013      	beq.n	8003076 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003052:	4a7d      	ldr	r2, [pc, #500]	; (8003248 <HAL_UART_IRQHandler+0x3dc>)
 8003054:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305a:	4618      	mov	r0, r3
 800305c:	f7fe f821 	bl	80010a2 <HAL_DMA_Abort_IT>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d016      	beq.n	8003094 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003070:	4610      	mov	r0, r2
 8003072:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003074:	e00e      	b.n	8003094 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 f99a 	bl	80033b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800307c:	e00a      	b.n	8003094 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f996 	bl	80033b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003084:	e006      	b.n	8003094 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 f992 	bl	80033b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003092:	e170      	b.n	8003376 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003094:	bf00      	nop
    return;
 8003096:	e16e      	b.n	8003376 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309c:	2b01      	cmp	r3, #1
 800309e:	f040 814a 	bne.w	8003336 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80030a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030a6:	f003 0310 	and.w	r3, r3, #16
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f000 8143 	beq.w	8003336 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80030b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030b4:	f003 0310 	and.w	r3, r3, #16
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f000 813c 	beq.w	8003336 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80030be:	2300      	movs	r3, #0
 80030c0:	60bb      	str	r3, [r7, #8]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	60bb      	str	r3, [r7, #8]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	60bb      	str	r3, [r7, #8]
 80030d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030de:	2b40      	cmp	r3, #64	; 0x40
 80030e0:	f040 80b4 	bne.w	800324c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80030f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 8140 	beq.w	800337a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80030fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003102:	429a      	cmp	r2, r3
 8003104:	f080 8139 	bcs.w	800337a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800310e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800311a:	f000 8088 	beq.w	800322e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	330c      	adds	r3, #12
 8003124:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003128:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800312c:	e853 3f00 	ldrex	r3, [r3]
 8003130:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003134:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003138:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800313c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	330c      	adds	r3, #12
 8003146:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800314a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800314e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003152:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003156:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800315a:	e841 2300 	strex	r3, r2, [r1]
 800315e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003162:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1d9      	bne.n	800311e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	3314      	adds	r3, #20
 8003170:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003172:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003174:	e853 3f00 	ldrex	r3, [r3]
 8003178:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800317a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800317c:	f023 0301 	bic.w	r3, r3, #1
 8003180:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	3314      	adds	r3, #20
 800318a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800318e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003192:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003194:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003196:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800319a:	e841 2300 	strex	r3, r2, [r1]
 800319e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80031a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1e1      	bne.n	800316a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	3314      	adds	r3, #20
 80031ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031b0:	e853 3f00 	ldrex	r3, [r3]
 80031b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80031b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	3314      	adds	r3, #20
 80031c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80031ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80031cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80031d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80031d2:	e841 2300 	strex	r3, r2, [r1]
 80031d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80031d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1e3      	bne.n	80031a6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2220      	movs	r2, #32
 80031e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	330c      	adds	r3, #12
 80031f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031f6:	e853 3f00 	ldrex	r3, [r3]
 80031fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80031fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031fe:	f023 0310 	bic.w	r3, r3, #16
 8003202:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	330c      	adds	r3, #12
 800320c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003210:	65ba      	str	r2, [r7, #88]	; 0x58
 8003212:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003214:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003216:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003218:	e841 2300 	strex	r3, r2, [r1]
 800321c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800321e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1e3      	bne.n	80031ec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003228:	4618      	mov	r0, r3
 800322a:	f7fd feca 	bl	8000fc2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003236:	b29b      	uxth	r3, r3
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	b29b      	uxth	r3, r3
 800323c:	4619      	mov	r1, r3
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f8c0 	bl	80033c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003244:	e099      	b.n	800337a <HAL_UART_IRQHandler+0x50e>
 8003246:	bf00      	nop
 8003248:	0800357f 	.word	0x0800357f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003254:	b29b      	uxth	r3, r3
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003260:	b29b      	uxth	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	f000 808b 	beq.w	800337e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003268:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 8086 	beq.w	800337e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	330c      	adds	r3, #12
 8003278:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800327a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800327c:	e853 3f00 	ldrex	r3, [r3]
 8003280:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003284:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003288:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	330c      	adds	r3, #12
 8003292:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003296:	647a      	str	r2, [r7, #68]	; 0x44
 8003298:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800329c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800329e:	e841 2300 	strex	r3, r2, [r1]
 80032a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80032a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1e3      	bne.n	8003272 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	3314      	adds	r3, #20
 80032b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b4:	e853 3f00 	ldrex	r3, [r3]
 80032b8:	623b      	str	r3, [r7, #32]
   return(result);
 80032ba:	6a3b      	ldr	r3, [r7, #32]
 80032bc:	f023 0301 	bic.w	r3, r3, #1
 80032c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	3314      	adds	r3, #20
 80032ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80032ce:	633a      	str	r2, [r7, #48]	; 0x30
 80032d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032d6:	e841 2300 	strex	r3, r2, [r1]
 80032da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80032dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1e3      	bne.n	80032aa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2220      	movs	r2, #32
 80032e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	330c      	adds	r3, #12
 80032f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	e853 3f00 	ldrex	r3, [r3]
 80032fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f023 0310 	bic.w	r3, r3, #16
 8003306:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	330c      	adds	r3, #12
 8003310:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003314:	61fa      	str	r2, [r7, #28]
 8003316:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003318:	69b9      	ldr	r1, [r7, #24]
 800331a:	69fa      	ldr	r2, [r7, #28]
 800331c:	e841 2300 	strex	r3, r2, [r1]
 8003320:	617b      	str	r3, [r7, #20]
   return(result);
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1e3      	bne.n	80032f0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003328:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800332c:	4619      	mov	r1, r3
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f848 	bl	80033c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003334:	e023      	b.n	800337e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800333a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800333e:	2b00      	cmp	r3, #0
 8003340:	d009      	beq.n	8003356 <HAL_UART_IRQHandler+0x4ea>
 8003342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f929 	bl	80035a6 <UART_Transmit_IT>
    return;
 8003354:	e014      	b.n	8003380 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800335a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00e      	beq.n	8003380 <HAL_UART_IRQHandler+0x514>
 8003362:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800336a:	2b00      	cmp	r3, #0
 800336c:	d008      	beq.n	8003380 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 f969 	bl	8003646 <UART_EndTransmit_IT>
    return;
 8003374:	e004      	b.n	8003380 <HAL_UART_IRQHandler+0x514>
    return;
 8003376:	bf00      	nop
 8003378:	e002      	b.n	8003380 <HAL_UART_IRQHandler+0x514>
      return;
 800337a:	bf00      	nop
 800337c:	e000      	b.n	8003380 <HAL_UART_IRQHandler+0x514>
      return;
 800337e:	bf00      	nop
  }
}
 8003380:	37e8      	adds	r7, #232	; 0xe8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop

08003388 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	460b      	mov	r3, r1
 80033ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b090      	sub	sp, #64	; 0x40
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	603b      	str	r3, [r7, #0]
 80033e8:	4613      	mov	r3, r2
 80033ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033ec:	e050      	b.n	8003490 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033f4:	d04c      	beq.n	8003490 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80033f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d007      	beq.n	800340c <UART_WaitOnFlagUntilTimeout+0x30>
 80033fc:	f7fd fca0 	bl	8000d40 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003408:	429a      	cmp	r2, r3
 800340a:	d241      	bcs.n	8003490 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	330c      	adds	r3, #12
 8003412:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003416:	e853 3f00 	ldrex	r3, [r3]
 800341a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800341c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003422:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	330c      	adds	r3, #12
 800342a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800342c:	637a      	str	r2, [r7, #52]	; 0x34
 800342e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003430:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003432:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003434:	e841 2300 	strex	r3, r2, [r1]
 8003438:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800343a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1e5      	bne.n	800340c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	3314      	adds	r3, #20
 8003446:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	e853 3f00 	ldrex	r3, [r3]
 800344e:	613b      	str	r3, [r7, #16]
   return(result);
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	f023 0301 	bic.w	r3, r3, #1
 8003456:	63bb      	str	r3, [r7, #56]	; 0x38
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	3314      	adds	r3, #20
 800345e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003460:	623a      	str	r2, [r7, #32]
 8003462:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003464:	69f9      	ldr	r1, [r7, #28]
 8003466:	6a3a      	ldr	r2, [r7, #32]
 8003468:	e841 2300 	strex	r3, r2, [r1]
 800346c:	61bb      	str	r3, [r7, #24]
   return(result);
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1e5      	bne.n	8003440 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2220      	movs	r2, #32
 8003478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2220      	movs	r2, #32
 8003480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e00f      	b.n	80034b0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	4013      	ands	r3, r2
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	429a      	cmp	r2, r3
 800349e:	bf0c      	ite	eq
 80034a0:	2301      	moveq	r3, #1
 80034a2:	2300      	movne	r3, #0
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	461a      	mov	r2, r3
 80034a8:	79fb      	ldrb	r3, [r7, #7]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d09f      	beq.n	80033ee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3740      	adds	r7, #64	; 0x40
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b095      	sub	sp, #84	; 0x54
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	330c      	adds	r3, #12
 80034c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ca:	e853 3f00 	ldrex	r3, [r3]
 80034ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80034d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	330c      	adds	r3, #12
 80034de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034e0:	643a      	str	r2, [r7, #64]	; 0x40
 80034e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80034e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80034e8:	e841 2300 	strex	r3, r2, [r1]
 80034ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80034ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1e5      	bne.n	80034c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	3314      	adds	r3, #20
 80034fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034fc:	6a3b      	ldr	r3, [r7, #32]
 80034fe:	e853 3f00 	ldrex	r3, [r3]
 8003502:	61fb      	str	r3, [r7, #28]
   return(result);
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	f023 0301 	bic.w	r3, r3, #1
 800350a:	64bb      	str	r3, [r7, #72]	; 0x48
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	3314      	adds	r3, #20
 8003512:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003514:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003516:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003518:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800351a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800351c:	e841 2300 	strex	r3, r2, [r1]
 8003520:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1e5      	bne.n	80034f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352c:	2b01      	cmp	r3, #1
 800352e:	d119      	bne.n	8003564 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	330c      	adds	r3, #12
 8003536:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	e853 3f00 	ldrex	r3, [r3]
 800353e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	f023 0310 	bic.w	r3, r3, #16
 8003546:	647b      	str	r3, [r7, #68]	; 0x44
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	330c      	adds	r3, #12
 800354e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003550:	61ba      	str	r2, [r7, #24]
 8003552:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003554:	6979      	ldr	r1, [r7, #20]
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	e841 2300 	strex	r3, r2, [r1]
 800355c:	613b      	str	r3, [r7, #16]
   return(result);
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1e5      	bne.n	8003530 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2220      	movs	r2, #32
 8003568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003572:	bf00      	nop
 8003574:	3754      	adds	r7, #84	; 0x54
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr

0800357e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b084      	sub	sp, #16
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f7ff ff09 	bl	80033b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800359e:	bf00      	nop
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80035a6:	b480      	push	{r7}
 80035a8:	b085      	sub	sp, #20
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b21      	cmp	r3, #33	; 0x21
 80035b8:	d13e      	bne.n	8003638 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035c2:	d114      	bne.n	80035ee <UART_Transmit_IT+0x48>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d110      	bne.n	80035ee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	881b      	ldrh	r3, [r3, #0]
 80035d6:	461a      	mov	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	1c9a      	adds	r2, r3, #2
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	621a      	str	r2, [r3, #32]
 80035ec:	e008      	b.n	8003600 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	1c59      	adds	r1, r3, #1
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6211      	str	r1, [r2, #32]
 80035f8:	781a      	ldrb	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003604:	b29b      	uxth	r3, r3
 8003606:	3b01      	subs	r3, #1
 8003608:	b29b      	uxth	r3, r3
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	4619      	mov	r1, r3
 800360e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003610:	2b00      	cmp	r3, #0
 8003612:	d10f      	bne.n	8003634 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68da      	ldr	r2, [r3, #12]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003622:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68da      	ldr	r2, [r3, #12]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003632:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003634:	2300      	movs	r3, #0
 8003636:	e000      	b.n	800363a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003638:	2302      	movs	r3, #2
  }
}
 800363a:	4618      	mov	r0, r3
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b082      	sub	sp, #8
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68da      	ldr	r2, [r3, #12]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800365c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2220      	movs	r2, #32
 8003662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7ff fe8e 	bl	8003388 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b08c      	sub	sp, #48	; 0x30
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b22      	cmp	r3, #34	; 0x22
 8003688:	f040 80ab 	bne.w	80037e2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003694:	d117      	bne.n	80036c6 <UART_Receive_IT+0x50>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d113      	bne.n	80036c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800369e:	2300      	movs	r3, #0
 80036a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036be:	1c9a      	adds	r2, r3, #2
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	629a      	str	r2, [r3, #40]	; 0x28
 80036c4:	e026      	b.n	8003714 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80036cc:	2300      	movs	r3, #0
 80036ce:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036d8:	d007      	beq.n	80036ea <UART_Receive_IT+0x74>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10a      	bne.n	80036f8 <UART_Receive_IT+0x82>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d106      	bne.n	80036f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	b2da      	uxtb	r2, r3
 80036f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f4:	701a      	strb	r2, [r3, #0]
 80036f6:	e008      	b.n	800370a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003704:	b2da      	uxtb	r2, r3
 8003706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003708:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370e:	1c5a      	adds	r2, r3, #1
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003718:	b29b      	uxth	r3, r3
 800371a:	3b01      	subs	r3, #1
 800371c:	b29b      	uxth	r3, r3
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	4619      	mov	r1, r3
 8003722:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003724:	2b00      	cmp	r3, #0
 8003726:	d15a      	bne.n	80037de <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68da      	ldr	r2, [r3, #12]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 0220 	bic.w	r2, r2, #32
 8003736:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68da      	ldr	r2, [r3, #12]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003746:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	695a      	ldr	r2, [r3, #20]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 0201 	bic.w	r2, r2, #1
 8003756:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2220      	movs	r2, #32
 800375c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003764:	2b01      	cmp	r3, #1
 8003766:	d135      	bne.n	80037d4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	330c      	adds	r3, #12
 8003774:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	e853 3f00 	ldrex	r3, [r3]
 800377c:	613b      	str	r3, [r7, #16]
   return(result);
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	f023 0310 	bic.w	r3, r3, #16
 8003784:	627b      	str	r3, [r7, #36]	; 0x24
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	330c      	adds	r3, #12
 800378c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800378e:	623a      	str	r2, [r7, #32]
 8003790:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003792:	69f9      	ldr	r1, [r7, #28]
 8003794:	6a3a      	ldr	r2, [r7, #32]
 8003796:	e841 2300 	strex	r3, r2, [r1]
 800379a:	61bb      	str	r3, [r7, #24]
   return(result);
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1e5      	bne.n	800376e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0310 	and.w	r3, r3, #16
 80037ac:	2b10      	cmp	r3, #16
 80037ae:	d10a      	bne.n	80037c6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037b0:	2300      	movs	r3, #0
 80037b2:	60fb      	str	r3, [r7, #12]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	60fb      	str	r3, [r7, #12]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	60fb      	str	r3, [r7, #12]
 80037c4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80037ca:	4619      	mov	r1, r3
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f7ff fdf9 	bl	80033c4 <HAL_UARTEx_RxEventCallback>
 80037d2:	e002      	b.n	80037da <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f7ff fde1 	bl	800339c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80037da:	2300      	movs	r3, #0
 80037dc:	e002      	b.n	80037e4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80037de:	2300      	movs	r3, #0
 80037e0:	e000      	b.n	80037e4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80037e2:	2302      	movs	r3, #2
  }
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3730      	adds	r7, #48	; 0x30
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037f0:	b0c0      	sub	sp, #256	; 0x100
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003808:	68d9      	ldr	r1, [r3, #12]
 800380a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	ea40 0301 	orr.w	r3, r0, r1
 8003814:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	431a      	orrs	r2, r3
 8003824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	431a      	orrs	r2, r3
 800382c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	4313      	orrs	r3, r2
 8003834:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003844:	f021 010c 	bic.w	r1, r1, #12
 8003848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003852:	430b      	orrs	r3, r1
 8003854:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003866:	6999      	ldr	r1, [r3, #24]
 8003868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	ea40 0301 	orr.w	r3, r0, r1
 8003872:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	4b8f      	ldr	r3, [pc, #572]	; (8003ab8 <UART_SetConfig+0x2cc>)
 800387c:	429a      	cmp	r2, r3
 800387e:	d005      	beq.n	800388c <UART_SetConfig+0xa0>
 8003880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	4b8d      	ldr	r3, [pc, #564]	; (8003abc <UART_SetConfig+0x2d0>)
 8003888:	429a      	cmp	r2, r3
 800388a:	d104      	bne.n	8003896 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800388c:	f7fe fa80 	bl	8001d90 <HAL_RCC_GetPCLK2Freq>
 8003890:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003894:	e003      	b.n	800389e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003896:	f7fe fa67 	bl	8001d68 <HAL_RCC_GetPCLK1Freq>
 800389a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800389e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a2:	69db      	ldr	r3, [r3, #28]
 80038a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038a8:	f040 810c 	bne.w	8003ac4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038b0:	2200      	movs	r2, #0
 80038b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80038b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80038ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80038be:	4622      	mov	r2, r4
 80038c0:	462b      	mov	r3, r5
 80038c2:	1891      	adds	r1, r2, r2
 80038c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80038c6:	415b      	adcs	r3, r3
 80038c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80038ce:	4621      	mov	r1, r4
 80038d0:	eb12 0801 	adds.w	r8, r2, r1
 80038d4:	4629      	mov	r1, r5
 80038d6:	eb43 0901 	adc.w	r9, r3, r1
 80038da:	f04f 0200 	mov.w	r2, #0
 80038de:	f04f 0300 	mov.w	r3, #0
 80038e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038ee:	4690      	mov	r8, r2
 80038f0:	4699      	mov	r9, r3
 80038f2:	4623      	mov	r3, r4
 80038f4:	eb18 0303 	adds.w	r3, r8, r3
 80038f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80038fc:	462b      	mov	r3, r5
 80038fe:	eb49 0303 	adc.w	r3, r9, r3
 8003902:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003912:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003916:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800391a:	460b      	mov	r3, r1
 800391c:	18db      	adds	r3, r3, r3
 800391e:	653b      	str	r3, [r7, #80]	; 0x50
 8003920:	4613      	mov	r3, r2
 8003922:	eb42 0303 	adc.w	r3, r2, r3
 8003926:	657b      	str	r3, [r7, #84]	; 0x54
 8003928:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800392c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003930:	f7fc fc4a 	bl	80001c8 <__aeabi_uldivmod>
 8003934:	4602      	mov	r2, r0
 8003936:	460b      	mov	r3, r1
 8003938:	4b61      	ldr	r3, [pc, #388]	; (8003ac0 <UART_SetConfig+0x2d4>)
 800393a:	fba3 2302 	umull	r2, r3, r3, r2
 800393e:	095b      	lsrs	r3, r3, #5
 8003940:	011c      	lsls	r4, r3, #4
 8003942:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003946:	2200      	movs	r2, #0
 8003948:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800394c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003950:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003954:	4642      	mov	r2, r8
 8003956:	464b      	mov	r3, r9
 8003958:	1891      	adds	r1, r2, r2
 800395a:	64b9      	str	r1, [r7, #72]	; 0x48
 800395c:	415b      	adcs	r3, r3
 800395e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003960:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003964:	4641      	mov	r1, r8
 8003966:	eb12 0a01 	adds.w	sl, r2, r1
 800396a:	4649      	mov	r1, r9
 800396c:	eb43 0b01 	adc.w	fp, r3, r1
 8003970:	f04f 0200 	mov.w	r2, #0
 8003974:	f04f 0300 	mov.w	r3, #0
 8003978:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800397c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003980:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003984:	4692      	mov	sl, r2
 8003986:	469b      	mov	fp, r3
 8003988:	4643      	mov	r3, r8
 800398a:	eb1a 0303 	adds.w	r3, sl, r3
 800398e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003992:	464b      	mov	r3, r9
 8003994:	eb4b 0303 	adc.w	r3, fp, r3
 8003998:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800399c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80039a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80039ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80039b0:	460b      	mov	r3, r1
 80039b2:	18db      	adds	r3, r3, r3
 80039b4:	643b      	str	r3, [r7, #64]	; 0x40
 80039b6:	4613      	mov	r3, r2
 80039b8:	eb42 0303 	adc.w	r3, r2, r3
 80039bc:	647b      	str	r3, [r7, #68]	; 0x44
 80039be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80039c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80039c6:	f7fc fbff 	bl	80001c8 <__aeabi_uldivmod>
 80039ca:	4602      	mov	r2, r0
 80039cc:	460b      	mov	r3, r1
 80039ce:	4611      	mov	r1, r2
 80039d0:	4b3b      	ldr	r3, [pc, #236]	; (8003ac0 <UART_SetConfig+0x2d4>)
 80039d2:	fba3 2301 	umull	r2, r3, r3, r1
 80039d6:	095b      	lsrs	r3, r3, #5
 80039d8:	2264      	movs	r2, #100	; 0x64
 80039da:	fb02 f303 	mul.w	r3, r2, r3
 80039de:	1acb      	subs	r3, r1, r3
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80039e6:	4b36      	ldr	r3, [pc, #216]	; (8003ac0 <UART_SetConfig+0x2d4>)
 80039e8:	fba3 2302 	umull	r2, r3, r3, r2
 80039ec:	095b      	lsrs	r3, r3, #5
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80039f4:	441c      	add	r4, r3
 80039f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039fa:	2200      	movs	r2, #0
 80039fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a00:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003a04:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003a08:	4642      	mov	r2, r8
 8003a0a:	464b      	mov	r3, r9
 8003a0c:	1891      	adds	r1, r2, r2
 8003a0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a10:	415b      	adcs	r3, r3
 8003a12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a18:	4641      	mov	r1, r8
 8003a1a:	1851      	adds	r1, r2, r1
 8003a1c:	6339      	str	r1, [r7, #48]	; 0x30
 8003a1e:	4649      	mov	r1, r9
 8003a20:	414b      	adcs	r3, r1
 8003a22:	637b      	str	r3, [r7, #52]	; 0x34
 8003a24:	f04f 0200 	mov.w	r2, #0
 8003a28:	f04f 0300 	mov.w	r3, #0
 8003a2c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003a30:	4659      	mov	r1, fp
 8003a32:	00cb      	lsls	r3, r1, #3
 8003a34:	4651      	mov	r1, sl
 8003a36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a3a:	4651      	mov	r1, sl
 8003a3c:	00ca      	lsls	r2, r1, #3
 8003a3e:	4610      	mov	r0, r2
 8003a40:	4619      	mov	r1, r3
 8003a42:	4603      	mov	r3, r0
 8003a44:	4642      	mov	r2, r8
 8003a46:	189b      	adds	r3, r3, r2
 8003a48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a4c:	464b      	mov	r3, r9
 8003a4e:	460a      	mov	r2, r1
 8003a50:	eb42 0303 	adc.w	r3, r2, r3
 8003a54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003a64:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003a68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	18db      	adds	r3, r3, r3
 8003a70:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a72:	4613      	mov	r3, r2
 8003a74:	eb42 0303 	adc.w	r3, r2, r3
 8003a78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003a82:	f7fc fba1 	bl	80001c8 <__aeabi_uldivmod>
 8003a86:	4602      	mov	r2, r0
 8003a88:	460b      	mov	r3, r1
 8003a8a:	4b0d      	ldr	r3, [pc, #52]	; (8003ac0 <UART_SetConfig+0x2d4>)
 8003a8c:	fba3 1302 	umull	r1, r3, r3, r2
 8003a90:	095b      	lsrs	r3, r3, #5
 8003a92:	2164      	movs	r1, #100	; 0x64
 8003a94:	fb01 f303 	mul.w	r3, r1, r3
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	3332      	adds	r3, #50	; 0x32
 8003a9e:	4a08      	ldr	r2, [pc, #32]	; (8003ac0 <UART_SetConfig+0x2d4>)
 8003aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa4:	095b      	lsrs	r3, r3, #5
 8003aa6:	f003 0207 	and.w	r2, r3, #7
 8003aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4422      	add	r2, r4
 8003ab2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ab4:	e106      	b.n	8003cc4 <UART_SetConfig+0x4d8>
 8003ab6:	bf00      	nop
 8003ab8:	40011000 	.word	0x40011000
 8003abc:	40011400 	.word	0x40011400
 8003ac0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ac4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003ace:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003ad2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003ad6:	4642      	mov	r2, r8
 8003ad8:	464b      	mov	r3, r9
 8003ada:	1891      	adds	r1, r2, r2
 8003adc:	6239      	str	r1, [r7, #32]
 8003ade:	415b      	adcs	r3, r3
 8003ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ae2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ae6:	4641      	mov	r1, r8
 8003ae8:	1854      	adds	r4, r2, r1
 8003aea:	4649      	mov	r1, r9
 8003aec:	eb43 0501 	adc.w	r5, r3, r1
 8003af0:	f04f 0200 	mov.w	r2, #0
 8003af4:	f04f 0300 	mov.w	r3, #0
 8003af8:	00eb      	lsls	r3, r5, #3
 8003afa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003afe:	00e2      	lsls	r2, r4, #3
 8003b00:	4614      	mov	r4, r2
 8003b02:	461d      	mov	r5, r3
 8003b04:	4643      	mov	r3, r8
 8003b06:	18e3      	adds	r3, r4, r3
 8003b08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b0c:	464b      	mov	r3, r9
 8003b0e:	eb45 0303 	adc.w	r3, r5, r3
 8003b12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003b22:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b26:	f04f 0200 	mov.w	r2, #0
 8003b2a:	f04f 0300 	mov.w	r3, #0
 8003b2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003b32:	4629      	mov	r1, r5
 8003b34:	008b      	lsls	r3, r1, #2
 8003b36:	4621      	mov	r1, r4
 8003b38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b3c:	4621      	mov	r1, r4
 8003b3e:	008a      	lsls	r2, r1, #2
 8003b40:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003b44:	f7fc fb40 	bl	80001c8 <__aeabi_uldivmod>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	4b60      	ldr	r3, [pc, #384]	; (8003cd0 <UART_SetConfig+0x4e4>)
 8003b4e:	fba3 2302 	umull	r2, r3, r3, r2
 8003b52:	095b      	lsrs	r3, r3, #5
 8003b54:	011c      	lsls	r4, r3, #4
 8003b56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b60:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003b64:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003b68:	4642      	mov	r2, r8
 8003b6a:	464b      	mov	r3, r9
 8003b6c:	1891      	adds	r1, r2, r2
 8003b6e:	61b9      	str	r1, [r7, #24]
 8003b70:	415b      	adcs	r3, r3
 8003b72:	61fb      	str	r3, [r7, #28]
 8003b74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b78:	4641      	mov	r1, r8
 8003b7a:	1851      	adds	r1, r2, r1
 8003b7c:	6139      	str	r1, [r7, #16]
 8003b7e:	4649      	mov	r1, r9
 8003b80:	414b      	adcs	r3, r1
 8003b82:	617b      	str	r3, [r7, #20]
 8003b84:	f04f 0200 	mov.w	r2, #0
 8003b88:	f04f 0300 	mov.w	r3, #0
 8003b8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b90:	4659      	mov	r1, fp
 8003b92:	00cb      	lsls	r3, r1, #3
 8003b94:	4651      	mov	r1, sl
 8003b96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b9a:	4651      	mov	r1, sl
 8003b9c:	00ca      	lsls	r2, r1, #3
 8003b9e:	4610      	mov	r0, r2
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	4642      	mov	r2, r8
 8003ba6:	189b      	adds	r3, r3, r2
 8003ba8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003bac:	464b      	mov	r3, r9
 8003bae:	460a      	mov	r2, r1
 8003bb0:	eb42 0303 	adc.w	r3, r2, r3
 8003bb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003bc2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003bc4:	f04f 0200 	mov.w	r2, #0
 8003bc8:	f04f 0300 	mov.w	r3, #0
 8003bcc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003bd0:	4649      	mov	r1, r9
 8003bd2:	008b      	lsls	r3, r1, #2
 8003bd4:	4641      	mov	r1, r8
 8003bd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bda:	4641      	mov	r1, r8
 8003bdc:	008a      	lsls	r2, r1, #2
 8003bde:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003be2:	f7fc faf1 	bl	80001c8 <__aeabi_uldivmod>
 8003be6:	4602      	mov	r2, r0
 8003be8:	460b      	mov	r3, r1
 8003bea:	4611      	mov	r1, r2
 8003bec:	4b38      	ldr	r3, [pc, #224]	; (8003cd0 <UART_SetConfig+0x4e4>)
 8003bee:	fba3 2301 	umull	r2, r3, r3, r1
 8003bf2:	095b      	lsrs	r3, r3, #5
 8003bf4:	2264      	movs	r2, #100	; 0x64
 8003bf6:	fb02 f303 	mul.w	r3, r2, r3
 8003bfa:	1acb      	subs	r3, r1, r3
 8003bfc:	011b      	lsls	r3, r3, #4
 8003bfe:	3332      	adds	r3, #50	; 0x32
 8003c00:	4a33      	ldr	r2, [pc, #204]	; (8003cd0 <UART_SetConfig+0x4e4>)
 8003c02:	fba2 2303 	umull	r2, r3, r2, r3
 8003c06:	095b      	lsrs	r3, r3, #5
 8003c08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c0c:	441c      	add	r4, r3
 8003c0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c12:	2200      	movs	r2, #0
 8003c14:	673b      	str	r3, [r7, #112]	; 0x70
 8003c16:	677a      	str	r2, [r7, #116]	; 0x74
 8003c18:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003c1c:	4642      	mov	r2, r8
 8003c1e:	464b      	mov	r3, r9
 8003c20:	1891      	adds	r1, r2, r2
 8003c22:	60b9      	str	r1, [r7, #8]
 8003c24:	415b      	adcs	r3, r3
 8003c26:	60fb      	str	r3, [r7, #12]
 8003c28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c2c:	4641      	mov	r1, r8
 8003c2e:	1851      	adds	r1, r2, r1
 8003c30:	6039      	str	r1, [r7, #0]
 8003c32:	4649      	mov	r1, r9
 8003c34:	414b      	adcs	r3, r1
 8003c36:	607b      	str	r3, [r7, #4]
 8003c38:	f04f 0200 	mov.w	r2, #0
 8003c3c:	f04f 0300 	mov.w	r3, #0
 8003c40:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c44:	4659      	mov	r1, fp
 8003c46:	00cb      	lsls	r3, r1, #3
 8003c48:	4651      	mov	r1, sl
 8003c4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c4e:	4651      	mov	r1, sl
 8003c50:	00ca      	lsls	r2, r1, #3
 8003c52:	4610      	mov	r0, r2
 8003c54:	4619      	mov	r1, r3
 8003c56:	4603      	mov	r3, r0
 8003c58:	4642      	mov	r2, r8
 8003c5a:	189b      	adds	r3, r3, r2
 8003c5c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c5e:	464b      	mov	r3, r9
 8003c60:	460a      	mov	r2, r1
 8003c62:	eb42 0303 	adc.w	r3, r2, r3
 8003c66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	663b      	str	r3, [r7, #96]	; 0x60
 8003c72:	667a      	str	r2, [r7, #100]	; 0x64
 8003c74:	f04f 0200 	mov.w	r2, #0
 8003c78:	f04f 0300 	mov.w	r3, #0
 8003c7c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003c80:	4649      	mov	r1, r9
 8003c82:	008b      	lsls	r3, r1, #2
 8003c84:	4641      	mov	r1, r8
 8003c86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c8a:	4641      	mov	r1, r8
 8003c8c:	008a      	lsls	r2, r1, #2
 8003c8e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003c92:	f7fc fa99 	bl	80001c8 <__aeabi_uldivmod>
 8003c96:	4602      	mov	r2, r0
 8003c98:	460b      	mov	r3, r1
 8003c9a:	4b0d      	ldr	r3, [pc, #52]	; (8003cd0 <UART_SetConfig+0x4e4>)
 8003c9c:	fba3 1302 	umull	r1, r3, r3, r2
 8003ca0:	095b      	lsrs	r3, r3, #5
 8003ca2:	2164      	movs	r1, #100	; 0x64
 8003ca4:	fb01 f303 	mul.w	r3, r1, r3
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	011b      	lsls	r3, r3, #4
 8003cac:	3332      	adds	r3, #50	; 0x32
 8003cae:	4a08      	ldr	r2, [pc, #32]	; (8003cd0 <UART_SetConfig+0x4e4>)
 8003cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb4:	095b      	lsrs	r3, r3, #5
 8003cb6:	f003 020f 	and.w	r2, r3, #15
 8003cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4422      	add	r2, r4
 8003cc2:	609a      	str	r2, [r3, #8]
}
 8003cc4:	bf00      	nop
 8003cc6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cd0:	51eb851f 	.word	0x51eb851f

08003cd4 <memset>:
 8003cd4:	4402      	add	r2, r0
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d100      	bne.n	8003cde <memset+0xa>
 8003cdc:	4770      	bx	lr
 8003cde:	f803 1b01 	strb.w	r1, [r3], #1
 8003ce2:	e7f9      	b.n	8003cd8 <memset+0x4>

08003ce4 <__libc_init_array>:
 8003ce4:	b570      	push	{r4, r5, r6, lr}
 8003ce6:	4d0d      	ldr	r5, [pc, #52]	; (8003d1c <__libc_init_array+0x38>)
 8003ce8:	4c0d      	ldr	r4, [pc, #52]	; (8003d20 <__libc_init_array+0x3c>)
 8003cea:	1b64      	subs	r4, r4, r5
 8003cec:	10a4      	asrs	r4, r4, #2
 8003cee:	2600      	movs	r6, #0
 8003cf0:	42a6      	cmp	r6, r4
 8003cf2:	d109      	bne.n	8003d08 <__libc_init_array+0x24>
 8003cf4:	4d0b      	ldr	r5, [pc, #44]	; (8003d24 <__libc_init_array+0x40>)
 8003cf6:	4c0c      	ldr	r4, [pc, #48]	; (8003d28 <__libc_init_array+0x44>)
 8003cf8:	f000 f818 	bl	8003d2c <_init>
 8003cfc:	1b64      	subs	r4, r4, r5
 8003cfe:	10a4      	asrs	r4, r4, #2
 8003d00:	2600      	movs	r6, #0
 8003d02:	42a6      	cmp	r6, r4
 8003d04:	d105      	bne.n	8003d12 <__libc_init_array+0x2e>
 8003d06:	bd70      	pop	{r4, r5, r6, pc}
 8003d08:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d0c:	4798      	blx	r3
 8003d0e:	3601      	adds	r6, #1
 8003d10:	e7ee      	b.n	8003cf0 <__libc_init_array+0xc>
 8003d12:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d16:	4798      	blx	r3
 8003d18:	3601      	adds	r6, #1
 8003d1a:	e7f2      	b.n	8003d02 <__libc_init_array+0x1e>
 8003d1c:	08003dfc 	.word	0x08003dfc
 8003d20:	08003dfc 	.word	0x08003dfc
 8003d24:	08003dfc 	.word	0x08003dfc
 8003d28:	08003e00 	.word	0x08003e00

08003d2c <_init>:
 8003d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d2e:	bf00      	nop
 8003d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d32:	bc08      	pop	{r3}
 8003d34:	469e      	mov	lr, r3
 8003d36:	4770      	bx	lr

08003d38 <_fini>:
 8003d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d3a:	bf00      	nop
 8003d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d3e:	bc08      	pop	{r3}
 8003d40:	469e      	mov	lr, r3
 8003d42:	4770      	bx	lr
